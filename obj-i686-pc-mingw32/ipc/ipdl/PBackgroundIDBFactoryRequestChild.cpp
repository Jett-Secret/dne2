//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryRequestChild.h"

#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseChild.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace dom {
namespace indexedDB {


auto PBackgroundIDBFactoryRequestChild::Recv__delete__(const FactoryRequestResponse& response) -> bool
{
    return true;
}

auto PBackgroundIDBFactoryRequestChild::ActorDestroy(ActorDestroyReason aWhy) -> void
{
}

MOZ_IMPLICIT PBackgroundIDBFactoryRequestChild::PBackgroundIDBFactoryRequestChild() :
    mozilla::ipc::IProtocol(mozilla::ipc::ChildSide),
    mState(PBackgroundIDBFactoryRequest::__Dead)
{
    MOZ_COUNT_CTOR(PBackgroundIDBFactoryRequestChild);
}

PBackgroundIDBFactoryRequestChild::~PBackgroundIDBFactoryRequestChild()
{
    MOZ_COUNT_DTOR(PBackgroundIDBFactoryRequestChild);
}

auto PBackgroundIDBFactoryRequestChild::Manager() const -> PBackgroundIDBFactoryChild*
{
    return static_cast<PBackgroundIDBFactoryChild*>(IProtocol::Manager());
}

auto PBackgroundIDBFactoryRequestChild::state() -> PBackgroundIDBFactoryRequest::State
{
    return mState;
}

auto PBackgroundIDBFactoryRequestChild::SendPermissionRetry() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBFactoryRequest::Msg_PermissionRetry(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBFactoryRequestChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBFactoryRequestChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBFactoryRequest", "Msg_PermissionRetry", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBFactoryRequest::Transition(Trigger(Trigger::Recv, PBackgroundIDBFactoryRequest::Msg_PermissionRetry__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PBackgroundIDBFactoryRequestChild::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PBackgroundIDBFactoryRequestChild::OnMessageReceived(const Message& msg__) -> PBackgroundIDBFactoryRequestChild::Result
{
    switch ((msg__).type()) {
    case PBackgroundIDBFactoryRequest::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBFactoryRequestChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBFactoryRequestChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBFactoryRequest", "Msg___delete__", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            PBackgroundIDBFactoryRequestChild* actor;
            FactoryRequestResponse response;

            if ((!(Read((&(actor)), (&(msg__)), (&(iter__)), false)))) {
                FatalError("Error deserializing 'PBackgroundIDBFactoryRequestChild'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 875202478)))) {
                FatalError("Error deserializing 'PBackgroundIDBFactoryRequestChild'");
                return MsgValueError;
            }
            if ((!(Read((&(response)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'FactoryRequestResponse'");
                return MsgValueError;
            }
            // Sentinel = 'response'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2396115421)))) {
                FatalError("Error deserializing 'FactoryRequestResponse'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PBackgroundIDBFactoryRequest::Transition(Trigger(Trigger::Send, PBackgroundIDBFactoryRequest::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__(mozilla::Move(response))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }


            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->Manager())->RemoveManagee(PBackgroundIDBFactoryRequestMsgStart, actor);

            return MsgProcessed;
        }
    case PBackgroundIDBFactoryRequest::Msg_PermissionChallenge__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBFactoryRequestChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBFactoryRequestChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBFactoryRequest", "Msg_PermissionChallenge", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            PrincipalInfo principalInfo;

            if ((!(Read((&(principalInfo)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            // Sentinel = 'principalInfo'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3386633731)))) {
                FatalError("Error deserializing 'PrincipalInfo'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PBackgroundIDBFactoryRequest::Transition(Trigger(Trigger::Send, PBackgroundIDBFactoryRequest::Msg_PermissionChallenge__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvPermissionChallenge(mozilla::Move(principalInfo))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBFactoryRequest::Msg_Blocked__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBFactoryRequestChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBFactoryRequestChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBFactoryRequest", "Msg_Blocked", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            uint64_t currentVersion;

            if ((!(Read((&(currentVersion)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'currentVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1138986547)))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PBackgroundIDBFactoryRequest::Transition(Trigger(Trigger::Send, PBackgroundIDBFactoryRequest::Msg_Blocked__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvBlocked(mozilla::Move(currentVersion))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PBackgroundIDBFactoryRequestChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBFactoryRequestChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundIDBFactoryRequestChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBFactoryRequestChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundIDBFactoryRequestChild::GetProtocolTypeId() -> int32_t
{
    return PBackgroundIDBFactoryRequestMsgStart;
}

auto PBackgroundIDBFactoryRequestChild::ProtocolName() const -> const char*
{
    return "PBackgroundIDBFactoryRequestChild";
}

auto PBackgroundIDBFactoryRequestChild::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PBackgroundIDBFactoryRequestChild::DeallocSubtree() -> void
{
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const SystemPrincipalInfo& v__,
        Message* msg__) -> void
{
}

auto PBackgroundIDBFactoryRequestChild::Read(
        SystemPrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    return true;
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const nsTArray<PrincipalInfo>& v__,
        Message* msg__) -> void
{
    uint32_t length = (v__).Length();
    Write(length, msg__);
    // Sentinel = ('length', 'PrincipalInfo[]')
    (msg__)->WriteSentinel(1032188126);

    for (auto& elem : v__) {
        Write(elem, msg__);
        // Sentinel = 'PrincipalInfo[]'
        (msg__)->WriteSentinel(413380193);
    }
}

auto PBackgroundIDBFactoryRequestChild::Read(
        nsTArray<PrincipalInfo>* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    nsTArray<PrincipalInfo> fa;
    uint32_t length;
    if ((!(Read((&(length)), msg__, iter__)))) {
        mozilla::ipc::ArrayLengthReadError("PrincipalInfo[]");
        return false;
    }
    // Sentinel = ('length', 'PrincipalInfo[]')
    if ((!((msg__)->ReadSentinel(iter__, 1032188126)))) {
        mozilla::ipc::ArrayLengthReadError("PrincipalInfo[]");
        return false;
    }

    PrincipalInfo* elems = (fa).AppendElements(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(elems[i])), msg__, iter__)))) {
            FatalError("Error deserializing 'PrincipalInfo[i]'");
            return false;
        }
        // Sentinel = 'PrincipalInfo[]'
        if ((!((msg__)->ReadSentinel(iter__, 413380193)))) {
            FatalError("Error deserializing 'PrincipalInfo[i]'");
            return false;
        }
    }
    (v__)->SwapElements(fa);
    return true;
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const PBackgroundIDBFactoryRequestChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBFactoryRequestChild::Read(
        PBackgroundIDBFactoryRequestChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBFactoryRequest", PBackgroundIDBFactoryRequestMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBFactoryRequestChild*>((actor).value());
    return true;
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const ExpandedPrincipalInfo& v__,
        Message* msg__) -> void
{
    Write((v__).attrs(), msg__);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(3014987797);
    Write((v__).whitelist(), msg__);
    // Sentinel = 'whitelist'
    (msg__)->WriteSentinel(3731637258);
}

auto PBackgroundIDBFactoryRequestChild::Read(
        ExpandedPrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->attrs())), msg__, iter__)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((msg__)->ReadSentinel(iter__, 3014987797)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    if ((!(Read((&((v__)->whitelist())), msg__, iter__)))) {
        FatalError("Error deserializing 'whitelist' (PrincipalInfo[]) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    // Sentinel = 'whitelist'
    if ((!((msg__)->ReadSentinel(iter__, 3731637258)))) {
        FatalError("Error deserializing 'whitelist' (PrincipalInfo[]) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    return true;
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const OpenDatabaseRequestResponse& v__,
        Message* msg__) -> void
{
    // skipping actor field that's meaningless on this side
    Write((v__).databaseChild(), msg__, false);
    // Sentinel = 'database'
    (msg__)->WriteSentinel(2578429415);
}

auto PBackgroundIDBFactoryRequestChild::Read(
        OpenDatabaseRequestResponse* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    // skipping actor field that's meaningless on this side
    if ((!(Read((&((v__)->databaseChild())), msg__, iter__, false)))) {
        FatalError("Error deserializing 'databaseChild' (PBackgroundIDBDatabase) member of 'OpenDatabaseRequestResponse'");
        return false;
    }
    // Sentinel = 'database'
    if ((!((msg__)->ReadSentinel(iter__, 2578429415)))) {
        FatalError("Error deserializing 'databaseChild' (PBackgroundIDBDatabase) member of 'OpenDatabaseRequestResponse'");
        return false;
    }
    return true;
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const FactoryRequestResponse& v__,
        Message* msg__) -> void
{
    typedef FactoryRequestResponse type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'FactoryRequestResponse'
    (msg__)->WriteSentinel(733486454);

    switch ((v__).type()) {
    case type__::Tnsresult:
        {
            Write((v__).get_nsresult(), msg__);
            // Sentinel = 'Tnsresult'
            (msg__)->WriteSentinel(2293764539);
            return;
        }
    case type__::TOpenDatabaseRequestResponse:
        {
            Write((v__).get_OpenDatabaseRequestResponse(), msg__);
            // Sentinel = 'TOpenDatabaseRequestResponse'
            (msg__)->WriteSentinel(3653071567);
            return;
        }
    case type__::TDeleteDatabaseRequestResponse:
        {
            Write((v__).get_DeleteDatabaseRequestResponse(), msg__);
            // Sentinel = 'TDeleteDatabaseRequestResponse'
            (msg__)->WriteSentinel(2445651930);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PBackgroundIDBFactoryRequestChild::Read(
        FactoryRequestResponse* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef FactoryRequestResponse type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("FactoryRequestResponse");
        return false;
    }
    // Sentinel = 'FactoryRequestResponse'
    if ((!((msg__)->ReadSentinel(iter__, 733486454)))) {
        mozilla::ipc::UnionTypeReadError("FactoryRequestResponse");
        return false;
    }

    switch (type) {
    case type__::Tnsresult:
        {
            nsresult tmp = nsresult();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_nsresult())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tnsresult'
            if ((!((msg__)->ReadSentinel(iter__, 2293764539)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TOpenDatabaseRequestResponse:
        {
            OpenDatabaseRequestResponse tmp = OpenDatabaseRequestResponse();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_OpenDatabaseRequestResponse())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TOpenDatabaseRequestResponse'
            if ((!((msg__)->ReadSentinel(iter__, 3653071567)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TDeleteDatabaseRequestResponse:
        {
            DeleteDatabaseRequestResponse tmp = DeleteDatabaseRequestResponse();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_DeleteDatabaseRequestResponse())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TDeleteDatabaseRequestResponse'
            if ((!((msg__)->ReadSentinel(iter__, 2445651930)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const PrincipalInfo& v__,
        Message* msg__) -> void
{
    typedef PrincipalInfo type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'PrincipalInfo'
    (msg__)->WriteSentinel(4194518819);

    switch ((v__).type()) {
    case type__::TContentPrincipalInfo:
        {
            Write((v__).get_ContentPrincipalInfo(), msg__);
            // Sentinel = 'TContentPrincipalInfo'
            (msg__)->WriteSentinel(3677342258);
            return;
        }
    case type__::TSystemPrincipalInfo:
        {
            Write((v__).get_SystemPrincipalInfo(), msg__);
            // Sentinel = 'TSystemPrincipalInfo'
            (msg__)->WriteSentinel(3590603679);
            return;
        }
    case type__::TNullPrincipalInfo:
        {
            Write((v__).get_NullPrincipalInfo(), msg__);
            // Sentinel = 'TNullPrincipalInfo'
            (msg__)->WriteSentinel(3477774965);
            return;
        }
    case type__::TExpandedPrincipalInfo:
        {
            Write((v__).get_ExpandedPrincipalInfo(), msg__);
            // Sentinel = 'TExpandedPrincipalInfo'
            (msg__)->WriteSentinel(589324917);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PBackgroundIDBFactoryRequestChild::Read(
        PrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef PrincipalInfo type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("PrincipalInfo");
        return false;
    }
    // Sentinel = 'PrincipalInfo'
    if ((!((msg__)->ReadSentinel(iter__, 4194518819)))) {
        mozilla::ipc::UnionTypeReadError("PrincipalInfo");
        return false;
    }

    switch (type) {
    case type__::TContentPrincipalInfo:
        {
            ContentPrincipalInfo tmp = ContentPrincipalInfo();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ContentPrincipalInfo())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TContentPrincipalInfo'
            if ((!((msg__)->ReadSentinel(iter__, 3677342258)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TSystemPrincipalInfo:
        {
            SystemPrincipalInfo tmp = SystemPrincipalInfo();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_SystemPrincipalInfo())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TSystemPrincipalInfo'
            if ((!((msg__)->ReadSentinel(iter__, 3590603679)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TNullPrincipalInfo:
        {
            NullPrincipalInfo tmp = NullPrincipalInfo();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_NullPrincipalInfo())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TNullPrincipalInfo'
            if ((!((msg__)->ReadSentinel(iter__, 3477774965)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TExpandedPrincipalInfo:
        {
            ExpandedPrincipalInfo tmp = ExpandedPrincipalInfo();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ExpandedPrincipalInfo())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TExpandedPrincipalInfo'
            if ((!((msg__)->ReadSentinel(iter__, 589324917)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const ContentPrincipalInfoOriginNoSuffix& v__,
        Message* msg__) -> void
{
    typedef ContentPrincipalInfoOriginNoSuffix type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'ContentPrincipalInfoOriginNoSuffix'
    (msg__)->WriteSentinel(2442066713);

    switch ((v__).type()) {
    case type__::TnsCString:
        {
            Write((v__).get_nsCString(), msg__);
            // Sentinel = 'TnsCString'
            (msg__)->WriteSentinel(2427411293);
            return;
        }
    case type__::Tvoid_t:
        {
            Write((v__).get_void_t(), msg__);
            // Sentinel = 'Tvoid_t'
            (msg__)->WriteSentinel(3041273328);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PBackgroundIDBFactoryRequestChild::Read(
        ContentPrincipalInfoOriginNoSuffix* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef ContentPrincipalInfoOriginNoSuffix type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("ContentPrincipalInfoOriginNoSuffix");
        return false;
    }
    // Sentinel = 'ContentPrincipalInfoOriginNoSuffix'
    if ((!((msg__)->ReadSentinel(iter__, 2442066713)))) {
        mozilla::ipc::UnionTypeReadError("ContentPrincipalInfoOriginNoSuffix");
        return false;
    }

    switch (type) {
    case type__::TnsCString:
        {
            nsCString tmp = nsCString();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_nsCString())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TnsCString'
            if ((!((msg__)->ReadSentinel(iter__, 2427411293)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::Tvoid_t:
        {
            void_t tmp = void_t();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_void_t())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((msg__)->ReadSentinel(iter__, 3041273328)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const PBackgroundIDBDatabaseChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBFactoryRequestChild::Read(
        PBackgroundIDBDatabaseChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBDatabase", PBackgroundIDBDatabaseMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBDatabaseChild*>((actor).value());
    return true;
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const ContentPrincipalInfo& v__,
        Message* msg__) -> void
{
    Write((v__).attrs(), msg__);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(3014987797);
    Write((v__).originNoSuffix(), msg__);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(2833071422);
    Write((v__).spec(), msg__);
    // Sentinel = 'spec'
    (msg__)->WriteSentinel(1630740541);
}

auto PBackgroundIDBFactoryRequestChild::Read(
        ContentPrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->attrs())), msg__, iter__)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((msg__)->ReadSentinel(iter__, 3014987797)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'ContentPrincipalInfo'");
        return false;
    }
    if ((!(Read((&((v__)->originNoSuffix())), msg__, iter__)))) {
        FatalError("Error deserializing 'originNoSuffix' (ContentPrincipalInfoOriginNoSuffix) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'originNoSuffix'
    if ((!((msg__)->ReadSentinel(iter__, 2833071422)))) {
        FatalError("Error deserializing 'originNoSuffix' (ContentPrincipalInfoOriginNoSuffix) member of 'ContentPrincipalInfo'");
        return false;
    }
    if ((!(Read((&((v__)->spec())), msg__, iter__)))) {
        FatalError("Error deserializing 'spec' (nsCString) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'spec'
    if ((!((msg__)->ReadSentinel(iter__, 1630740541)))) {
        FatalError("Error deserializing 'spec' (nsCString) member of 'ContentPrincipalInfo'");
        return false;
    }
    return true;
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const NullPrincipalInfo& v__,
        Message* msg__) -> void
{
    Write((v__).attrs(), msg__);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(3014987797);
}

auto PBackgroundIDBFactoryRequestChild::Read(
        NullPrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->attrs())), msg__, iter__)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'NullPrincipalInfo'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((msg__)->ReadSentinel(iter__, 3014987797)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'NullPrincipalInfo'");
        return false;
    }
    return true;
}

auto PBackgroundIDBFactoryRequestChild::Write(
        const DeleteDatabaseRequestResponse& v__,
        Message* msg__) -> void
{
    Write((v__).previousVersion(), msg__);
    // Sentinel = 'previousVersion'
    (msg__)->WriteSentinel(135971026);
}

auto PBackgroundIDBFactoryRequestChild::Read(
        DeleteDatabaseRequestResponse* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->previousVersion())), msg__, iter__)))) {
        FatalError("Error deserializing 'previousVersion' (uint64_t) member of 'DeleteDatabaseRequestResponse'");
        return false;
    }
    // Sentinel = 'previousVersion'
    if ((!((msg__)->ReadSentinel(iter__, 135971026)))) {
        FatalError("Error deserializing 'previousVersion' (uint64_t) member of 'DeleteDatabaseRequestResponse'");
        return false;
    }
    return true;
}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
