//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PSpeechSynthesisRequestChild.h"

#include "mozilla/dom/PSpeechSynthesisChild.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace dom {


auto PSpeechSynthesisRequestChild::ActorDestroy(ActorDestroyReason aWhy) -> void
{
}

MOZ_IMPLICIT PSpeechSynthesisRequestChild::PSpeechSynthesisRequestChild() :
    mozilla::ipc::IProtocol(mozilla::ipc::ChildSide),
    mState(PSpeechSynthesisRequest::__Dead)
{
    MOZ_COUNT_CTOR(PSpeechSynthesisRequestChild);
}

PSpeechSynthesisRequestChild::~PSpeechSynthesisRequestChild()
{
    MOZ_COUNT_DTOR(PSpeechSynthesisRequestChild);
}

auto PSpeechSynthesisRequestChild::Manager() const -> PSpeechSynthesisChild*
{
    return static_cast<PSpeechSynthesisChild*>(IProtocol::Manager());
}

auto PSpeechSynthesisRequestChild::state() -> PSpeechSynthesisRequest::State
{
    return mState;
}

auto PSpeechSynthesisRequestChild::Send__delete__(PSpeechSynthesisRequestChild* actor) -> bool
{
    if ((!(actor))) {
        return false;
    }

    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg___delete__((actor)->Id());

    (actor)->Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);



    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", (actor)->OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PSpeechSynthesisRequest", "Msg___delete__", js::ProfileEntry::Category::OTHER);
    if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Recv, PSpeechSynthesisRequest::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = ((actor)->GetIPCChannel())->Send(msg__);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->Manager())->RemoveManagee(PSpeechSynthesisRequestMsgStart, actor);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::SendPause() -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_Pause(Id());





    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_Pause", js::ProfileEntry::Category::OTHER);
    if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Recv, PSpeechSynthesisRequest::Msg_Pause__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::SendResume() -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_Resume(Id());





    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_Resume", js::ProfileEntry::Category::OTHER);
    if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Recv, PSpeechSynthesisRequest::Msg_Resume__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::SendCancel() -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_Cancel(Id());





    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_Cancel", js::ProfileEntry::Category::OTHER);
    if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Recv, PSpeechSynthesisRequest::Msg_Cancel__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::SendForceEnd() -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_ForceEnd(Id());





    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_ForceEnd", js::ProfileEntry::Category::OTHER);
    if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Recv, PSpeechSynthesisRequest::Msg_ForceEnd__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::SendSetAudioOutputVolume(const float& aVolume) -> bool
{
    IPC::Message* msg__ = PSpeechSynthesisRequest::Msg_SetAudioOutputVolume(Id());

    Write(aVolume, msg__);
    // Sentinel = 'aVolume'
    (msg__)->WriteSentinel(3908369896);




    if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
        mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_SetAudioOutputVolume", js::ProfileEntry::Category::OTHER);
    if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Recv, PSpeechSynthesisRequest::Msg_SetAudioOutputVolume__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PSpeechSynthesisRequestChild::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PSpeechSynthesisRequestChild::OnMessageReceived(const Message& msg__) -> PSpeechSynthesisRequestChild::Result
{
    switch ((msg__).type()) {
    case PSpeechSynthesisRequest::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnEnd__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_OnEnd", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            bool aIsError;
            float aElapsedTime;
            uint32_t aCharIndex;

            if ((!(Read((&(aIsError)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aIsError'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3979019701)))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            if ((!(Read((&(aElapsedTime)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aElapsedTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45978708)))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(Read((&(aCharIndex)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3951557473)))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Send, PSpeechSynthesisRequest::Msg_OnEnd__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnEnd(mozilla::Move(aIsError), mozilla::Move(aElapsedTime), mozilla::Move(aCharIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnStart__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_OnStart", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsString aUri;

            if ((!(Read((&(aUri)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aUri'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2043506205)))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Send, PSpeechSynthesisRequest::Msg_OnStart__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnStart(mozilla::Move(aUri))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnPause__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_OnPause", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            float aElapsedTime;
            uint32_t aCharIndex;

            if ((!(Read((&(aElapsedTime)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aElapsedTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45978708)))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(Read((&(aCharIndex)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3951557473)))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Send, PSpeechSynthesisRequest::Msg_OnPause__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnPause(mozilla::Move(aElapsedTime), mozilla::Move(aCharIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnResume__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_OnResume", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            float aElapsedTime;
            uint32_t aCharIndex;

            if ((!(Read((&(aElapsedTime)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aElapsedTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45978708)))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(Read((&(aCharIndex)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3951557473)))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Send, PSpeechSynthesisRequest::Msg_OnResume__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnResume(mozilla::Move(aElapsedTime), mozilla::Move(aCharIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnBoundary__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_OnBoundary", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsString aName;
            float aElapsedTime;
            uint32_t aCharIndex;

            if ((!(Read((&(aName)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1450162941)))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(Read((&(aElapsedTime)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aElapsedTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45978708)))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(Read((&(aCharIndex)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3951557473)))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Send, PSpeechSynthesisRequest::Msg_OnBoundary__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnBoundary(mozilla::Move(aName), mozilla::Move(aElapsedTime), mozilla::Move(aCharIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PSpeechSynthesisRequest::Msg_OnMark__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PSpeechSynthesisRequestChild")) {
                mozilla::ipc::LogMessageForProtocol("PSpeechSynthesisRequestChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PSpeechSynthesisRequest", "Msg_OnMark", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsString aName;
            float aElapsedTime;
            uint32_t aCharIndex;

            if ((!(Read((&(aName)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1450162941)))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(Read((&(aElapsedTime)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            // Sentinel = 'aElapsedTime'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 45978708)))) {
                FatalError("Error deserializing 'float'");
                return MsgValueError;
            }
            if ((!(Read((&(aCharIndex)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aCharIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3951557473)))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PSpeechSynthesisRequest::Transition(Trigger(Trigger::Send, PSpeechSynthesisRequest::Msg_OnMark__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnMark(mozilla::Move(aName), mozilla::Move(aElapsedTime), mozilla::Move(aCharIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PSpeechSynthesisRequestChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PSpeechSynthesisRequestChild::Result
{
    return MsgNotKnown;
}

auto PSpeechSynthesisRequestChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PSpeechSynthesisRequestChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PSpeechSynthesisRequestChild::GetProtocolTypeId() -> int32_t
{
    return PSpeechSynthesisRequestMsgStart;
}

auto PSpeechSynthesisRequestChild::ProtocolName() const -> const char*
{
    return "PSpeechSynthesisRequestChild";
}

auto PSpeechSynthesisRequestChild::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PSpeechSynthesisRequestChild::DeallocSubtree() -> void
{
}

auto PSpeechSynthesisRequestChild::Write(
        const PSpeechSynthesisRequestChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PSpeechSynthesisRequestChild::Read(
        PSpeechSynthesisRequestChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PSpeechSynthesisRequest", PSpeechSynthesisRequestMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PSpeechSynthesisRequestChild*>((actor).value());
    return true;
}



} // namespace dom
} // namespace mozilla
