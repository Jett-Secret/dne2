//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPStorageParent.h"

#include "mozilla/gmp/PGMPParent.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace gmp {


auto PGMPStorageParent::Recv__delete__() -> bool
{
    return true;
}


MOZ_IMPLICIT PGMPStorageParent::PGMPStorageParent() :
    mozilla::ipc::IProtocol(mozilla::ipc::ParentSide),
    mState(PGMPStorage::__Dead)
{
    MOZ_COUNT_CTOR(PGMPStorageParent);
}

PGMPStorageParent::~PGMPStorageParent()
{
    MOZ_COUNT_DTOR(PGMPStorageParent);
}

auto PGMPStorageParent::Manager() const -> PGMPParent*
{
    return static_cast<PGMPParent*>(IProtocol::Manager());
}

auto PGMPStorageParent::state() -> PGMPStorage::State
{
    return mState;
}

auto PGMPStorageParent::SendOpenComplete(
        const nsCString& aRecordName,
        const GMPErr& aStatus) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_OpenComplete(Id());

    Write(aRecordName, msg__);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(4079879416);
    Write(aStatus, msg__);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(236002576);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg_OpenComplete", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Send, PGMPStorage::Msg_OpenComplete__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PGMPStorageParent::SendReadComplete(
        const nsCString& aRecordName,
        const GMPErr& aStatus,
        const nsTArray<uint8_t>& aBytes) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_ReadComplete(Id());

    Write(aRecordName, msg__);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(4079879416);
    Write(aStatus, msg__);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(236002576);
    Write(aBytes, msg__);
    // Sentinel = 'aBytes'
    (msg__)->WriteSentinel(4118068628);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg_ReadComplete", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Send, PGMPStorage::Msg_ReadComplete__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PGMPStorageParent::SendWriteComplete(
        const nsCString& aRecordName,
        const GMPErr& aStatus) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_WriteComplete(Id());

    Write(aRecordName, msg__);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(4079879416);
    Write(aStatus, msg__);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(236002576);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg_WriteComplete", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Send, PGMPStorage::Msg_WriteComplete__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PGMPStorageParent::SendRecordNames(
        const nsTArray<nsCString>& aRecordNames,
        const GMPErr& aStatus) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_RecordNames(Id());

    Write(aRecordNames, msg__);
    // Sentinel = 'aRecordNames'
    (msg__)->WriteSentinel(3431920102);
    Write(aStatus, msg__);
    // Sentinel = 'aStatus'
    (msg__)->WriteSentinel(236002576);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg_RecordNames", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Send, PGMPStorage::Msg_RecordNames__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PGMPStorageParent::SendShutdown() -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_Shutdown(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg_Shutdown", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Send, PGMPStorage::Msg_Shutdown__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PGMPStorageParent::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPStorageParent::OnMessageReceived(const Message& msg__) -> PGMPStorageParent::Result
{
    switch ((msg__).type()) {
    case PGMPStorage::Msg_Open__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg_Open", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsCString aRecordName;

            if ((!(Read((&(aRecordName)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 4079879416)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg_Open__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOpen(mozilla::Move(aRecordName))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_Read__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg_Read", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsCString aRecordName;

            if ((!(Read((&(aRecordName)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 4079879416)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg_Read__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvRead(mozilla::Move(aRecordName))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_Write__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg_Write", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsCString aRecordName;
            nsTArray<uint8_t> aBytes;

            if ((!(Read((&(aRecordName)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 4079879416)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(Read((&(aBytes)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsTArray'");
                return MsgValueError;
            }
            // Sentinel = 'aBytes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 4118068628)))) {
                FatalError("Error deserializing 'nsTArray'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg_Write__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvWrite(mozilla::Move(aRecordName), mozilla::Move(aBytes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_Close__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg_Close", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsCString aRecordName;

            if ((!(Read((&(aRecordName)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 4079879416)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg_Close__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvClose(mozilla::Move(aRecordName))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_GetRecordNames__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg_GetRecordNames", js::ProfileEntry::Category::OTHER);

            if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg_GetRecordNames__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvGetRecordNames()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageParent")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg___delete__", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            PGMPStorageParent* actor;

            if ((!(Read((&(actor)), (&(msg__)), (&(iter__)), false)))) {
                FatalError("Error deserializing 'PGMPStorageParent'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 875202478)))) {
                FatalError("Error deserializing 'PGMPStorageParent'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }


            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->Manager())->RemoveManagee(PGMPStorageMsgStart, actor);

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PGMPStorageParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPStorageParent::Result
{
    return MsgNotKnown;
}

auto PGMPStorageParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPStorageParent::Result
{
    return MsgNotKnown;
}

auto PGMPStorageParent::GetProtocolTypeId() -> int32_t
{
    return PGMPStorageMsgStart;
}

auto PGMPStorageParent::ProtocolName() const -> const char*
{
    return "PGMPStorageParent";
}

auto PGMPStorageParent::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PGMPStorageParent::DeallocSubtree() -> void
{
}

auto PGMPStorageParent::Write(
        const PGMPStorageParent* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PGMPStorageParent::Read(
        PGMPStorageParent** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PGMPStorage", PGMPStorageMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PGMPStorageParent*>((actor).value());
    return true;
}



} // namespace gmp
} // namespace mozilla
