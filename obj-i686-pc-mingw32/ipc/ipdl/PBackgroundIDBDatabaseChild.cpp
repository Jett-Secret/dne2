//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseChild.h"
#include "ipc/IPCMessageUtils.h"

#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseFileChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseRequestChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBFactoryChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBTransactionChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBVersionChangeTransactionChild.h"
#include "mozilla/dom/PBackgroundMutableFileChild.h"
#include "mozilla/dom/PBlobChild.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace dom {
namespace indexedDB {


auto PBackgroundIDBDatabaseChild::Recv__delete__() -> bool
{
    return true;
}

auto PBackgroundIDBDatabaseChild::RecvPBackgroundIDBVersionChangeTransactionConstructor(
        PBackgroundIDBVersionChangeTransactionChild* actor,
        const uint64_t& currentVersion,
        const uint64_t& requestedVersion,
        const int64_t& nextObjectStoreId,
        const int64_t& nextIndexId) -> bool
{
    return true;
}

auto PBackgroundIDBDatabaseChild::RecvPBackgroundMutableFileConstructor(
        PBackgroundMutableFileChild* actor,
        const nsString& name,
        const nsString& type) -> bool
{
    return true;
}

auto PBackgroundIDBDatabaseChild::ActorDestroy(ActorDestroyReason aWhy) -> void
{
}

MOZ_IMPLICIT PBackgroundIDBDatabaseChild::PBackgroundIDBDatabaseChild() :
    mozilla::ipc::IProtocol(mozilla::ipc::ChildSide),
    mState(PBackgroundIDBDatabase::__Dead)
{
    MOZ_COUNT_CTOR(PBackgroundIDBDatabaseChild);
}

PBackgroundIDBDatabaseChild::~PBackgroundIDBDatabaseChild()
{
    MOZ_COUNT_DTOR(PBackgroundIDBDatabaseChild);
}

auto PBackgroundIDBDatabaseChild::Manager() const -> PBackgroundIDBFactoryChild*
{
    return static_cast<PBackgroundIDBFactoryChild*>(IProtocol::Manager());
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBDatabaseFileChild(nsTArray<PBackgroundIDBDatabaseFileChild*>& aArr) const -> void
{
    (mManagedPBackgroundIDBDatabaseFileChild).ToArray(aArr);
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBDatabaseFileChild() const -> const ManagedContainer<PBackgroundIDBDatabaseFileChild>&
{
    return mManagedPBackgroundIDBDatabaseFileChild;
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBDatabaseRequestChild(nsTArray<PBackgroundIDBDatabaseRequestChild*>& aArr) const -> void
{
    (mManagedPBackgroundIDBDatabaseRequestChild).ToArray(aArr);
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBDatabaseRequestChild() const -> const ManagedContainer<PBackgroundIDBDatabaseRequestChild>&
{
    return mManagedPBackgroundIDBDatabaseRequestChild;
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBTransactionChild(nsTArray<PBackgroundIDBTransactionChild*>& aArr) const -> void
{
    (mManagedPBackgroundIDBTransactionChild).ToArray(aArr);
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBTransactionChild() const -> const ManagedContainer<PBackgroundIDBTransactionChild>&
{
    return mManagedPBackgroundIDBTransactionChild;
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBVersionChangeTransactionChild(nsTArray<PBackgroundIDBVersionChangeTransactionChild*>& aArr) const -> void
{
    (mManagedPBackgroundIDBVersionChangeTransactionChild).ToArray(aArr);
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundIDBVersionChangeTransactionChild() const -> const ManagedContainer<PBackgroundIDBVersionChangeTransactionChild>&
{
    return mManagedPBackgroundIDBVersionChangeTransactionChild;
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundMutableFileChild(nsTArray<PBackgroundMutableFileChild*>& aArr) const -> void
{
    (mManagedPBackgroundMutableFileChild).ToArray(aArr);
}

auto PBackgroundIDBDatabaseChild::ManagedPBackgroundMutableFileChild() const -> const ManagedContainer<PBackgroundMutableFileChild>&
{
    return mManagedPBackgroundMutableFileChild;
}

auto PBackgroundIDBDatabaseChild::state() -> PBackgroundIDBDatabase::State
{
    return mState;
}

auto PBackgroundIDBDatabaseChild::SendDeleteMe() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_DeleteMe(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_DeleteMe", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Recv, PBackgroundIDBDatabase::Msg_DeleteMe__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PBackgroundIDBDatabaseChild::SendBlocked() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_Blocked(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_Blocked", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Recv, PBackgroundIDBDatabase::Msg_Blocked__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PBackgroundIDBDatabaseChild::SendClose() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_Close(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_Close", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Recv, PBackgroundIDBDatabase::Msg_Close__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBDatabaseFileConstructor(PBlobChild* blob) -> PBackgroundIDBDatabaseFileChild*
{
    return SendPBackgroundIDBDatabaseFileConstructor(AllocPBackgroundIDBDatabaseFileChild(blob), blob);
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBDatabaseFileConstructor(
        PBackgroundIDBDatabaseFileChild* actor,
        PBlobChild* blob) -> PBackgroundIDBDatabaseFileChild*
{
    if ((!(actor))) {
        NS_WARNING("Error constructing actor PBackgroundIDBDatabaseFileChild");
        return nullptr;
    }
    (actor)->SetId(Register(actor));
    (actor)->SetManager(this);
    (actor)->SetIPCChannel(GetIPCChannel());
    (mManagedPBackgroundIDBDatabaseFileChild).PutEntry(actor);
    (actor)->mState = mozilla::dom::indexedDB::PBackgroundIDBDatabaseFile::__Start;

    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseFileConstructor(Id());

    Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);
    Write(blob, msg__, false);
    // Sentinel = 'blob'
    (msg__)->WriteSentinel(1963585077);



    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_PBackgroundIDBDatabaseFileConstructor", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Recv, PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseFileConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    if ((!(sendok__))) {
        FatalError("constructor for actor failed");
        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBDatabaseRequestConstructor(const DatabaseRequestParams& params) -> PBackgroundIDBDatabaseRequestChild*
{
    return SendPBackgroundIDBDatabaseRequestConstructor(AllocPBackgroundIDBDatabaseRequestChild(params), params);
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBDatabaseRequestConstructor(
        PBackgroundIDBDatabaseRequestChild* actor,
        const DatabaseRequestParams& params) -> PBackgroundIDBDatabaseRequestChild*
{
    if ((!(actor))) {
        NS_WARNING("Error constructing actor PBackgroundIDBDatabaseRequestChild");
        return nullptr;
    }
    (actor)->SetId(Register(actor));
    (actor)->SetManager(this);
    (actor)->SetIPCChannel(GetIPCChannel());
    (mManagedPBackgroundIDBDatabaseRequestChild).PutEntry(actor);
    (actor)->mState = mozilla::dom::indexedDB::PBackgroundIDBDatabaseRequest::__Start;

    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseRequestConstructor(Id());

    Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);
    Write(params, msg__);
    // Sentinel = 'params'
    (msg__)->WriteSentinel(1677790004);



    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_PBackgroundIDBDatabaseRequestConstructor", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Recv, PBackgroundIDBDatabase::Msg_PBackgroundIDBDatabaseRequestConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    if ((!(sendok__))) {
        FatalError("constructor for actor failed");
        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBTransactionConstructor(
        const nsTArray<nsString>& objectStoreNames,
        const Mode& mode) -> PBackgroundIDBTransactionChild*
{
    return SendPBackgroundIDBTransactionConstructor(AllocPBackgroundIDBTransactionChild(objectStoreNames, mode), objectStoreNames, mode);
}

auto PBackgroundIDBDatabaseChild::SendPBackgroundIDBTransactionConstructor(
        PBackgroundIDBTransactionChild* actor,
        const nsTArray<nsString>& objectStoreNames,
        const Mode& mode) -> PBackgroundIDBTransactionChild*
{
    if ((!(actor))) {
        NS_WARNING("Error constructing actor PBackgroundIDBTransactionChild");
        return nullptr;
    }
    (actor)->SetId(Register(actor));
    (actor)->SetManager(this);
    (actor)->SetIPCChannel(GetIPCChannel());
    (mManagedPBackgroundIDBTransactionChild).PutEntry(actor);
    (actor)->mState = mozilla::dom::indexedDB::PBackgroundIDBTransaction::__Start;

    IPC::Message* msg__ = PBackgroundIDBDatabase::Msg_PBackgroundIDBTransactionConstructor(Id());

    Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);
    Write(objectStoreNames, msg__);
    // Sentinel = 'objectStoreNames'
    (msg__)->WriteSentinel(2433166752);
    Write(mode, msg__);
    // Sentinel = 'mode'
    (msg__)->WriteSentinel(3911367285);



    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_PBackgroundIDBTransactionConstructor", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Recv, PBackgroundIDBDatabase::Msg_PBackgroundIDBTransactionConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    if ((!(sendok__))) {
        FatalError("constructor for actor failed");
        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBDatabaseChild::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundIDBDatabaseFileMsgStart:
        {
            PBackgroundIDBDatabaseFileChild* actor = static_cast<PBackgroundIDBDatabaseFileChild*>(aListener);
            auto& container = mManagedPBackgroundIDBDatabaseFileChild;
            MOZ_RELEASE_ASSERT((container).Contains(actor), "actor not managed by this!");

            (container).RemoveEntry(actor);
            DeallocPBackgroundIDBDatabaseFileChild(actor);
            return;
        }
    case PBackgroundIDBDatabaseRequestMsgStart:
        {
            PBackgroundIDBDatabaseRequestChild* actor = static_cast<PBackgroundIDBDatabaseRequestChild*>(aListener);
            auto& container = mManagedPBackgroundIDBDatabaseRequestChild;
            MOZ_RELEASE_ASSERT((container).Contains(actor), "actor not managed by this!");

            (container).RemoveEntry(actor);
            DeallocPBackgroundIDBDatabaseRequestChild(actor);
            return;
        }
    case PBackgroundIDBTransactionMsgStart:
        {
            PBackgroundIDBTransactionChild* actor = static_cast<PBackgroundIDBTransactionChild*>(aListener);
            auto& container = mManagedPBackgroundIDBTransactionChild;
            MOZ_RELEASE_ASSERT((container).Contains(actor), "actor not managed by this!");

            (container).RemoveEntry(actor);
            DeallocPBackgroundIDBTransactionChild(actor);
            return;
        }
    case PBackgroundIDBVersionChangeTransactionMsgStart:
        {
            PBackgroundIDBVersionChangeTransactionChild* actor = static_cast<PBackgroundIDBVersionChangeTransactionChild*>(aListener);
            auto& container = mManagedPBackgroundIDBVersionChangeTransactionChild;
            MOZ_RELEASE_ASSERT((container).Contains(actor), "actor not managed by this!");

            (container).RemoveEntry(actor);
            DeallocPBackgroundIDBVersionChangeTransactionChild(actor);
            return;
        }
    case PBackgroundMutableFileMsgStart:
        {
            PBackgroundMutableFileChild* actor = static_cast<PBackgroundMutableFileChild*>(aListener);
            auto& container = mManagedPBackgroundMutableFileChild;
            MOZ_RELEASE_ASSERT((container).Contains(actor), "actor not managed by this!");

            (container).RemoveEntry(actor);
            DeallocPBackgroundMutableFileChild(actor);
            return;
        }
    default:
        {
            FatalError("unreached");
            return;
        }
    }
}

auto PBackgroundIDBDatabaseChild::OnMessageReceived(const Message& msg__) -> PBackgroundIDBDatabaseChild::Result
{
    switch ((msg__).type()) {
    case PBackgroundIDBDatabase::Reply_PBackgroundIDBDatabaseFileConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Reply_PBackgroundIDBDatabaseRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Reply_PBackgroundIDBTransactionConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBDatabase", "Msg___delete__", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            PBackgroundIDBDatabaseChild* actor;

            if ((!(Read((&(actor)), (&(msg__)), (&(iter__)), false)))) {
                FatalError("Error deserializing 'PBackgroundIDBDatabaseChild'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 875202478)))) {
                FatalError("Error deserializing 'PBackgroundIDBDatabaseChild'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Send, PBackgroundIDBDatabase::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }


            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->Manager())->RemoveManagee(PBackgroundIDBDatabaseMsgStart, actor);

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_VersionChange__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_VersionChange", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            uint64_t oldVersion;
            NullableVersion newVersion;

            if ((!(Read((&(oldVersion)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'oldVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1241972167)))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(Read((&(newVersion)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'NullableVersion'");
                return MsgValueError;
            }
            // Sentinel = 'newVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2786012988)))) {
                FatalError("Error deserializing 'NullableVersion'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Send, PBackgroundIDBDatabase::Msg_VersionChange__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvVersionChange(mozilla::Move(oldVersion), mozilla::Move(newVersion))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_Invalidate__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_Invalidate", js::ProfileEntry::Category::OTHER);

            if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Send, PBackgroundIDBDatabase::Msg_Invalidate__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvInvalidate()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_CloseAfterInvalidationComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_CloseAfterInvalidationComplete", js::ProfileEntry::Category::OTHER);

            if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Send, PBackgroundIDBDatabase::Msg_CloseAfterInvalidationComplete__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvCloseAfterInvalidationComplete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_PBackgroundIDBVersionChangeTransactionConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_PBackgroundIDBVersionChangeTransactionConstructor", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            ActorHandle handle__;
            PBackgroundIDBVersionChangeTransactionChild* actor;
            uint64_t currentVersion;
            uint64_t requestedVersion;
            int64_t nextObjectStoreId;
            int64_t nextIndexId;

            if ((!(Read((&(handle__)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 875202478)))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(Read((&(currentVersion)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'currentVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 1138986547)))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(Read((&(requestedVersion)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            // Sentinel = 'requestedVersion'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2070076908)))) {
                FatalError("Error deserializing 'uint64_t'");
                return MsgValueError;
            }
            if ((!(Read((&(nextObjectStoreId)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'nextObjectStoreId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 882891943)))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            if ((!(Read((&(nextIndexId)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            // Sentinel = 'nextIndexId'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 298839989)))) {
                FatalError("Error deserializing 'int64_t'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Send, PBackgroundIDBDatabase::Msg_PBackgroundIDBVersionChangeTransactionConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            actor = AllocPBackgroundIDBVersionChangeTransactionChild(currentVersion, requestedVersion, nextObjectStoreId, nextIndexId);
            if ((!(actor))) {
                NS_WARNING("Error constructing actor PBackgroundIDBVersionChangeTransactionChild");
                return MsgValueError;
            }
            (actor)->SetId(RegisterID(actor, (handle__).mId));
            (actor)->SetManager(this);
            (actor)->SetIPCChannel(GetIPCChannel());
            (mManagedPBackgroundIDBVersionChangeTransactionChild).PutEntry(actor);
            (actor)->mState = mozilla::dom::indexedDB::PBackgroundIDBVersionChangeTransaction::__Start;

            if ((!(RecvPBackgroundIDBVersionChangeTransactionConstructor(mozilla::Move(actor), mozilla::Move(currentVersion), mozilla::Move(requestedVersion), mozilla::Move(nextObjectStoreId), mozilla::Move(nextIndexId))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PBackgroundIDBDatabase::Msg_PBackgroundMutableFileConstructor__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBDatabaseChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBDatabaseChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBDatabase", "Msg_PBackgroundMutableFileConstructor", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            ActorHandle handle__;
            PBackgroundMutableFileChild* actor;
            nsString name;
            nsString type;

            if ((!(Read((&(handle__)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 875202478)))) {
                FatalError("Error deserializing 'ActorHandle'");
                return MsgValueError;
            }
            if ((!(Read((&(name)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'name'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 15034981)))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(Read((&(type)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'type'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2982068540)))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PBackgroundIDBDatabase::Transition(Trigger(Trigger::Send, PBackgroundIDBDatabase::Msg_PBackgroundMutableFileConstructor__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            actor = AllocPBackgroundMutableFileChild(name, type);
            if ((!(actor))) {
                NS_WARNING("Error constructing actor PBackgroundMutableFileChild");
                return MsgValueError;
            }
            (actor)->SetId(RegisterID(actor, (handle__).mId));
            (actor)->SetManager(this);
            (actor)->SetIPCChannel(GetIPCChannel());
            (mManagedPBackgroundMutableFileChild).PutEntry(actor);
            (actor)->mState = mozilla::dom::PBackgroundMutableFile::__Start;

            if ((!(RecvPBackgroundMutableFileConstructor(mozilla::Move(actor), mozilla::Move(name), mozilla::Move(type))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PBackgroundIDBDatabaseChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBDatabaseChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundIDBDatabaseChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBDatabaseChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundIDBDatabaseChild::GetProtocolTypeId() -> int32_t
{
    return PBackgroundIDBDatabaseMsgStart;
}

auto PBackgroundIDBDatabaseChild::ProtocolName() const -> const char*
{
    return "PBackgroundIDBDatabaseChild";
}

auto PBackgroundIDBDatabaseChild::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PBackgroundIDBDatabaseFile kids
        nsTArray<PBackgroundIDBDatabaseFileChild*> kids;
        // Accumulate kids into a stable structure to iterate over
        ManagedPBackgroundIDBDatabaseFileChild(kids);
        for (auto& kid : kids) {
            // Guarding against a child removing a sibling from the list during the iteration.
            if ((mManagedPBackgroundIDBDatabaseFileChild).Contains(kid)) {
                (kid)->DestroySubtree(subtreewhy);
            }
        }
    }
    {
        // Recursively shutting down PBackgroundIDBDatabaseRequest kids
        nsTArray<PBackgroundIDBDatabaseRequestChild*> kids;
        // Accumulate kids into a stable structure to iterate over
        ManagedPBackgroundIDBDatabaseRequestChild(kids);
        for (auto& kid : kids) {
            // Guarding against a child removing a sibling from the list during the iteration.
            if ((mManagedPBackgroundIDBDatabaseRequestChild).Contains(kid)) {
                (kid)->DestroySubtree(subtreewhy);
            }
        }
    }
    {
        // Recursively shutting down PBackgroundIDBTransaction kids
        nsTArray<PBackgroundIDBTransactionChild*> kids;
        // Accumulate kids into a stable structure to iterate over
        ManagedPBackgroundIDBTransactionChild(kids);
        for (auto& kid : kids) {
            // Guarding against a child removing a sibling from the list during the iteration.
            if ((mManagedPBackgroundIDBTransactionChild).Contains(kid)) {
                (kid)->DestroySubtree(subtreewhy);
            }
        }
    }
    {
        // Recursively shutting down PBackgroundIDBVersionChangeTransaction kids
        nsTArray<PBackgroundIDBVersionChangeTransactionChild*> kids;
        // Accumulate kids into a stable structure to iterate over
        ManagedPBackgroundIDBVersionChangeTransactionChild(kids);
        for (auto& kid : kids) {
            // Guarding against a child removing a sibling from the list during the iteration.
            if ((mManagedPBackgroundIDBVersionChangeTransactionChild).Contains(kid)) {
                (kid)->DestroySubtree(subtreewhy);
            }
        }
    }
    {
        // Recursively shutting down PBackgroundMutableFile kids
        nsTArray<PBackgroundMutableFileChild*> kids;
        // Accumulate kids into a stable structure to iterate over
        ManagedPBackgroundMutableFileChild(kids);
        for (auto& kid : kids) {
            // Guarding against a child removing a sibling from the list during the iteration.
            if ((mManagedPBackgroundMutableFileChild).Contains(kid)) {
                (kid)->DestroySubtree(subtreewhy);
            }
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PBackgroundIDBDatabaseChild::DeallocSubtree() -> void
{
    {
        // Recursively deleting PBackgroundIDBDatabaseFile kids
        for (auto iter = (mManagedPBackgroundIDBDatabaseFileChild).Iter(); (!((iter).Done())); (iter).Next()) {
            (((iter).Get())->GetKey())->DeallocSubtree();
        }

        for (auto iter = (mManagedPBackgroundIDBDatabaseFileChild).Iter(); (!((iter).Done())); (iter).Next()) {
            DeallocPBackgroundIDBDatabaseFileChild(((iter).Get())->GetKey());
        }
        (mManagedPBackgroundIDBDatabaseFileChild).Clear();
    }
    {
        // Recursively deleting PBackgroundIDBDatabaseRequest kids
        for (auto iter = (mManagedPBackgroundIDBDatabaseRequestChild).Iter(); (!((iter).Done())); (iter).Next()) {
            (((iter).Get())->GetKey())->DeallocSubtree();
        }

        for (auto iter = (mManagedPBackgroundIDBDatabaseRequestChild).Iter(); (!((iter).Done())); (iter).Next()) {
            DeallocPBackgroundIDBDatabaseRequestChild(((iter).Get())->GetKey());
        }
        (mManagedPBackgroundIDBDatabaseRequestChild).Clear();
    }
    {
        // Recursively deleting PBackgroundIDBTransaction kids
        for (auto iter = (mManagedPBackgroundIDBTransactionChild).Iter(); (!((iter).Done())); (iter).Next()) {
            (((iter).Get())->GetKey())->DeallocSubtree();
        }

        for (auto iter = (mManagedPBackgroundIDBTransactionChild).Iter(); (!((iter).Done())); (iter).Next()) {
            DeallocPBackgroundIDBTransactionChild(((iter).Get())->GetKey());
        }
        (mManagedPBackgroundIDBTransactionChild).Clear();
    }
    {
        // Recursively deleting PBackgroundIDBVersionChangeTransaction kids
        for (auto iter = (mManagedPBackgroundIDBVersionChangeTransactionChild).Iter(); (!((iter).Done())); (iter).Next()) {
            (((iter).Get())->GetKey())->DeallocSubtree();
        }

        for (auto iter = (mManagedPBackgroundIDBVersionChangeTransactionChild).Iter(); (!((iter).Done())); (iter).Next()) {
            DeallocPBackgroundIDBVersionChangeTransactionChild(((iter).Get())->GetKey());
        }
        (mManagedPBackgroundIDBVersionChangeTransactionChild).Clear();
    }
    {
        // Recursively deleting PBackgroundMutableFile kids
        for (auto iter = (mManagedPBackgroundMutableFileChild).Iter(); (!((iter).Done())); (iter).Next()) {
            (((iter).Get())->GetKey())->DeallocSubtree();
        }

        for (auto iter = (mManagedPBackgroundMutableFileChild).Iter(); (!((iter).Done())); (iter).Next()) {
            DeallocPBackgroundMutableFileChild(((iter).Get())->GetKey());
        }
        (mManagedPBackgroundMutableFileChild).Clear();
    }
}

auto PBackgroundIDBDatabaseChild::Write(
        const PBackgroundIDBTransactionChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBDatabaseChild::Read(
        PBackgroundIDBTransactionChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBTransaction", PBackgroundIDBTransactionMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBTransactionChild*>((actor).value());
    return true;
}

auto PBackgroundIDBDatabaseChild::Write(
        const CreateFileParams& v__,
        Message* msg__) -> void
{
    Write((v__).name(), msg__);
    // Sentinel = 'name'
    (msg__)->WriteSentinel(15034981);
    Write((v__).type(), msg__);
    // Sentinel = 'type'
    (msg__)->WriteSentinel(2982068540);
}

auto PBackgroundIDBDatabaseChild::Read(
        CreateFileParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->name())), msg__, iter__)))) {
        FatalError("Error deserializing 'name' (nsString) member of 'CreateFileParams'");
        return false;
    }
    // Sentinel = 'name'
    if ((!((msg__)->ReadSentinel(iter__, 15034981)))) {
        FatalError("Error deserializing 'name' (nsString) member of 'CreateFileParams'");
        return false;
    }
    if ((!(Read((&((v__)->type())), msg__, iter__)))) {
        FatalError("Error deserializing 'type' (nsString) member of 'CreateFileParams'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((msg__)->ReadSentinel(iter__, 2982068540)))) {
        FatalError("Error deserializing 'type' (nsString) member of 'CreateFileParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBDatabaseChild::Write(
        const PBackgroundMutableFileChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBDatabaseChild::Read(
        PBackgroundMutableFileChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundMutableFile", PBackgroundMutableFileMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundMutableFileChild*>((actor).value());
    return true;
}

auto PBackgroundIDBDatabaseChild::Write(
        const NullableVersion& v__,
        Message* msg__) -> void
{
    typedef NullableVersion type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'NullableVersion'
    (msg__)->WriteSentinel(2984191162);

    switch ((v__).type()) {
    case type__::Tnull_t:
        {
            Write((v__).get_null_t(), msg__);
            // Sentinel = 'Tnull_t'
            (msg__)->WriteSentinel(3731137201);
            return;
        }
    case type__::Tuint64_t:
        {
            Write((v__).get_uint64_t(), msg__);
            // Sentinel = 'Tuint64_t'
            (msg__)->WriteSentinel(1935076742);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PBackgroundIDBDatabaseChild::Read(
        NullableVersion* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef NullableVersion type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("NullableVersion");
        return false;
    }
    // Sentinel = 'NullableVersion'
    if ((!((msg__)->ReadSentinel(iter__, 2984191162)))) {
        mozilla::ipc::UnionTypeReadError("NullableVersion");
        return false;
    }

    switch (type) {
    case type__::Tnull_t:
        {
            null_t tmp = null_t();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_null_t())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tnull_t'
            if ((!((msg__)->ReadSentinel(iter__, 3731137201)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::Tuint64_t:
        {
            uint64_t tmp = uint64_t();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_uint64_t())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tuint64_t'
            if ((!((msg__)->ReadSentinel(iter__, 1935076742)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PBackgroundIDBDatabaseChild::Write(
        const PBackgroundIDBDatabaseFileChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBDatabaseChild::Read(
        PBackgroundIDBDatabaseFileChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBDatabaseFile", PBackgroundIDBDatabaseFileMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBDatabaseFileChild*>((actor).value());
    return true;
}

auto PBackgroundIDBDatabaseChild::Write(
        const PBackgroundIDBDatabaseChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBDatabaseChild::Read(
        PBackgroundIDBDatabaseChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBDatabase", PBackgroundIDBDatabaseMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBDatabaseChild*>((actor).value());
    return true;
}

auto PBackgroundIDBDatabaseChild::Write(
        const DatabaseRequestParams& v__,
        Message* msg__) -> void
{
    typedef DatabaseRequestParams type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'DatabaseRequestParams'
    (msg__)->WriteSentinel(564842685);

    switch ((v__).type()) {
    case type__::TCreateFileParams:
        {
            Write((v__).get_CreateFileParams(), msg__);
            // Sentinel = 'TCreateFileParams'
            (msg__)->WriteSentinel(1651067885);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PBackgroundIDBDatabaseChild::Read(
        DatabaseRequestParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef DatabaseRequestParams type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("DatabaseRequestParams");
        return false;
    }
    // Sentinel = 'DatabaseRequestParams'
    if ((!((msg__)->ReadSentinel(iter__, 564842685)))) {
        mozilla::ipc::UnionTypeReadError("DatabaseRequestParams");
        return false;
    }

    switch (type) {
    case type__::TCreateFileParams:
        {
            CreateFileParams tmp = CreateFileParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_CreateFileParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TCreateFileParams'
            if ((!((msg__)->ReadSentinel(iter__, 1651067885)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PBackgroundIDBDatabaseChild::Write(
        const PBlobChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBDatabaseChild::Read(
        PBlobChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBlob", PBlobMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBlobChild*>((actor).value());
    return true;
}

auto PBackgroundIDBDatabaseChild::Write(
        const PBackgroundIDBDatabaseRequestChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBDatabaseChild::Read(
        PBackgroundIDBDatabaseRequestChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBDatabaseRequest", PBackgroundIDBDatabaseRequestMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBDatabaseRequestChild*>((actor).value());
    return true;
}

auto PBackgroundIDBDatabaseChild::Write(
        const PBackgroundIDBVersionChangeTransactionChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBDatabaseChild::Read(
        PBackgroundIDBVersionChangeTransactionChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBVersionChangeTransaction", PBackgroundIDBVersionChangeTransactionMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBVersionChangeTransactionChild*>((actor).value());
    return true;
}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
