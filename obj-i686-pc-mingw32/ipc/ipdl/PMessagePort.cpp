//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PMessagePort.h"

namespace mozilla {
namespace dom {
namespace PMessagePort {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PMessagePortParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PMessagePortChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(mozilla::ipc::PrivateIPDLInterface(), aParentDestPid, aChildDestPid, PMessagePortMsgStart, PMessagePortMsgStartChild, aParent, aChild);
}
bool
Transition(
        mozilla::ipc::Trigger trigger,
        State* next)
{
    State from = (*(next));
    switch (from) {
    case __Null:
    case __Error:
        if ((Msg___delete____ID) == ((trigger).mMessage)) {
            (*(next)) = __Dead;
            return true;
        }
        return (__Null) == (from);
    case __Dead:
        mozilla::ipc::LogicError("__delete__()d actor");
        return false;
    case __Dying:
        mozilla::ipc::LogicError("__delete__()d (and unexpectedly dying) actor");
        return false;
    default:
        mozilla::ipc::LogicError("corrupted actor state");
        return false;
    }
}
IPC::Message*
Msg_PostMessages(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_PostMessages__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PMessagePort::Msg_PostMessages");
}
IPC::Message*
Msg_Disentangle(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_Disentangle__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PMessagePort::Msg_Disentangle");
}
IPC::Message*
Msg_StopSendingData(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_StopSendingData__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PMessagePort::Msg_StopSendingData");
}
IPC::Message*
Msg_Close(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_Close__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PMessagePort::Msg_Close");
}
IPC::Message*
Msg_Entangled(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_Entangled__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PMessagePort::Msg_Entangled");
}
IPC::Message*
Msg_ReceiveData(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_ReceiveData__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PMessagePort::Msg_ReceiveData");
}
IPC::Message*
Msg_StopSendingDataConfirmed(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_StopSendingDataConfirmed__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PMessagePort::Msg_StopSendingDataConfirmed");
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return new IPC::Message(routingId, Msg___delete____ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PMessagePort::Msg___delete__");
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return new IPC::Message(routingId, Reply___delete____ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PMessagePort::Reply___delete__");
}

} // namespace PMessagePort
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct MessagePortMessage|
//
namespace mozilla {
namespace dom {
MOZ_IMPLICIT MessagePortMessage::MessagePortMessage() :
    data_()
{
    Init();
}

MessagePortMessage::~MessagePortMessage()
{
}

auto MessagePortMessage::operator==(const MessagePortMessage& _o) const -> bool
{
    if ((!((data()) == ((_o).data())))) {
        return false;
    }
    if ((!((blobsParent()) == ((_o).blobsParent())))) {
        return false;
    }
    if ((!((blobsChild()) == ((_o).blobsChild())))) {
        return false;
    }
    if ((!((transferredPorts()) == ((_o).transferredPorts())))) {
        return false;
    }
    return true;
}

auto MessagePortMessage::Init() -> void
{
}

auto MessagePortMessage::Assign(
        const SerializedStructuredCloneBuffer& _data,
        const nsTArray<PBlobParent*>& _blobsParent,
        const nsTArray<PBlobChild*>& _blobsChild,
        const nsTArray<MessagePortIdentifier>& _transferredPorts) -> void
{
    data_ = _data;
    blobsParent_ = _blobsParent;
    blobsChild_ = _blobsChild;
    transferredPorts_ = _transferredPorts;
}

} // namespace dom
} // namespace mozilla
