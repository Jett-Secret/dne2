//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PChannelDiverterParent_h
#define PChannelDiverterParent_h

#include "mozilla/net/PChannelDiverter.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

namespace mozilla {
namespace net {
class PFTPChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PFTPChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PHttpChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpChannelChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PNeckoChild;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace psm {
class PPSMContentDownloaderParent;
} // namespace psm
} // namespace mozilla

namespace mozilla {
namespace dom {
class PExternalHelperAppParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace net {
class PNeckoParent;
} // namespace net
} // namespace mozilla

namespace mozilla {
namespace net {


class PChannelDiverterParent :
    public mozilla::ipc::IProtocol
{
    friend class mozilla::psm::PPSMContentDownloaderParent;

    friend class mozilla::dom::PExternalHelperAppParent;

    friend class mozilla::net::PNeckoParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::net::PFTPChannelParent PFTPChannelParent;
    typedef mozilla::net::PFTPChannelChild PFTPChannelChild;
    typedef mozilla::net::PHttpChannelParent PHttpChannelParent;
    typedef mozilla::net::PHttpChannelChild PHttpChannelChild;
    typedef mozilla::net::PNeckoParent PNeckoParent;
    typedef mozilla::net::PNeckoChild PNeckoChild;

    typedef PChannelDiverter::State State;


    virtual void
    ActorDestroy(ActorDestroyReason aWhy) = 0;

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PChannelDiverterParent();

    virtual ~PChannelDiverterParent();

    PNeckoParent*
    Manager() const;

    PChannelDiverter::State
    state();

    MOZ_MUST_USE static bool
    Send__delete__(PChannelDiverterParent* actor);

    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const PChannelDiverterParent* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PChannelDiverterParent** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    State mState;
};


} // namespace net
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace net {
class ChannelDiverterParent :
    public PChannelDiverterParent
{
    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

    MOZ_IMPLICIT ChannelDiverterParent();
    virtual ~ChannelDiverterParent();
};
} // namespace net
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace net {
void
ChannelDiverterParent::ActorDestroy(ActorDestroyReason aWhy)
{
}

MOZ_IMPLICIT ChannelDiverterParent::ChannelDiverterParent()
{
    MOZ_COUNT_CTOR(ChannelDiverterParent);
}

MOZ_IMPLICIT ChannelDiverterParent::~ChannelDiverterParent()
{
    MOZ_COUNT_DTOR(ChannelDiverterParent);
}

} // namespace net
} // namespace mozilla
#endif // if 0

#endif // ifndef PChannelDiverterParent_h
