//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHttpChannel_h
#define PHttpChannel_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "mozilla/RefPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "nsTHashtable.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/ipc/InputStreamParams.h"
#include "mozilla/ipc/URIParams.h"
#include "mozilla/ipc/PBackgroundSharedTypes.h"
#include "mozilla/net/NeckoChannelParams.h"

namespace mozilla {
namespace net {
class PHttpChannelParent;
} // namespace net
} // namespace mozilla
namespace mozilla {
namespace net {
class PHttpChannelChild;
} // namespace net
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PHttpChannelChild and PHttpChannelParent
//
namespace mozilla {
namespace net {
namespace PHttpChannel {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::net::PHttpChannelParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::net::PHttpChannelChild>* aChild);

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PHttpChannelStart = PHttpChannelMsgStart << 16,
    Msg_SetPriority__ID,
    Msg_SetClassOfService__ID,
    Msg_SetCacheTokenCachedCharset__ID,
    Msg_UpdateAssociatedContentSecurity__ID,
    Msg_Suspend__ID,
    Msg_Resume__ID,
    Msg_Cancel__ID,
    Msg_Redirect2Verify__ID,
    Msg_DocumentChannelCleanup__ID,
    Msg_MarkOfflineCacheEntryAsForeign__ID,
    Msg_DivertOnDataAvailable__ID,
    Msg_DivertOnStopRequest__ID,
    Msg_DivertComplete__ID,
    Msg_RemoveCorsPreflightCacheEntry__ID,
    Msg_DeletingChannel__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_OnStartRequest__ID,
    Msg_OnTransportAndData__ID,
    Msg_OnStopRequest__ID,
    Msg_OnProgress__ID,
    Msg_OnStatus__ID,
    Msg_FailedAsyncOpen__ID,
    Msg_Redirect1Begin__ID,
    Msg_Redirect3Complete__ID,
    Msg_AssociateApplicationCache__ID,
    Msg_NotifyTrackingProtectionDisabled__ID,
    Msg_FlushedForDiversion__ID,
    Msg_DivertMessages__ID,
    Msg_ReportSecurityMessage__ID,
    Msg_DeleteSelf__ID,
    Msg_IssueDeprecationWarning__ID,
    Msg_FinishInterceptedRedirect__ID,
    PHttpChannelEnd
};

bool
Transition(
        mozilla::ipc::Trigger trigger,
        State* next);

IPC::Message*
Msg_SetPriority(int32_t routingId);

IPC::Message*
Msg_SetClassOfService(int32_t routingId);

IPC::Message*
Msg_SetCacheTokenCachedCharset(int32_t routingId);

IPC::Message*
Msg_UpdateAssociatedContentSecurity(int32_t routingId);

IPC::Message*
Msg_Suspend(int32_t routingId);

IPC::Message*
Msg_Resume(int32_t routingId);

IPC::Message*
Msg_Cancel(int32_t routingId);

IPC::Message*
Msg_Redirect2Verify(int32_t routingId);

IPC::Message*
Msg_DocumentChannelCleanup(int32_t routingId);

IPC::Message*
Msg_MarkOfflineCacheEntryAsForeign(int32_t routingId);

IPC::Message*
Msg_DivertOnDataAvailable(int32_t routingId);

IPC::Message*
Msg_DivertOnStopRequest(int32_t routingId);

IPC::Message*
Msg_DivertComplete(int32_t routingId);

IPC::Message*
Msg_RemoveCorsPreflightCacheEntry(int32_t routingId);

IPC::Message*
Msg_DeletingChannel(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_OnStartRequest(int32_t routingId);

IPC::Message*
Msg_OnTransportAndData(int32_t routingId);

IPC::Message*
Msg_OnStopRequest(int32_t routingId);

IPC::Message*
Msg_OnProgress(int32_t routingId);

IPC::Message*
Msg_OnStatus(int32_t routingId);

IPC::Message*
Msg_FailedAsyncOpen(int32_t routingId);

IPC::Message*
Msg_Redirect1Begin(int32_t routingId);

IPC::Message*
Msg_Redirect3Complete(int32_t routingId);

IPC::Message*
Msg_AssociateApplicationCache(int32_t routingId);

IPC::Message*
Msg_NotifyTrackingProtectionDisabled(int32_t routingId);

IPC::Message*
Msg_FlushedForDiversion(int32_t routingId);

IPC::Message*
Msg_DivertMessages(int32_t routingId);

IPC::Message*
Msg_ReportSecurityMessage(int32_t routingId);

IPC::Message*
Msg_DeleteSelf(int32_t routingId);

IPC::Message*
Msg_IssueDeprecationWarning(int32_t routingId);

IPC::Message*
Msg_FinishInterceptedRedirect(int32_t routingId);



} // namespace PHttpChannel
} // namespace net
} // namespace mozilla

#endif // ifndef PHttpChannel_h
