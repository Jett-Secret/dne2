//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PWebrtcGlobalParent_h
#define PWebrtcGlobalParent_h

#include "mozilla/dom/PWebrtcGlobal.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

// Headers for things that cannot be forward declared
#include "mozilla/media/webrtc/WebrtcGlobal.h"

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
struct RTCStatsReportInternal;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PWebrtcGlobalParent :
    public mozilla::ipc::IProtocol
{
    friend class mozilla::dom::PContentParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::dom::RTCStatsReportInternal RTCStatsReportInternal;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;

    typedef PWebrtcGlobal::State State;

    virtual bool
    RecvGetStatsResult(
            const int& aRequestId,
            nsTArray<RTCStatsReportInternal>&& aStats) = 0;
    virtual bool
    RecvGetLogResult(
            const int& aRequestId,
            const WebrtcGlobalLog& aLog) = 0;
    virtual bool
    Recv__delete__();

    virtual void
    ActorDestroy(ActorDestroyReason aWhy) = 0;

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PWebrtcGlobalParent();

    virtual ~PWebrtcGlobalParent();

    PContentParent*
    Manager() const;

    PWebrtcGlobal::State
    state();

    MOZ_MUST_USE bool
    SendGetStatsRequest(
            const int& aRequestId,
            const nsString& aPcIdFilter);

    MOZ_MUST_USE bool
    SendClearStatsRequest();

    MOZ_MUST_USE bool
    SendGetLogRequest(
            const int& aRequestId,
            const nsCString& aPattern);

    MOZ_MUST_USE bool
    SendClearLogRequest();

    MOZ_MUST_USE bool
    SendSetAecLogging(const bool& aEnable);

    MOZ_MUST_USE bool
    SendSetDebugMode(const int& aLevel);

    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const PWebrtcGlobalParent* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PWebrtcGlobalParent** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    State mState;
};


} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
class WebrtcGlobalParent :
    public PWebrtcGlobalParent
{
    virtual bool
    RecvGetStatsResult(
            const int& aRequestId,
            nsTArray<RTCStatsReportInternal>&& aStats);

    virtual bool
    RecvGetLogResult(
            const int& aRequestId,
            const WebrtcGlobalLog& aLog);

    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

    MOZ_IMPLICIT WebrtcGlobalParent();
    virtual ~WebrtcGlobalParent();
};
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
bool
WebrtcGlobalParent::RecvGetStatsResult(
        const int& aRequestId,
        nsTArray<RTCStatsReportInternal>&& aStats)
{
    return false;
}

bool
WebrtcGlobalParent::RecvGetLogResult(
        const int& aRequestId,
        const WebrtcGlobalLog& aLog)
{
    return false;
}

void
WebrtcGlobalParent::ActorDestroy(ActorDestroyReason aWhy)
{
}

MOZ_IMPLICIT WebrtcGlobalParent::WebrtcGlobalParent()
{
    MOZ_COUNT_CTOR(WebrtcGlobalParent);
}

MOZ_IMPLICIT WebrtcGlobalParent::~WebrtcGlobalParent()
{
    MOZ_COUNT_DTOR(WebrtcGlobalParent);
}

} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PWebrtcGlobalParent_h
