//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef GamepadEventTypes_h
#define GamepadEventTypes_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "mozilla/RefPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "nsTHashtable.h"
#include "mozilla/OperatorNewExtensions.h"

// Headers for typedefs
#include "mozilla/dom/GamepadMessageUtils.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GamepadAdded|
//
namespace mozilla {
namespace dom {
class GamepadAdded final
{
private:
    typedef mozilla::dom::GamepadServiceType GamepadServiceType;

public:
    MOZ_IMPLICIT GamepadAdded();

    MOZ_IMPLICIT GamepadAdded(
            const nsString& _id,
            const uint32_t& _index,
            const uint32_t& _mapping,
            const GamepadServiceType& _service_type,
            const uint32_t& _num_buttons,
            const uint32_t& _num_axes)
    {
        Init();
        Assign(_id, _index, _mapping, _service_type, _num_buttons, _num_axes);
    }

    MOZ_IMPLICIT GamepadAdded(const GamepadAdded& _o)
    {
        Init();
        Assign((_o).id(), (_o).index(), (_o).mapping(), (_o).service_type(), (_o).num_buttons(), (_o).num_axes());
    }

    ~GamepadAdded();

    void
    operator=(const GamepadAdded& _o)
    {
        Assign((_o).id(), (_o).index(), (_o).mapping(), (_o).service_type(), (_o).num_buttons(), (_o).num_axes());
    }

    bool
    operator==(const GamepadAdded& _o) const;

    nsString&
    id()
    {
        return id_;
    }
    const nsString&
    id() const
    {
        return id_;
    }

    uint32_t&
    index()
    {
        return index_;
    }
    const uint32_t&
    index() const
    {
        return index_;
    }

    uint32_t&
    mapping()
    {
        return mapping_;
    }
    const uint32_t&
    mapping() const
    {
        return mapping_;
    }

    GamepadServiceType&
    service_type()
    {
        return service_type_;
    }
    const GamepadServiceType&
    service_type() const
    {
        return service_type_;
    }

    uint32_t&
    num_buttons()
    {
        return num_buttons_;
    }
    const uint32_t&
    num_buttons() const
    {
        return num_buttons_;
    }

    uint32_t&
    num_axes()
    {
        return num_axes_;
    }
    const uint32_t&
    num_axes() const
    {
        return num_axes_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsString& _id,
            const uint32_t& _index,
            const uint32_t& _mapping,
            const GamepadServiceType& _service_type,
            const uint32_t& _num_buttons,
            const uint32_t& _num_axes);

    nsString id_;
    uint32_t index_;
    uint32_t mapping_;
    GamepadServiceType service_type_;
    uint32_t num_buttons_;
    uint32_t num_axes_;
};
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GamepadRemoved|
//
namespace mozilla {
namespace dom {
class GamepadRemoved final
{
private:
    typedef mozilla::dom::GamepadServiceType GamepadServiceType;

public:
    MOZ_IMPLICIT GamepadRemoved();

    MOZ_IMPLICIT GamepadRemoved(
            const uint32_t& _index,
            const GamepadServiceType& _service_type)
    {
        Init();
        Assign(_index, _service_type);
    }

    MOZ_IMPLICIT GamepadRemoved(const GamepadRemoved& _o)
    {
        Init();
        Assign((_o).index(), (_o).service_type());
    }

    ~GamepadRemoved();

    void
    operator=(const GamepadRemoved& _o)
    {
        Assign((_o).index(), (_o).service_type());
    }

    bool
    operator==(const GamepadRemoved& _o) const;

    uint32_t&
    index()
    {
        return index_;
    }
    const uint32_t&
    index() const
    {
        return index_;
    }

    GamepadServiceType&
    service_type()
    {
        return service_type_;
    }
    const GamepadServiceType&
    service_type() const
    {
        return service_type_;
    }

private:
    void
    Init();

    void
    Assign(
            const uint32_t& _index,
            const GamepadServiceType& _service_type);

    uint32_t index_;
    GamepadServiceType service_type_;
};
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GamepadAxisInformation|
//
namespace mozilla {
namespace dom {
class GamepadAxisInformation final
{
private:
    typedef mozilla::dom::GamepadServiceType GamepadServiceType;

public:
    MOZ_IMPLICIT GamepadAxisInformation();

    MOZ_IMPLICIT GamepadAxisInformation(
            const uint32_t& _index,
            const GamepadServiceType& _service_type,
            const uint32_t& _axis,
            const double& _value)
    {
        Init();
        Assign(_index, _service_type, _axis, _value);
    }

    MOZ_IMPLICIT GamepadAxisInformation(const GamepadAxisInformation& _o)
    {
        Init();
        Assign((_o).index(), (_o).service_type(), (_o).axis(), (_o).value());
    }

    ~GamepadAxisInformation();

    void
    operator=(const GamepadAxisInformation& _o)
    {
        Assign((_o).index(), (_o).service_type(), (_o).axis(), (_o).value());
    }

    bool
    operator==(const GamepadAxisInformation& _o) const;

    uint32_t&
    index()
    {
        return index_;
    }
    const uint32_t&
    index() const
    {
        return index_;
    }

    GamepadServiceType&
    service_type()
    {
        return service_type_;
    }
    const GamepadServiceType&
    service_type() const
    {
        return service_type_;
    }

    uint32_t&
    axis()
    {
        return axis_;
    }
    const uint32_t&
    axis() const
    {
        return axis_;
    }

    double&
    value()
    {
        return value_;
    }
    const double&
    value() const
    {
        return value_;
    }

private:
    void
    Init();

    void
    Assign(
            const uint32_t& _index,
            const GamepadServiceType& _service_type,
            const uint32_t& _axis,
            const double& _value);

    uint32_t index_;
    GamepadServiceType service_type_;
    uint32_t axis_;
    double value_;
};
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GamepadButtonInformation|
//
namespace mozilla {
namespace dom {
class GamepadButtonInformation final
{
private:
    typedef mozilla::dom::GamepadServiceType GamepadServiceType;

public:
    MOZ_IMPLICIT GamepadButtonInformation();

    MOZ_IMPLICIT GamepadButtonInformation(
            const uint32_t& _index,
            const GamepadServiceType& _service_type,
            const uint32_t& _button,
            const bool& _pressed,
            const double& _value)
    {
        Init();
        Assign(_index, _service_type, _button, _pressed, _value);
    }

    MOZ_IMPLICIT GamepadButtonInformation(const GamepadButtonInformation& _o)
    {
        Init();
        Assign((_o).index(), (_o).service_type(), (_o).button(), (_o).pressed(), (_o).value());
    }

    ~GamepadButtonInformation();

    void
    operator=(const GamepadButtonInformation& _o)
    {
        Assign((_o).index(), (_o).service_type(), (_o).button(), (_o).pressed(), (_o).value());
    }

    bool
    operator==(const GamepadButtonInformation& _o) const;

    uint32_t&
    index()
    {
        return index_;
    }
    const uint32_t&
    index() const
    {
        return index_;
    }

    GamepadServiceType&
    service_type()
    {
        return service_type_;
    }
    const GamepadServiceType&
    service_type() const
    {
        return service_type_;
    }

    uint32_t&
    button()
    {
        return button_;
    }
    const uint32_t&
    button() const
    {
        return button_;
    }

    bool&
    pressed()
    {
        return pressed_;
    }
    const bool&
    pressed() const
    {
        return pressed_;
    }

    double&
    value()
    {
        return value_;
    }
    const double&
    value() const
    {
        return value_;
    }

private:
    void
    Init();

    void
    Assign(
            const uint32_t& _index,
            const GamepadServiceType& _service_type,
            const uint32_t& _button,
            const bool& _pressed,
            const double& _value);

    uint32_t index_;
    GamepadServiceType service_type_;
    uint32_t button_;
    bool pressed_;
    double value_;
};
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct GamepadPoseInformation|
//
namespace mozilla {
namespace dom {
class GamepadPoseInformation final
{
private:
    typedef mozilla::dom::GamepadServiceType GamepadServiceType;
    typedef mozilla::dom::GamepadPoseState GamepadPoseState;

public:
    MOZ_IMPLICIT GamepadPoseInformation();

    MOZ_IMPLICIT GamepadPoseInformation(
            const uint32_t& _index,
            const GamepadServiceType& _service_type,
            const GamepadPoseState& _pose_state)
    {
        Init();
        Assign(_index, _service_type, _pose_state);
    }

    MOZ_IMPLICIT GamepadPoseInformation(const GamepadPoseInformation& _o)
    {
        Init();
        Assign((_o).index(), (_o).service_type(), (_o).pose_state());
    }

    ~GamepadPoseInformation();

    void
    operator=(const GamepadPoseInformation& _o)
    {
        Assign((_o).index(), (_o).service_type(), (_o).pose_state());
    }

    bool
    operator==(const GamepadPoseInformation& _o) const;

    uint32_t&
    index()
    {
        return index_;
    }
    const uint32_t&
    index() const
    {
        return index_;
    }

    GamepadServiceType&
    service_type()
    {
        return service_type_;
    }
    const GamepadServiceType&
    service_type() const
    {
        return service_type_;
    }

    GamepadPoseState&
    pose_state()
    {
        return pose_state_;
    }
    const GamepadPoseState&
    pose_state() const
    {
        return pose_state_;
    }

private:
    void
    Init();

    void
    Assign(
            const uint32_t& _index,
            const GamepadServiceType& _service_type,
            const GamepadPoseState& _pose_state);

    uint32_t index_;
    GamepadServiceType service_type_;
    GamepadPoseState pose_state_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class GamepadAdded;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class GamepadRemoved;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class GamepadAxisInformation;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class GamepadButtonInformation;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class GamepadPoseInformation;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union GamepadChangeEvent|
//
namespace mozilla {
namespace dom {
class GamepadChangeEvent final
{
public:
    enum Type {
        T__None,
        TGamepadAdded = 1,
        TGamepadRemoved,
        TGamepadAxisInformation,
        TGamepadButtonInformation,
        TGamepadPoseInformation,
        T__Last = TGamepadPoseInformation
    };

private:
    typedef mozilla::dom::GamepadAdded GamepadAdded;
    typedef mozilla::dom::GamepadRemoved GamepadRemoved;
    typedef mozilla::dom::GamepadAxisInformation GamepadAxisInformation;
    typedef mozilla::dom::GamepadButtonInformation GamepadButtonInformation;
    typedef mozilla::dom::GamepadPoseInformation GamepadPoseInformation;
    typedef GamepadAdded GamepadAdded__tdef;
    typedef GamepadRemoved GamepadRemoved__tdef;
    typedef GamepadAxisInformation GamepadAxisInformation__tdef;
    typedef GamepadButtonInformation GamepadButtonInformation__tdef;
    typedef GamepadPoseInformation GamepadPoseInformation__tdef;

    union Value {
        mozilla::AlignedStorage2<GamepadAdded> VGamepadAdded;
        mozilla::AlignedStorage2<GamepadRemoved> VGamepadRemoved;
        mozilla::AlignedStorage2<GamepadAxisInformation> VGamepadAxisInformation;
        mozilla::AlignedStorage2<GamepadButtonInformation> VGamepadButtonInformation;
        mozilla::AlignedStorage2<GamepadPoseInformation> VGamepadPoseInformation;
    };

    GamepadAdded*
    ptr_GamepadAdded()
    {
        return ((mValue).VGamepadAdded).addr();
    }
    const GamepadAdded*
    constptr_GamepadAdded() const
    {
        return ((mValue).VGamepadAdded).addr();
    }
    GamepadRemoved*
    ptr_GamepadRemoved()
    {
        return ((mValue).VGamepadRemoved).addr();
    }
    const GamepadRemoved*
    constptr_GamepadRemoved() const
    {
        return ((mValue).VGamepadRemoved).addr();
    }
    GamepadAxisInformation*
    ptr_GamepadAxisInformation()
    {
        return ((mValue).VGamepadAxisInformation).addr();
    }
    const GamepadAxisInformation*
    constptr_GamepadAxisInformation() const
    {
        return ((mValue).VGamepadAxisInformation).addr();
    }
    GamepadButtonInformation*
    ptr_GamepadButtonInformation()
    {
        return ((mValue).VGamepadButtonInformation).addr();
    }
    const GamepadButtonInformation*
    constptr_GamepadButtonInformation() const
    {
        return ((mValue).VGamepadButtonInformation).addr();
    }
    GamepadPoseInformation*
    ptr_GamepadPoseInformation()
    {
        return ((mValue).VGamepadPoseInformation).addr();
    }
    const GamepadPoseInformation*
    constptr_GamepadPoseInformation() const
    {
        return ((mValue).VGamepadPoseInformation).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT GamepadChangeEvent() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT GamepadChangeEvent(const GamepadAdded& aOther);

    MOZ_IMPLICIT GamepadChangeEvent(const GamepadRemoved& aOther);

    MOZ_IMPLICIT GamepadChangeEvent(const GamepadAxisInformation& aOther);

    MOZ_IMPLICIT GamepadChangeEvent(const GamepadButtonInformation& aOther);

    MOZ_IMPLICIT GamepadChangeEvent(const GamepadPoseInformation& aOther);

    MOZ_IMPLICIT GamepadChangeEvent(const GamepadChangeEvent& aOther);

    ~GamepadChangeEvent();

    Type
    type() const
    {
        return mType;
    }

    GamepadChangeEvent&
    operator=(const GamepadAdded& aRhs);

    GamepadChangeEvent&
    operator=(const GamepadRemoved& aRhs);

    GamepadChangeEvent&
    operator=(const GamepadAxisInformation& aRhs);

    GamepadChangeEvent&
    operator=(const GamepadButtonInformation& aRhs);

    GamepadChangeEvent&
    operator=(const GamepadPoseInformation& aRhs);

    GamepadChangeEvent&
    operator=(const GamepadChangeEvent& aRhs);

    bool
    operator==(const GamepadAdded& aRhs) const;

    bool
    operator==(const GamepadRemoved& aRhs) const;

    bool
    operator==(const GamepadAxisInformation& aRhs) const;

    bool
    operator==(const GamepadButtonInformation& aRhs) const;

    bool
    operator==(const GamepadPoseInformation& aRhs) const;

    bool
    operator==(const GamepadChangeEvent& aRhs) const;

    GamepadAdded&
    get_GamepadAdded()
    {
        AssertSanity(TGamepadAdded);
        return (*(ptr_GamepadAdded()));
    }
    const GamepadAdded&
    get_GamepadAdded() const
    {
        AssertSanity(TGamepadAdded);
        return (*(constptr_GamepadAdded()));
    }
    void
    get(GamepadAdded* aOutValue) const;
    operator GamepadAdded&()
    {
        return get_GamepadAdded();
    }
    operator const GamepadAdded&() const
    {
        return get_GamepadAdded();
    }

    GamepadRemoved&
    get_GamepadRemoved()
    {
        AssertSanity(TGamepadRemoved);
        return (*(ptr_GamepadRemoved()));
    }
    const GamepadRemoved&
    get_GamepadRemoved() const
    {
        AssertSanity(TGamepadRemoved);
        return (*(constptr_GamepadRemoved()));
    }
    void
    get(GamepadRemoved* aOutValue) const;
    operator GamepadRemoved&()
    {
        return get_GamepadRemoved();
    }
    operator const GamepadRemoved&() const
    {
        return get_GamepadRemoved();
    }

    GamepadAxisInformation&
    get_GamepadAxisInformation()
    {
        AssertSanity(TGamepadAxisInformation);
        return (*(ptr_GamepadAxisInformation()));
    }
    const GamepadAxisInformation&
    get_GamepadAxisInformation() const
    {
        AssertSanity(TGamepadAxisInformation);
        return (*(constptr_GamepadAxisInformation()));
    }
    void
    get(GamepadAxisInformation* aOutValue) const;
    operator GamepadAxisInformation&()
    {
        return get_GamepadAxisInformation();
    }
    operator const GamepadAxisInformation&() const
    {
        return get_GamepadAxisInformation();
    }

    GamepadButtonInformation&
    get_GamepadButtonInformation()
    {
        AssertSanity(TGamepadButtonInformation);
        return (*(ptr_GamepadButtonInformation()));
    }
    const GamepadButtonInformation&
    get_GamepadButtonInformation() const
    {
        AssertSanity(TGamepadButtonInformation);
        return (*(constptr_GamepadButtonInformation()));
    }
    void
    get(GamepadButtonInformation* aOutValue) const;
    operator GamepadButtonInformation&()
    {
        return get_GamepadButtonInformation();
    }
    operator const GamepadButtonInformation&() const
    {
        return get_GamepadButtonInformation();
    }

    GamepadPoseInformation&
    get_GamepadPoseInformation()
    {
        AssertSanity(TGamepadPoseInformation);
        return (*(ptr_GamepadPoseInformation()));
    }
    const GamepadPoseInformation&
    get_GamepadPoseInformation() const
    {
        AssertSanity(TGamepadPoseInformation);
        return (*(constptr_GamepadPoseInformation()));
    }
    void
    get(GamepadPoseInformation* aOutValue) const;
    operator GamepadPoseInformation&()
    {
        return get_GamepadPoseInformation();
    }
    operator const GamepadPoseInformation&() const
    {
        return get_GamepadPoseInformation();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

#endif // ifndef GamepadEventTypes_h
