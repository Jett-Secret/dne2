//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PFileSystemRequestChild_h
#define PFileSystemRequestChild_h

#include "mozilla/dom/PFileSystemRequest.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {


class PFileSystemRequestChild :
    public mozilla::ipc::IProtocol
{
    friend class mozilla::ipc::PBackgroundChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::FileSystemDirectoryListingResponse FileSystemDirectoryListingResponse;
    typedef mozilla::dom::FileSystemDirectoryListingResponseData FileSystemDirectoryListingResponseData;
    typedef mozilla::dom::FileSystemDirectoryListingResponseDirectory FileSystemDirectoryListingResponseDirectory;
    typedef mozilla::dom::FileSystemDirectoryListingResponseFile FileSystemDirectoryListingResponseFile;
    typedef mozilla::dom::FileSystemDirectoryResponse FileSystemDirectoryResponse;
    typedef mozilla::dom::FileSystemErrorResponse FileSystemErrorResponse;
    typedef mozilla::dom::FileSystemFileResponse FileSystemFileResponse;
    typedef mozilla::dom::FileSystemFilesResponse FileSystemFilesResponse;
    typedef mozilla::dom::FileSystemResponseValue FileSystemResponseValue;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::dom::PBlobChild PBlobChild;
    typedef mozilla::dom::PBlobParent PBlobParent;

    typedef PFileSystemRequest::State State;

    virtual bool
    Recv__delete__(const FileSystemResponseValue& response);

    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PFileSystemRequestChild();

    virtual ~PFileSystemRequestChild();

    PBackgroundChild*
    Manager() const;

    PFileSystemRequest::State
    state();

    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const FileSystemResponseValue& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileSystemResponseValue* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const nsTArray<FileSystemDirectoryListingResponseData>& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            nsTArray<FileSystemDirectoryListingResponseData>* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const FileSystemFilesResponse& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileSystemFilesResponse* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const FileSystemDirectoryListingResponseFile& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileSystemDirectoryListingResponseFile* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const FileSystemDirectoryListingResponse& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileSystemDirectoryListingResponse* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const FileSystemDirectoryListingResponseDirectory& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileSystemDirectoryListingResponseDirectory* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PFileSystemRequestChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PFileSystemRequestChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const FileSystemErrorResponse& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileSystemErrorResponse* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const FileSystemFileResponse& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileSystemFileResponse* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const nsTArray<FileSystemFileResponse>& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            nsTArray<FileSystemFileResponse>* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const FileSystemDirectoryResponse& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileSystemDirectoryResponse* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PBlobChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PBlobChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const FileSystemDirectoryListingResponseData& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileSystemDirectoryListingResponseData* v__,
            const Message* msg__,
            PickleIterator* iter__);

    State mState;
};


} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
class FileSystemRequestChild :
    public PFileSystemRequestChild
{
    MOZ_IMPLICIT FileSystemRequestChild();
    virtual ~FileSystemRequestChild();
};
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
MOZ_IMPLICIT FileSystemRequestChild::FileSystemRequestChild()
{
    MOZ_COUNT_CTOR(FileSystemRequestChild);
}

MOZ_IMPLICIT FileSystemRequestChild::~FileSystemRequestChild()
{
    MOZ_COUNT_DTOR(FileSystemRequestChild);
}

} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PFileSystemRequestChild_h
