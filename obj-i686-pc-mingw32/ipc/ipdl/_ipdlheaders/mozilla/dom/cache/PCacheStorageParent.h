//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCacheStorageParent_h
#define PCacheStorageParent_h

#include "mozilla/dom/cache/PCacheStorage.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheParent;
} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace cache {
class PCacheChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheOpParent;
} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace cache {
class PCacheOpChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheStreamControlParent;
} // namespace cache
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
namespace cache {
class PCacheStreamControlChild;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PFileDescriptorSetParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PFileDescriptorSetChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PSendStreamParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PSendStreamChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {
class PCacheOpParent;
} // namespace cache
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {
namespace cache {


class PCacheStorageParent :
    public mozilla::ipc::IProtocol
{
    friend class mozilla::dom::cache::PCacheOpParent;

    friend class mozilla::ipc::PBackgroundParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::ipc::BufferedInputStreamParams BufferedInputStreamParams;
    typedef mozilla::dom::cache::CacheDeleteArgs CacheDeleteArgs;
    typedef mozilla::dom::cache::CacheDeleteResult CacheDeleteResult;
    typedef mozilla::dom::cache::CacheKeysArgs CacheKeysArgs;
    typedef mozilla::dom::cache::CacheKeysResult CacheKeysResult;
    typedef mozilla::dom::cache::CacheMatchAllArgs CacheMatchAllArgs;
    typedef mozilla::dom::cache::CacheMatchAllResult CacheMatchAllResult;
    typedef mozilla::dom::cache::CacheMatchArgs CacheMatchArgs;
    typedef mozilla::dom::cache::CacheMatchResult CacheMatchResult;
    typedef mozilla::dom::cache::CacheOpArgs CacheOpArgs;
    typedef mozilla::dom::cache::CacheOpResult CacheOpResult;
    typedef mozilla::dom::cache::CachePutAllArgs CachePutAllArgs;
    typedef mozilla::dom::cache::CachePutAllResult CachePutAllResult;
    typedef mozilla::dom::cache::CacheQueryParams CacheQueryParams;
    typedef mozilla::dom::cache::CacheReadStream CacheReadStream;
    typedef mozilla::dom::cache::CacheReadStreamOrVoid CacheReadStreamOrVoid;
    typedef mozilla::dom::cache::CacheRequest CacheRequest;
    typedef mozilla::dom::cache::CacheRequestOrVoid CacheRequestOrVoid;
    typedef mozilla::dom::cache::CacheRequestResponse CacheRequestResponse;
    typedef mozilla::dom::cache::CacheResponse CacheResponse;
    typedef mozilla::dom::cache::CacheResponseOrVoid CacheResponseOrVoid;
    typedef mozilla::ipc::ContentPrincipalInfo ContentPrincipalInfo;
    typedef mozilla::ipc::ContentPrincipalInfoOriginNoSuffix ContentPrincipalInfoOriginNoSuffix;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::ExpandedPrincipalInfo ExpandedPrincipalInfo;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::ipc::FileInputStreamParams FileInputStreamParams;
    typedef mozilla::dom::cache::HeadersEntry HeadersEntry;
    typedef mozilla::ipc::IPCChannelInfo IPCChannelInfo;
    typedef mozilla::ipc::IPCStream IPCStream;
    typedef mozilla::ipc::InputStreamParams InputStreamParams;
    typedef mozilla::ipc::InputStreamParamsWithFds InputStreamParamsWithFds;
    typedef mozilla::ipc::MIMEInputStreamParams MIMEInputStreamParams;
    typedef mozilla::ipc::MultiplexInputStreamParams MultiplexInputStreamParams;
    typedef mozilla::ipc::NullPrincipalInfo NullPrincipalInfo;
    typedef mozilla::dom::OptionalFileDescriptorSet OptionalFileDescriptorSet;
    typedef mozilla::ipc::OptionalIPCStream OptionalIPCStream;
    typedef mozilla::ipc::OptionalInputStreamParams OptionalInputStreamParams;
    typedef mozilla::ipc::OptionalPrincipalInfo OptionalPrincipalInfo;
    typedef mozilla::ipc::PartialFileInputStreamParams PartialFileInputStreamParams;
    typedef mozilla::ipc::PrincipalInfo PrincipalInfo;
    typedef mozilla::PrincipalOriginAttributes PrincipalOriginAttributes;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolFdMapping ProtocolFdMapping;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::RemoteInputStreamParams RemoteInputStreamParams;
    typedef mozilla::ipc::SameProcessInputStreamParams SameProcessInputStreamParams;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::dom::cache::StorageDeleteArgs StorageDeleteArgs;
    typedef mozilla::dom::cache::StorageDeleteResult StorageDeleteResult;
    typedef mozilla::dom::cache::StorageHasArgs StorageHasArgs;
    typedef mozilla::dom::cache::StorageHasResult StorageHasResult;
    typedef mozilla::dom::cache::StorageKeysArgs StorageKeysArgs;
    typedef mozilla::dom::cache::StorageKeysResult StorageKeysResult;
    typedef mozilla::dom::cache::StorageMatchArgs StorageMatchArgs;
    typedef mozilla::dom::cache::StorageMatchResult StorageMatchResult;
    typedef mozilla::dom::cache::StorageOpenArgs StorageOpenArgs;
    typedef mozilla::dom::cache::StorageOpenResult StorageOpenResult;
    typedef mozilla::ipc::StringInputStreamParams StringInputStreamParams;
    typedef mozilla::ipc::SystemPrincipalInfo SystemPrincipalInfo;
    typedef mozilla::ipc::TemporaryFileInputStreamParams TemporaryFileInputStreamParams;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::void_t void_t;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::PBlobChild PBlobChild;
    typedef mozilla::dom::cache::PCacheParent PCacheParent;
    typedef mozilla::dom::cache::PCacheChild PCacheChild;
    typedef mozilla::dom::cache::PCacheOpParent PCacheOpParent;
    typedef mozilla::dom::cache::PCacheOpChild PCacheOpChild;
    typedef mozilla::dom::cache::PCacheStreamControlParent PCacheStreamControlParent;
    typedef mozilla::dom::cache::PCacheStreamControlChild PCacheStreamControlChild;
    typedef mozilla::ipc::PFileDescriptorSetParent PFileDescriptorSetParent;
    typedef mozilla::ipc::PFileDescriptorSetChild PFileDescriptorSetChild;
    typedef mozilla::ipc::PSendStreamParent PSendStreamParent;
    typedef mozilla::ipc::PSendStreamChild PSendStreamChild;

    typedef PCacheStorage::State State;

    virtual bool
    RecvPCacheOpConstructor(
            PCacheOpParent* actor,
            const CacheOpArgs& aOpArgs);
    virtual bool
    RecvTeardown() = 0;
    virtual PCacheOpParent*
    AllocPCacheOpParent(const CacheOpArgs& aOpArgs) = 0;
    virtual bool
    DeallocPCacheOpParent(PCacheOpParent* aActor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason aWhy) = 0;

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PCacheStorageParent();

    virtual ~PCacheStorageParent();

    PBackgroundParent*
    Manager() const;

    void
    ManagedPCacheOpParent(nsTArray<PCacheOpParent*>& aArr) const;
    const ManagedContainer<PCacheOpParent>&
    ManagedPCacheOpParent() const;

    PCacheStorage::State
    state();

    MOZ_MUST_USE static bool
    Send__delete__(PCacheStorageParent* actor);

    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const SystemPrincipalInfo& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            SystemPrincipalInfo* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const nsTArray<InputStreamParams>& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            nsTArray<InputStreamParams>* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const nsTArray<CacheRequestResponse>& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            nsTArray<CacheRequestResponse>* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const StorageOpenArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            StorageOpenArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheRequestResponse& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheRequestResponse* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const ContentPrincipalInfoOriginNoSuffix& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            ContentPrincipalInfoOriginNoSuffix* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheRequest& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheRequest* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const OptionalInputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            OptionalInputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheMatchAllArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheMatchAllArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheReadStreamOrVoid& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheReadStreamOrVoid* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const FileInputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileInputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const StorageMatchArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            StorageMatchArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const OptionalPrincipalInfo& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            OptionalPrincipalInfo* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheRequestOrVoid& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheRequestOrVoid* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheMatchArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheMatchArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheResponse& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheResponse* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const ExpandedPrincipalInfo& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            ExpandedPrincipalInfo* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheQueryParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheQueryParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PCacheStorageParent* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PCacheStorageParent** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const InputStreamParamsWithFds& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            InputStreamParamsWithFds* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const nsTArray<FileDescriptor>& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            nsTArray<FileDescriptor>* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheOpArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheOpArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PSendStreamParent* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PSendStreamParent** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const IPCChannelInfo& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            IPCChannelInfo* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const StorageDeleteArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            StorageDeleteArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PrincipalInfo& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            PrincipalInfo* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const TemporaryFileInputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            TemporaryFileInputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const MIMEInputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            MIMEInputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PCacheOpParent* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PCacheOpParent** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const InputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            InputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const SameProcessInputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            SameProcessInputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheDeleteArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheDeleteArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const IPCStream& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            IPCStream* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CacheReadStream& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheReadStream* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const CachePutAllArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CachePutAllArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const StringInputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            StringInputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const HeadersEntry& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            HeadersEntry* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const StorageHasArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            StorageHasArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const MultiplexInputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            MultiplexInputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PFileDescriptorSetParent* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PFileDescriptorSetParent** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const CacheKeysArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            CacheKeysArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const OptionalFileDescriptorSet& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            OptionalFileDescriptorSet* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const StorageKeysArgs& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            StorageKeysArgs* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const nsTArray<HeadersEntry>& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            nsTArray<HeadersEntry>* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const nsTArray<PrincipalInfo>& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            nsTArray<PrincipalInfo>* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const FileDescriptor& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            FileDescriptor* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const BufferedInputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            BufferedInputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const NullPrincipalInfo& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            NullPrincipalInfo* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PartialFileInputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            PartialFileInputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const ContentPrincipalInfo& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            ContentPrincipalInfo* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const RemoteInputStreamParams& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            RemoteInputStreamParams* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PCacheStreamControlParent* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PCacheStreamControlParent** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    State mState;
    ManagedContainer<PCacheOpParent> mManagedPCacheOpParent;
};


} // namespace cache
} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
namespace cache {
class CacheStorageParent :
    public PCacheStorageParent
{
    virtual bool
    RecvTeardown();

    virtual PCacheOpParent*
    AllocPCacheOpParent(const CacheOpArgs& aOpArgs);

    virtual bool
    DeallocPCacheOpParent(PCacheOpParent* aActor);

    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

    MOZ_IMPLICIT CacheStorageParent();
    virtual ~CacheStorageParent();
};
} // namespace cache
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
namespace cache {
bool
CacheStorageParent::RecvTeardown()
{
    return false;
}

PCacheOpParent*
CacheStorageParent::AllocPCacheOpParent(const CacheOpArgs& aOpArgs)
{
    return 0;
}

bool
CacheStorageParent::DeallocPCacheOpParent(PCacheOpParent* aActor)
{
    return false;
}

void
CacheStorageParent::ActorDestroy(ActorDestroyReason aWhy)
{
}

MOZ_IMPLICIT CacheStorageParent::CacheStorageParent()
{
    MOZ_COUNT_CTOR(CacheStorageParent);
}

MOZ_IMPLICIT CacheStorageParent::~CacheStorageParent()
{
    MOZ_COUNT_DTOR(CacheStorageParent);
}

} // namespace cache
} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PCacheStorageParent_h
