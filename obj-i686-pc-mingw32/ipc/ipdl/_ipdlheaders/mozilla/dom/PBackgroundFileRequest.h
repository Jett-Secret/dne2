//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PBackgroundFileRequest_h
#define PBackgroundFileRequest_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "mozilla/RefPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "nsTHashtable.h"
#include "mozilla/OperatorNewExtensions.h"

// Headers for typedefs
#include "ipc/IPCMessageUtils.h"


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union FileRequestSize|
//
namespace mozilla {
namespace dom {
class FileRequestSize final
{
public:
    enum Type {
        T__None,
        Tvoid_t = 1,
        Tuint64_t,
        T__Last = Tuint64_t
    };

private:
    typedef mozilla::void_t void_t;
    typedef void_t void_t__tdef;
    typedef uint64_t uint64_t__tdef;

    union Value {
        mozilla::AlignedStorage2<void_t> Vvoid_t;
        mozilla::AlignedStorage2<uint64_t> Vuint64_t;
    };

    void_t*
    ptr_void_t()
    {
        return ((mValue).Vvoid_t).addr();
    }
    const void_t*
    constptr_void_t() const
    {
        return ((mValue).Vvoid_t).addr();
    }
    uint64_t*
    ptr_uint64_t()
    {
        return ((mValue).Vuint64_t).addr();
    }
    const uint64_t*
    constptr_uint64_t() const
    {
        return ((mValue).Vuint64_t).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT FileRequestSize() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT FileRequestSize(const void_t& aOther);

    MOZ_IMPLICIT FileRequestSize(const uint64_t& aOther);

    MOZ_IMPLICIT FileRequestSize(const FileRequestSize& aOther);

    ~FileRequestSize();

    Type
    type() const
    {
        return mType;
    }

    FileRequestSize&
    operator=(const void_t& aRhs);

    FileRequestSize&
    operator=(const uint64_t& aRhs);

    FileRequestSize&
    operator=(const FileRequestSize& aRhs);

    bool
    operator==(const void_t& aRhs) const;

    bool
    operator==(const uint64_t& aRhs) const;

    bool
    operator==(const FileRequestSize& aRhs) const;

    void_t&
    get_void_t()
    {
        AssertSanity(Tvoid_t);
        return (*(ptr_void_t()));
    }
    const void_t&
    get_void_t() const
    {
        AssertSanity(Tvoid_t);
        return (*(constptr_void_t()));
    }
    void
    get(void_t* aOutValue) const;
    operator void_t&()
    {
        return get_void_t();
    }
    operator const void_t&() const
    {
        return get_void_t();
    }

    uint64_t&
    get_uint64_t()
    {
        AssertSanity(Tuint64_t);
        return (*(ptr_uint64_t()));
    }
    const uint64_t&
    get_uint64_t() const
    {
        AssertSanity(Tuint64_t);
        return (*(constptr_uint64_t()));
    }
    void
    get(uint64_t* aOutValue) const;
    operator uint64_t&()
    {
        return get_uint64_t();
    }
    operator const uint64_t&() const
    {
        return get_uint64_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union FileRequestLastModified|
//
namespace mozilla {
namespace dom {
class FileRequestLastModified final
{
public:
    enum Type {
        T__None,
        Tvoid_t = 1,
        Tint64_t,
        T__Last = Tint64_t
    };

private:
    typedef mozilla::void_t void_t;
    typedef void_t void_t__tdef;
    typedef int64_t int64_t__tdef;

    union Value {
        mozilla::AlignedStorage2<void_t> Vvoid_t;
        mozilla::AlignedStorage2<int64_t> Vint64_t;
    };

    void_t*
    ptr_void_t()
    {
        return ((mValue).Vvoid_t).addr();
    }
    const void_t*
    constptr_void_t() const
    {
        return ((mValue).Vvoid_t).addr();
    }
    int64_t*
    ptr_int64_t()
    {
        return ((mValue).Vint64_t).addr();
    }
    const int64_t*
    constptr_int64_t() const
    {
        return ((mValue).Vint64_t).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT FileRequestLastModified() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT FileRequestLastModified(const void_t& aOther);

    MOZ_IMPLICIT FileRequestLastModified(const int64_t& aOther);

    MOZ_IMPLICIT FileRequestLastModified(const FileRequestLastModified& aOther);

    ~FileRequestLastModified();

    Type
    type() const
    {
        return mType;
    }

    FileRequestLastModified&
    operator=(const void_t& aRhs);

    FileRequestLastModified&
    operator=(const int64_t& aRhs);

    FileRequestLastModified&
    operator=(const FileRequestLastModified& aRhs);

    bool
    operator==(const void_t& aRhs) const;

    bool
    operator==(const int64_t& aRhs) const;

    bool
    operator==(const FileRequestLastModified& aRhs) const;

    void_t&
    get_void_t()
    {
        AssertSanity(Tvoid_t);
        return (*(ptr_void_t()));
    }
    const void_t&
    get_void_t() const
    {
        AssertSanity(Tvoid_t);
        return (*(constptr_void_t()));
    }
    void
    get(void_t* aOutValue) const;
    operator void_t&()
    {
        return get_void_t();
    }
    operator const void_t&() const
    {
        return get_void_t();
    }

    int64_t&
    get_int64_t()
    {
        AssertSanity(Tint64_t);
        return (*(ptr_int64_t()));
    }
    const int64_t&
    get_int64_t() const
    {
        AssertSanity(Tint64_t);
        return (*(constptr_int64_t()));
    }
    void
    get(int64_t* aOutValue) const;
    operator int64_t&()
    {
        return get_int64_t();
    }
    operator const int64_t&() const
    {
        return get_int64_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class FileRequestSize;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class FileRequestLastModified;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestMetadata|
//
namespace mozilla {
namespace dom {
class FileRequestMetadata final
{
private:
    typedef mozilla::dom::FileRequestSize FileRequestSize;
    typedef mozilla::dom::FileRequestLastModified FileRequestLastModified;

public:
    MOZ_IMPLICIT FileRequestMetadata();

    MOZ_IMPLICIT FileRequestMetadata(
            const FileRequestSize& _size,
            const FileRequestLastModified& _lastModified)
    {
        Init();
        Assign(_size, _lastModified);
    }

    MOZ_IMPLICIT FileRequestMetadata(const FileRequestMetadata& _o)
    {
        Init();
        Assign((_o).size(), (_o).lastModified());
    }

    ~FileRequestMetadata();

    void
    operator=(const FileRequestMetadata& _o)
    {
        Assign((_o).size(), (_o).lastModified());
    }

    bool
    operator==(const FileRequestMetadata& _o) const;

    FileRequestSize&
    size()
    {
        return size_;
    }
    const FileRequestSize&
    size() const
    {
        return size_;
    }

    FileRequestLastModified&
    lastModified()
    {
        return lastModified_;
    }
    const FileRequestLastModified&
    lastModified() const
    {
        return lastModified_;
    }

private:
    void
    Init();

    void
    Assign(
            const FileRequestSize& _size,
            const FileRequestLastModified& _lastModified);

    FileRequestSize size_;
    FileRequestLastModified lastModified_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class FileRequestMetadata;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestGetMetadataResponse|
//
namespace mozilla {
namespace dom {
class FileRequestGetMetadataResponse final
{
private:
    typedef mozilla::dom::FileRequestMetadata FileRequestMetadata;

public:
    MOZ_IMPLICIT FileRequestGetMetadataResponse();

    MOZ_IMPLICIT FileRequestGetMetadataResponse(const FileRequestMetadata& _metadata)
    {
        Init();
        Assign(_metadata);
    }

    MOZ_IMPLICIT FileRequestGetMetadataResponse(const FileRequestGetMetadataResponse& _o)
    {
        Init();
        Assign((_o).metadata());
    }

    ~FileRequestGetMetadataResponse();

    void
    operator=(const FileRequestGetMetadataResponse& _o)
    {
        Assign((_o).metadata());
    }

    bool
    operator==(const FileRequestGetMetadataResponse& _o) const;

    FileRequestMetadata&
    metadata()
    {
        return metadata_;
    }
    const FileRequestMetadata&
    metadata() const
    {
        return metadata_;
    }

private:
    void
    Init();

    void
    Assign(const FileRequestMetadata& _metadata);

    FileRequestMetadata metadata_;
};
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestReadResponse|
//
namespace mozilla {
namespace dom {
class FileRequestReadResponse final
{
private:

public:
    MOZ_IMPLICIT FileRequestReadResponse();

    MOZ_IMPLICIT FileRequestReadResponse(const nsCString& _data)
    {
        Init();
        Assign(_data);
    }

    MOZ_IMPLICIT FileRequestReadResponse(const FileRequestReadResponse& _o)
    {
        Init();
        Assign((_o).data());
    }

    ~FileRequestReadResponse();

    void
    operator=(const FileRequestReadResponse& _o)
    {
        Assign((_o).data());
    }

    bool
    operator==(const FileRequestReadResponse& _o) const;

    nsCString&
    data()
    {
        return data_;
    }
    const nsCString&
    data() const
    {
        return data_;
    }

private:
    void
    Init();

    void
    Assign(const nsCString& _data);

    nsCString data_;
};
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestWriteResponse|
//
namespace mozilla {
namespace dom {
class FileRequestWriteResponse final
{
private:

public:
    MOZ_IMPLICIT FileRequestWriteResponse()
    {
        Init();
        Assign();
    }

    MOZ_IMPLICIT FileRequestWriteResponse(const FileRequestWriteResponse& _o)
    {
        Init();
        Assign();
    }

    ~FileRequestWriteResponse();

    void
    operator=(const FileRequestWriteResponse& _o)
    {
        Assign();
    }

    bool
    operator==(const FileRequestWriteResponse& _o) const;

private:
    void
    Init();

    void
    Assign();

};
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestTruncateResponse|
//
namespace mozilla {
namespace dom {
class FileRequestTruncateResponse final
{
private:

public:
    MOZ_IMPLICIT FileRequestTruncateResponse()
    {
        Init();
        Assign();
    }

    MOZ_IMPLICIT FileRequestTruncateResponse(const FileRequestTruncateResponse& _o)
    {
        Init();
        Assign();
    }

    ~FileRequestTruncateResponse();

    void
    operator=(const FileRequestTruncateResponse& _o)
    {
        Assign();
    }

    bool
    operator==(const FileRequestTruncateResponse& _o) const;

private:
    void
    Init();

    void
    Assign();

};
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestFlushResponse|
//
namespace mozilla {
namespace dom {
class FileRequestFlushResponse final
{
private:

public:
    MOZ_IMPLICIT FileRequestFlushResponse()
    {
        Init();
        Assign();
    }

    MOZ_IMPLICIT FileRequestFlushResponse(const FileRequestFlushResponse& _o)
    {
        Init();
        Assign();
    }

    ~FileRequestFlushResponse();

    void
    operator=(const FileRequestFlushResponse& _o)
    {
        Assign();
    }

    bool
    operator==(const FileRequestFlushResponse& _o) const;

private:
    void
    Init();

    void
    Assign();

};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class FileRequestMetadata;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct FileRequestGetFileResponse|
//
namespace mozilla {
namespace dom {
class FileRequestGetFileResponse final
{
private:
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::PBlobChild PBlobChild;
    typedef mozilla::dom::FileRequestMetadata FileRequestMetadata;

public:
    MOZ_IMPLICIT FileRequestGetFileResponse();

    MOZ_IMPLICIT FileRequestGetFileResponse(
            PBlobParent* _fileParent,
            PBlobChild* _fileChild,
            const FileRequestMetadata& _metadata)
    {
        Init();
        Assign(_fileParent, _fileChild, _metadata);
    }

    MOZ_IMPLICIT FileRequestGetFileResponse(const FileRequestGetFileResponse& _o)
    {
        Init();
        Assign(const_cast<PBlobParent*>((_o).fileParent()), const_cast<PBlobChild*>((_o).fileChild()), (_o).metadata());
    }

    ~FileRequestGetFileResponse();

    void
    operator=(const FileRequestGetFileResponse& _o)
    {
        Assign(const_cast<PBlobParent*>((_o).fileParent()), const_cast<PBlobChild*>((_o).fileChild()), (_o).metadata());
    }

    bool
    operator==(const FileRequestGetFileResponse& _o) const;

    PBlobParent*&
    fileParent()
    {
        return fileParent_;
    }
    PBlobParent*
    fileParent() const
    {
        return fileParent_;
    }

    PBlobChild*&
    fileChild()
    {
        return fileChild_;
    }
    PBlobChild*
    fileChild() const
    {
        return fileChild_;
    }

    FileRequestMetadata&
    metadata()
    {
        return metadata_;
    }
    const FileRequestMetadata&
    metadata() const
    {
        return metadata_;
    }

private:
    void
    Init();

    void
    Assign(
            PBlobParent* _fileParent,
            PBlobChild* _fileChild,
            const FileRequestMetadata& _metadata);

    PBlobParent* fileParent_;
    PBlobChild* fileChild_;
    FileRequestMetadata metadata_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class FileRequestGetMetadataResponse;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class FileRequestReadResponse;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class FileRequestWriteResponse;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class FileRequestTruncateResponse;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class FileRequestFlushResponse;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class FileRequestGetFileResponse;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union FileRequestResponse|
//
namespace mozilla {
namespace dom {
class FileRequestResponse final
{
public:
    enum Type {
        T__None,
        Tnsresult = 1,
        TFileRequestGetMetadataResponse,
        TFileRequestReadResponse,
        TFileRequestWriteResponse,
        TFileRequestTruncateResponse,
        TFileRequestFlushResponse,
        TFileRequestGetFileResponse,
        T__Last = TFileRequestGetFileResponse
    };

private:
    typedef mozilla::dom::FileRequestGetMetadataResponse FileRequestGetMetadataResponse;
    typedef mozilla::dom::FileRequestReadResponse FileRequestReadResponse;
    typedef mozilla::dom::FileRequestWriteResponse FileRequestWriteResponse;
    typedef mozilla::dom::FileRequestTruncateResponse FileRequestTruncateResponse;
    typedef mozilla::dom::FileRequestFlushResponse FileRequestFlushResponse;
    typedef mozilla::dom::FileRequestGetFileResponse FileRequestGetFileResponse;
    typedef nsresult nsresult__tdef;
    typedef FileRequestGetMetadataResponse FileRequestGetMetadataResponse__tdef;
    typedef FileRequestReadResponse FileRequestReadResponse__tdef;
    typedef FileRequestWriteResponse FileRequestWriteResponse__tdef;
    typedef FileRequestTruncateResponse FileRequestTruncateResponse__tdef;
    typedef FileRequestFlushResponse FileRequestFlushResponse__tdef;
    typedef FileRequestGetFileResponse FileRequestGetFileResponse__tdef;

    union Value {
        mozilla::AlignedStorage2<nsresult> Vnsresult;
        mozilla::AlignedStorage2<FileRequestGetMetadataResponse> VFileRequestGetMetadataResponse;
        mozilla::AlignedStorage2<FileRequestReadResponse> VFileRequestReadResponse;
        mozilla::AlignedStorage2<FileRequestWriteResponse> VFileRequestWriteResponse;
        mozilla::AlignedStorage2<FileRequestTruncateResponse> VFileRequestTruncateResponse;
        mozilla::AlignedStorage2<FileRequestFlushResponse> VFileRequestFlushResponse;
        mozilla::AlignedStorage2<FileRequestGetFileResponse> VFileRequestGetFileResponse;
    };

    nsresult*
    ptr_nsresult()
    {
        return ((mValue).Vnsresult).addr();
    }
    const nsresult*
    constptr_nsresult() const
    {
        return ((mValue).Vnsresult).addr();
    }
    FileRequestGetMetadataResponse*
    ptr_FileRequestGetMetadataResponse()
    {
        return ((mValue).VFileRequestGetMetadataResponse).addr();
    }
    const FileRequestGetMetadataResponse*
    constptr_FileRequestGetMetadataResponse() const
    {
        return ((mValue).VFileRequestGetMetadataResponse).addr();
    }
    FileRequestReadResponse*
    ptr_FileRequestReadResponse()
    {
        return ((mValue).VFileRequestReadResponse).addr();
    }
    const FileRequestReadResponse*
    constptr_FileRequestReadResponse() const
    {
        return ((mValue).VFileRequestReadResponse).addr();
    }
    FileRequestWriteResponse*
    ptr_FileRequestWriteResponse()
    {
        return ((mValue).VFileRequestWriteResponse).addr();
    }
    const FileRequestWriteResponse*
    constptr_FileRequestWriteResponse() const
    {
        return ((mValue).VFileRequestWriteResponse).addr();
    }
    FileRequestTruncateResponse*
    ptr_FileRequestTruncateResponse()
    {
        return ((mValue).VFileRequestTruncateResponse).addr();
    }
    const FileRequestTruncateResponse*
    constptr_FileRequestTruncateResponse() const
    {
        return ((mValue).VFileRequestTruncateResponse).addr();
    }
    FileRequestFlushResponse*
    ptr_FileRequestFlushResponse()
    {
        return ((mValue).VFileRequestFlushResponse).addr();
    }
    const FileRequestFlushResponse*
    constptr_FileRequestFlushResponse() const
    {
        return ((mValue).VFileRequestFlushResponse).addr();
    }
    FileRequestGetFileResponse*
    ptr_FileRequestGetFileResponse()
    {
        return ((mValue).VFileRequestGetFileResponse).addr();
    }
    const FileRequestGetFileResponse*
    constptr_FileRequestGetFileResponse() const
    {
        return ((mValue).VFileRequestGetFileResponse).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT FileRequestResponse() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT FileRequestResponse(const nsresult& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestGetMetadataResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestReadResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestWriteResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestTruncateResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestFlushResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestGetFileResponse& aOther);

    MOZ_IMPLICIT FileRequestResponse(const FileRequestResponse& aOther);

    ~FileRequestResponse();

    Type
    type() const
    {
        return mType;
    }

    FileRequestResponse&
    operator=(const nsresult& aRhs);

    FileRequestResponse&
    operator=(const FileRequestGetMetadataResponse& aRhs);

    FileRequestResponse&
    operator=(const FileRequestReadResponse& aRhs);

    FileRequestResponse&
    operator=(const FileRequestWriteResponse& aRhs);

    FileRequestResponse&
    operator=(const FileRequestTruncateResponse& aRhs);

    FileRequestResponse&
    operator=(const FileRequestFlushResponse& aRhs);

    FileRequestResponse&
    operator=(const FileRequestGetFileResponse& aRhs);

    FileRequestResponse&
    operator=(const FileRequestResponse& aRhs);

    bool
    operator==(const nsresult& aRhs) const;

    bool
    operator==(const FileRequestGetMetadataResponse& aRhs) const;

    bool
    operator==(const FileRequestReadResponse& aRhs) const;

    bool
    operator==(const FileRequestWriteResponse& aRhs) const;

    bool
    operator==(const FileRequestTruncateResponse& aRhs) const;

    bool
    operator==(const FileRequestFlushResponse& aRhs) const;

    bool
    operator==(const FileRequestGetFileResponse& aRhs) const;

    bool
    operator==(const FileRequestResponse& aRhs) const;

    nsresult&
    get_nsresult()
    {
        AssertSanity(Tnsresult);
        return (*(ptr_nsresult()));
    }
    const nsresult&
    get_nsresult() const
    {
        AssertSanity(Tnsresult);
        return (*(constptr_nsresult()));
    }
    void
    get(nsresult* aOutValue) const;
    operator nsresult&()
    {
        return get_nsresult();
    }
    operator const nsresult&() const
    {
        return get_nsresult();
    }

    FileRequestGetMetadataResponse&
    get_FileRequestGetMetadataResponse()
    {
        AssertSanity(TFileRequestGetMetadataResponse);
        return (*(ptr_FileRequestGetMetadataResponse()));
    }
    const FileRequestGetMetadataResponse&
    get_FileRequestGetMetadataResponse() const
    {
        AssertSanity(TFileRequestGetMetadataResponse);
        return (*(constptr_FileRequestGetMetadataResponse()));
    }
    void
    get(FileRequestGetMetadataResponse* aOutValue) const;
    operator FileRequestGetMetadataResponse&()
    {
        return get_FileRequestGetMetadataResponse();
    }
    operator const FileRequestGetMetadataResponse&() const
    {
        return get_FileRequestGetMetadataResponse();
    }

    FileRequestReadResponse&
    get_FileRequestReadResponse()
    {
        AssertSanity(TFileRequestReadResponse);
        return (*(ptr_FileRequestReadResponse()));
    }
    const FileRequestReadResponse&
    get_FileRequestReadResponse() const
    {
        AssertSanity(TFileRequestReadResponse);
        return (*(constptr_FileRequestReadResponse()));
    }
    void
    get(FileRequestReadResponse* aOutValue) const;
    operator FileRequestReadResponse&()
    {
        return get_FileRequestReadResponse();
    }
    operator const FileRequestReadResponse&() const
    {
        return get_FileRequestReadResponse();
    }

    FileRequestWriteResponse&
    get_FileRequestWriteResponse()
    {
        AssertSanity(TFileRequestWriteResponse);
        return (*(ptr_FileRequestWriteResponse()));
    }
    const FileRequestWriteResponse&
    get_FileRequestWriteResponse() const
    {
        AssertSanity(TFileRequestWriteResponse);
        return (*(constptr_FileRequestWriteResponse()));
    }
    void
    get(FileRequestWriteResponse* aOutValue) const;
    operator FileRequestWriteResponse&()
    {
        return get_FileRequestWriteResponse();
    }
    operator const FileRequestWriteResponse&() const
    {
        return get_FileRequestWriteResponse();
    }

    FileRequestTruncateResponse&
    get_FileRequestTruncateResponse()
    {
        AssertSanity(TFileRequestTruncateResponse);
        return (*(ptr_FileRequestTruncateResponse()));
    }
    const FileRequestTruncateResponse&
    get_FileRequestTruncateResponse() const
    {
        AssertSanity(TFileRequestTruncateResponse);
        return (*(constptr_FileRequestTruncateResponse()));
    }
    void
    get(FileRequestTruncateResponse* aOutValue) const;
    operator FileRequestTruncateResponse&()
    {
        return get_FileRequestTruncateResponse();
    }
    operator const FileRequestTruncateResponse&() const
    {
        return get_FileRequestTruncateResponse();
    }

    FileRequestFlushResponse&
    get_FileRequestFlushResponse()
    {
        AssertSanity(TFileRequestFlushResponse);
        return (*(ptr_FileRequestFlushResponse()));
    }
    const FileRequestFlushResponse&
    get_FileRequestFlushResponse() const
    {
        AssertSanity(TFileRequestFlushResponse);
        return (*(constptr_FileRequestFlushResponse()));
    }
    void
    get(FileRequestFlushResponse* aOutValue) const;
    operator FileRequestFlushResponse&()
    {
        return get_FileRequestFlushResponse();
    }
    operator const FileRequestFlushResponse&() const
    {
        return get_FileRequestFlushResponse();
    }

    FileRequestGetFileResponse&
    get_FileRequestGetFileResponse()
    {
        AssertSanity(TFileRequestGetFileResponse);
        return (*(ptr_FileRequestGetFileResponse()));
    }
    const FileRequestGetFileResponse&
    get_FileRequestGetFileResponse() const
    {
        AssertSanity(TFileRequestGetFileResponse);
        return (*(constptr_FileRequestGetFileResponse()));
    }
    void
    get(FileRequestGetFileResponse* aOutValue) const;
    operator FileRequestGetFileResponse&()
    {
        return get_FileRequestGetFileResponse();
    }
    operator const FileRequestGetFileResponse&() const
    {
        return get_FileRequestGetFileResponse();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBackgroundFileRequestParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PBackgroundFileRequestChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PBackgroundFileRequestChild and PBackgroundFileRequestParent
//
namespace mozilla {
namespace dom {
namespace PBackgroundFileRequest {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundFileRequestParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBackgroundFileRequestChild>* aChild);

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PBackgroundFileRequestStart = PBackgroundFileRequestMsgStart << 16,
    Msg___delete____ID,
    Reply___delete____ID,
    Msg_Progress__ID,
    PBackgroundFileRequestEnd
};

bool
Transition(
        mozilla::ipc::Trigger trigger,
        State* next);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);

IPC::Message*
Msg_Progress(int32_t routingId);



} // namespace PBackgroundFileRequest
} // namespace dom
} // namespace mozilla

#endif // ifndef PBackgroundFileRequest_h
