//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGamepadEventChannelParent_h
#define PGamepadEventChannelParent_h

#include "mozilla/dom/PGamepadEventChannel.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla
namespace mozilla {
namespace ipc {
class PBackgroundChild;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace ipc {
class PBackgroundParent;
} // namespace ipc
} // namespace mozilla

namespace mozilla {
namespace dom {


class PGamepadEventChannelParent :
    public mozilla::ipc::IProtocol
{
    friend class mozilla::ipc::PBackgroundParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::GamepadAdded GamepadAdded;
    typedef mozilla::dom::GamepadAxisInformation GamepadAxisInformation;
    typedef mozilla::dom::GamepadButtonInformation GamepadButtonInformation;
    typedef mozilla::dom::GamepadChangeEvent GamepadChangeEvent;
    typedef mozilla::dom::GamepadPoseInformation GamepadPoseInformation;
    typedef mozilla::dom::GamepadPoseState GamepadPoseState;
    typedef mozilla::dom::GamepadRemoved GamepadRemoved;
    typedef mozilla::dom::GamepadServiceType GamepadServiceType;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::ipc::PBackgroundParent PBackgroundParent;
    typedef mozilla::ipc::PBackgroundChild PBackgroundChild;

    typedef PGamepadEventChannel::State State;

    virtual bool
    RecvGamepadListenerAdded() = 0;
    virtual bool
    RecvGamepadListenerRemoved() = 0;

    virtual void
    ActorDestroy(ActorDestroyReason aWhy) = 0;

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PGamepadEventChannelParent();

    virtual ~PGamepadEventChannelParent();

    PBackgroundParent*
    Manager() const;

    PGamepadEventChannel::State
    state();

    MOZ_MUST_USE static bool
    Send__delete__(PGamepadEventChannelParent* actor);

    MOZ_MUST_USE bool
    SendGamepadUpdate(const GamepadChangeEvent& aGamepadEvent);

    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const GamepadButtonInformation& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            GamepadButtonInformation* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const GamepadAxisInformation& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            GamepadAxisInformation* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const GamepadAdded& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            GamepadAdded* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const GamepadPoseInformation& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            GamepadPoseInformation* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PGamepadEventChannelParent* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PGamepadEventChannelParent** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const GamepadChangeEvent& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            GamepadChangeEvent* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const GamepadRemoved& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            GamepadRemoved* v__,
            const Message* msg__,
            PickleIterator* iter__);

    State mState;
};


} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
class GamepadEventChannelParent :
    public PGamepadEventChannelParent
{
    virtual bool
    RecvGamepadListenerAdded();

    virtual bool
    RecvGamepadListenerRemoved();

    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

    MOZ_IMPLICIT GamepadEventChannelParent();
    virtual ~GamepadEventChannelParent();
};
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
bool
GamepadEventChannelParent::RecvGamepadListenerAdded()
{
    return false;
}

bool
GamepadEventChannelParent::RecvGamepadListenerRemoved()
{
    return false;
}

void
GamepadEventChannelParent::ActorDestroy(ActorDestroyReason aWhy)
{
}

MOZ_IMPLICIT GamepadEventChannelParent::GamepadEventChannelParent()
{
    MOZ_COUNT_CTOR(GamepadEventChannelParent);
}

MOZ_IMPLICIT GamepadEventChannelParent::~GamepadEventChannelParent()
{
    MOZ_COUNT_DTOR(GamepadEventChannelParent);
}

} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PGamepadEventChannelParent_h
