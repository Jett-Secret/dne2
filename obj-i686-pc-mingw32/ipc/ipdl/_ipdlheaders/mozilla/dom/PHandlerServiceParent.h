//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PHandlerServiceParent_h
#define PHandlerServiceParent_h

#include "mozilla/dom/PHandlerService.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


class PHandlerServiceParent :
    public mozilla::ipc::IProtocol
{
    friend class mozilla::dom::PContentParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::dom::HandlerApp HandlerApp;
    typedef mozilla::dom::HandlerInfo HandlerInfo;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;

    typedef PHandlerService::State State;

    virtual bool
    RecvFillHandlerInfo(
            const HandlerInfo& aHandlerInfoData,
            const nsCString& aOverrideType,
            HandlerInfo* handlerInfoData) = 0;
    virtual bool
    RecvExists(
            const HandlerInfo& aHandlerInfo,
            bool* exists) = 0;
    virtual bool
    RecvGetTypeFromExtension(
            const nsCString& aFileExtension,
            nsCString* type) = 0;
    virtual bool
    Recv__delete__();

    virtual void
    ActorDestroy(ActorDestroyReason aWhy) = 0;

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PHandlerServiceParent();

    virtual ~PHandlerServiceParent();

    PContentParent*
    Manager() const;

    PHandlerService::State
    state();

    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const PHandlerServiceParent* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PHandlerServiceParent** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const HandlerInfo& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            HandlerInfo* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const nsTArray<HandlerApp>& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            nsTArray<HandlerApp>* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const HandlerApp& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            HandlerApp* v__,
            const Message* msg__,
            PickleIterator* iter__);

    State mState;
};


} // namespace dom
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace dom {
class HandlerServiceParent :
    public PHandlerServiceParent
{
    virtual bool
    RecvFillHandlerInfo(
            const HandlerInfo& aHandlerInfoData,
            const nsCString& aOverrideType,
            HandlerInfo* handlerInfoData);

    virtual bool
    RecvExists(
            const HandlerInfo& aHandlerInfo,
            bool* exists);

    virtual bool
    RecvGetTypeFromExtension(
            const nsCString& aFileExtension,
            nsCString* type);

    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

    MOZ_IMPLICIT HandlerServiceParent();
    virtual ~HandlerServiceParent();
};
} // namespace dom
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace dom {
bool
HandlerServiceParent::RecvFillHandlerInfo(
        const HandlerInfo& aHandlerInfoData,
        const nsCString& aOverrideType,
        HandlerInfo* handlerInfoData)
{
    return false;
}

bool
HandlerServiceParent::RecvExists(
        const HandlerInfo& aHandlerInfo,
        bool* exists)
{
    return false;
}

bool
HandlerServiceParent::RecvGetTypeFromExtension(
        const nsCString& aFileExtension,
        nsCString* type)
{
    return false;
}

void
HandlerServiceParent::ActorDestroy(ActorDestroyReason aWhy)
{
}

MOZ_IMPLICIT HandlerServiceParent::HandlerServiceParent()
{
    MOZ_COUNT_CTOR(HandlerServiceParent);
}

MOZ_IMPLICIT HandlerServiceParent::~HandlerServiceParent()
{
    MOZ_COUNT_DTOR(HandlerServiceParent);
}

} // namespace dom
} // namespace mozilla
#endif // if 0

#endif // ifndef PHandlerServiceParent_h
