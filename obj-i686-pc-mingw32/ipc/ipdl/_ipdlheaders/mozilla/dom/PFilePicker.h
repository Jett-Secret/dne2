//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PFilePicker_h
#define PFilePicker_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "mozilla/RefPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "nsTHashtable.h"
#include "mozilla/OperatorNewExtensions.h"

// Headers for typedefs
#include "ipc/IPCMessageUtils.h"

namespace mozilla {
namespace dom {
class PBlobParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PBlobChild;
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct InputBlobs|
//
namespace mozilla {
namespace dom {
class InputBlobs final
{
private:
    typedef mozilla::dom::PBlobParent PBlobParent;
    typedef mozilla::dom::PBlobChild PBlobChild;

public:
    MOZ_IMPLICIT InputBlobs();

    MOZ_IMPLICIT InputBlobs(
            const nsTArray<PBlobParent*>& _blobsParent,
            const nsTArray<PBlobChild*>& _blobsChild)
    {
        Init();
        Assign(_blobsParent, _blobsChild);
    }

    MOZ_IMPLICIT InputBlobs(const InputBlobs& _o)
    {
        Init();
        Assign((_o).blobsParent(), (_o).blobsChild());
    }

    ~InputBlobs();

    void
    operator=(const InputBlobs& _o)
    {
        Assign((_o).blobsParent(), (_o).blobsChild());
    }

    bool
    operator==(const InputBlobs& _o) const;

    nsTArray<PBlobParent*>&
    blobsParent()
    {
        return blobsParent_;
    }
    const nsTArray<PBlobParent*>&
    blobsParent() const
    {
        return blobsParent_;
    }

    nsTArray<PBlobChild*>&
    blobsChild()
    {
        return blobsChild_;
    }
    const nsTArray<PBlobChild*>&
    blobsChild() const
    {
        return blobsChild_;
    }

private:
    void
    Init();

    void
    Assign(
            const nsTArray<PBlobParent*>& _blobsParent,
            const nsTArray<PBlobChild*>& _blobsChild);

    nsTArray<PBlobParent*> blobsParent_;
    nsTArray<PBlobChild*> blobsChild_;
};
} // namespace dom
} // namespace mozilla


//-----------------------------------------------------------------------------
// Declaration of the IPDL type |struct InputDirectory|
//
namespace mozilla {
namespace dom {
class InputDirectory final
{
private:

public:
    MOZ_IMPLICIT InputDirectory();

    MOZ_IMPLICIT InputDirectory(const nsString& _directoryPath)
    {
        Init();
        Assign(_directoryPath);
    }

    MOZ_IMPLICIT InputDirectory(const InputDirectory& _o)
    {
        Init();
        Assign((_o).directoryPath());
    }

    ~InputDirectory();

    void
    operator=(const InputDirectory& _o)
    {
        Assign((_o).directoryPath());
    }

    bool
    operator==(const InputDirectory& _o) const;

    nsString&
    directoryPath()
    {
        return directoryPath_;
    }
    const nsString&
    directoryPath() const
    {
        return directoryPath_;
    }

private:
    void
    Init();

    void
    Assign(const nsString& _directoryPath);

    nsString directoryPath_;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class InputBlobs;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class InputDirectory;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Declaration of the IPDL type |union MaybeInputData|
//
namespace mozilla {
namespace dom {
class MaybeInputData final
{
public:
    enum Type {
        T__None,
        TInputBlobs = 1,
        TInputDirectory,
        Tvoid_t,
        T__Last = Tvoid_t
    };

private:
    typedef mozilla::dom::InputBlobs InputBlobs;
    typedef mozilla::dom::InputDirectory InputDirectory;
    typedef mozilla::void_t void_t;
    typedef InputBlobs InputBlobs__tdef;
    typedef InputDirectory InputDirectory__tdef;
    typedef void_t void_t__tdef;

    union Value {
        mozilla::AlignedStorage2<InputBlobs> VInputBlobs;
        mozilla::AlignedStorage2<InputDirectory> VInputDirectory;
        mozilla::AlignedStorage2<void_t> Vvoid_t;
    };

    InputBlobs*
    ptr_InputBlobs()
    {
        return ((mValue).VInputBlobs).addr();
    }
    const InputBlobs*
    constptr_InputBlobs() const
    {
        return ((mValue).VInputBlobs).addr();
    }
    InputDirectory*
    ptr_InputDirectory()
    {
        return ((mValue).VInputDirectory).addr();
    }
    const InputDirectory*
    constptr_InputDirectory() const
    {
        return ((mValue).VInputDirectory).addr();
    }
    void_t*
    ptr_void_t()
    {
        return ((mValue).Vvoid_t).addr();
    }
    const void_t*
    constptr_void_t() const
    {
        return ((mValue).Vvoid_t).addr();
    }

    bool
    MaybeDestroy(Type aNewType);

    void
    AssertSanity() const
    {
        MOZ_RELEASE_ASSERT((T__None) <= (mType), "invalid type tag");
        MOZ_RELEASE_ASSERT((mType) <= (T__Last), "invalid type tag");
    }
    void
    AssertSanity(Type aType) const
    {
        AssertSanity();
        MOZ_RELEASE_ASSERT((mType) == (aType), "unexpected type tag");
    }

public:
    MOZ_IMPLICIT MaybeInputData() :
        mType(T__None)
    {
    }

    MOZ_IMPLICIT MaybeInputData(const InputBlobs& aOther);

    MOZ_IMPLICIT MaybeInputData(const InputDirectory& aOther);

    MOZ_IMPLICIT MaybeInputData(const void_t& aOther);

    MOZ_IMPLICIT MaybeInputData(const MaybeInputData& aOther);

    ~MaybeInputData();

    Type
    type() const
    {
        return mType;
    }

    MaybeInputData&
    operator=(const InputBlobs& aRhs);

    MaybeInputData&
    operator=(const InputDirectory& aRhs);

    MaybeInputData&
    operator=(const void_t& aRhs);

    MaybeInputData&
    operator=(const MaybeInputData& aRhs);

    bool
    operator==(const InputBlobs& aRhs) const;

    bool
    operator==(const InputDirectory& aRhs) const;

    bool
    operator==(const void_t& aRhs) const;

    bool
    operator==(const MaybeInputData& aRhs) const;

    InputBlobs&
    get_InputBlobs()
    {
        AssertSanity(TInputBlobs);
        return (*(ptr_InputBlobs()));
    }
    const InputBlobs&
    get_InputBlobs() const
    {
        AssertSanity(TInputBlobs);
        return (*(constptr_InputBlobs()));
    }
    void
    get(InputBlobs* aOutValue) const;
    operator InputBlobs&()
    {
        return get_InputBlobs();
    }
    operator const InputBlobs&() const
    {
        return get_InputBlobs();
    }

    InputDirectory&
    get_InputDirectory()
    {
        AssertSanity(TInputDirectory);
        return (*(ptr_InputDirectory()));
    }
    const InputDirectory&
    get_InputDirectory() const
    {
        AssertSanity(TInputDirectory);
        return (*(constptr_InputDirectory()));
    }
    void
    get(InputDirectory* aOutValue) const;
    operator InputDirectory&()
    {
        return get_InputDirectory();
    }
    operator const InputDirectory&() const
    {
        return get_InputDirectory();
    }

    void_t&
    get_void_t()
    {
        AssertSanity(Tvoid_t);
        return (*(ptr_void_t()));
    }
    const void_t&
    get_void_t() const
    {
        AssertSanity(Tvoid_t);
        return (*(constptr_void_t()));
    }
    void
    get(void_t* aOutValue) const;
    operator void_t&()
    {
        return get_void_t();
    }
    operator const void_t&() const
    {
        return get_void_t();
    }

private:
    Value mValue;
    Type mType;
};
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PFilePickerParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PFilePickerChild;
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PFilePickerChild and PFilePickerParent
//
namespace mozilla {
namespace dom {
namespace PFilePicker {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PFilePickerParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PFilePickerChild>* aChild);

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PFilePickerStart = PFilePickerMsgStart << 16,
    Msg_Open__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PFilePickerEnd
};

bool
Transition(
        mozilla::ipc::Trigger trigger,
        State* next);

IPC::Message*
Msg_Open(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PFilePicker
} // namespace dom
} // namespace mozilla

#endif // ifndef PFilePicker_h
