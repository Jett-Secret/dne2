//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PGMPStorage_h
#define PGMPStorage_h

#include "mozilla/Attributes.h"
#include "IPCMessageStart.h"
#include "ipc/IPCMessageUtils.h"
#include "mozilla/RefPtr.h"
#include "nsStringGlue.h"
#include "nsTArray.h"
#include "mozilla/ipc/ProtocolUtils.h"
#include "nsTHashtable.h"
#include "mozilla/OperatorNewExtensions.h"
#include "mozilla/gmp/GMPTypes.h"

namespace mozilla {
namespace gmp {
class PGMPStorageParent;
} // namespace gmp
} // namespace mozilla
namespace mozilla {
namespace gmp {
class PGMPStorageChild;
} // namespace gmp
} // namespace mozilla

//-----------------------------------------------------------------------------
// Code common to PGMPStorageChild and PGMPStorageParent
//
namespace mozilla {
namespace gmp {
namespace PGMPStorage {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPStorageParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::gmp::PGMPStorageChild>* aChild);

enum State {
    __Dead,
    __Null,
    __Error,
    __Dying,
    __Start = __Null
};

enum MessageType {
    PGMPStorageStart = PGMPStorageMsgStart << 16,
    Msg_OpenComplete__ID,
    Msg_ReadComplete__ID,
    Msg_WriteComplete__ID,
    Msg_RecordNames__ID,
    Msg_Shutdown__ID,
    Msg_Open__ID,
    Msg_Read__ID,
    Msg_Write__ID,
    Msg_Close__ID,
    Msg_GetRecordNames__ID,
    Msg___delete____ID,
    Reply___delete____ID,
    PGMPStorageEnd
};

bool
Transition(
        mozilla::ipc::Trigger trigger,
        State* next);

IPC::Message*
Msg_OpenComplete(int32_t routingId);

IPC::Message*
Msg_ReadComplete(int32_t routingId);

IPC::Message*
Msg_WriteComplete(int32_t routingId);

IPC::Message*
Msg_RecordNames(int32_t routingId);

IPC::Message*
Msg_Shutdown(int32_t routingId);

IPC::Message*
Msg_Open(int32_t routingId);

IPC::Message*
Msg_Read(int32_t routingId);

IPC::Message*
Msg_Write(int32_t routingId);

IPC::Message*
Msg_Close(int32_t routingId);

IPC::Message*
Msg_GetRecordNames(int32_t routingId);

IPC::Message*
Msg___delete__(int32_t routingId);
IPC::Message*
Reply___delete__(int32_t routingId);



} // namespace PGMPStorage
} // namespace gmp
} // namespace mozilla

#endif // ifndef PGMPStorage_h
