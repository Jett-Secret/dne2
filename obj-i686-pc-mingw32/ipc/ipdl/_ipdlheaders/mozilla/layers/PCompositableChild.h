//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PCompositableChild_h
#define PCompositableChild_h

#include "mozilla/layers/PCompositable.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

namespace mozilla {
namespace layers {
class PLayerTransactionChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PLayerTransactionParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PImageBridgeChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PImageBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PCompositorBridgeChild;
} // namespace layers
} // namespace mozilla
namespace mozilla {
namespace layers {
class PCompositorBridgeParent;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PLayerTransactionChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {
class PImageBridgeChild;
} // namespace layers
} // namespace mozilla

namespace mozilla {
namespace layers {


class PCompositableChild :
    public mozilla::ipc::IProtocol
{
    friend class mozilla::layers::PLayerTransactionChild;

    friend class mozilla::layers::PImageBridgeChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::layers::PLayerTransactionChild PLayerTransactionChild;
    typedef mozilla::layers::PLayerTransactionParent PLayerTransactionParent;
    typedef mozilla::layers::PImageBridgeChild PImageBridgeChild;
    typedef mozilla::layers::PImageBridgeParent PImageBridgeParent;
    typedef mozilla::layers::PCompositorBridgeChild PCompositorBridgeChild;
    typedef mozilla::layers::PCompositorBridgeParent PCompositorBridgeParent;

    typedef PCompositable::State State;

    virtual bool
    Recv__delete__();

    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PCompositableChild();

    virtual ~PCompositableChild();

    PCompositable::State
    state();

    bool
    SendDestroy();

    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const PCompositableChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PCompositableChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    State mState;
};


} // namespace layers
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace layers {
class CompositableChild :
    public PCompositableChild
{
    MOZ_IMPLICIT CompositableChild();
    virtual ~CompositableChild();
};
} // namespace layers
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace layers {
MOZ_IMPLICIT CompositableChild::CompositableChild()
{
    MOZ_COUNT_CTOR(CompositableChild);
}

MOZ_IMPLICIT CompositableChild::~CompositableChild()
{
    MOZ_COUNT_DTOR(CompositableChild);
}

} // namespace layers
} // namespace mozilla
#endif // if 0

#endif // ifndef PCompositableChild_h
