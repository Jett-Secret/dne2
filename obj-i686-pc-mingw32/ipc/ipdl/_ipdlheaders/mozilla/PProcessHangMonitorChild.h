//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PProcessHangMonitorChild_h
#define PProcessHangMonitorChild_h

#include "mozilla/PProcessHangMonitor.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

// Headers for things that cannot be forward declared
#include "base/process.h"
#include "mozilla/dom/ipc/IdType.h"

namespace mozilla {


class PProcessHangMonitorChild :
    public mozilla::ipc::IToplevelProtocol
{
protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::HangData HangData;
    typedef mozilla::PluginHangData PluginHangData;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::SlowScriptData SlowScriptData;
    typedef mozilla::dom::TabId TabId;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;

    typedef PProcessHangMonitor::State State;

    virtual bool
    RecvTerminateScript() = 0;
    virtual bool
    RecvBeginStartingDebugger() = 0;
    virtual bool
    RecvEndStartingDebugger() = 0;
    virtual bool
    RecvForcePaint(
            const TabId& tabId,
            const uint64_t& aLayerObserverEpoch) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

    virtual void
    ProcessingError(
            Result aCode,
            const char* aReason);
    virtual bool
    ShouldContinueFromReplyTimeout();
    virtual void
    EnteredCxxStack();
    virtual void
    ExitedCxxStack();
    virtual void
    EnteredCall();
    virtual void
    ExitedCall();

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PProcessHangMonitorChild();

    virtual ~PProcessHangMonitorChild();

    PProcessHangMonitor::State
    state();

    bool
    SendHangEvidence(const HangData& data);

    bool
    SendClearHang();

    virtual MessageChannel*
    GetIPCChannel();
    virtual const MessageChannel*
    GetIPCChannel() const;
    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

    void
    OnChannelClose();

    void
    OnChannelError();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    virtual void
    DeallocPProcessHangMonitorChild();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const HangData& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            HangData* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PluginHangData& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            PluginHangData* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const SlowScriptData& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            SlowScriptData* v__,
            const Message* msg__,
            PickleIterator* iter__);

    Channel mChannel;
    State mState;
};


} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
class ProcessHangMonitorChild :
    public PProcessHangMonitorChild
{
    virtual bool
    RecvTerminateScript();

    virtual bool
    RecvBeginStartingDebugger();

    virtual bool
    RecvEndStartingDebugger();

    virtual bool
    RecvForcePaint(
            const TabId& tabId,
            const uint64_t& aLayerObserverEpoch);

    MOZ_IMPLICIT ProcessHangMonitorChild();
    virtual ~ProcessHangMonitorChild();
};
} // namespace mozilla


// C++ file contents
namespace mozilla {
bool
ProcessHangMonitorChild::RecvTerminateScript()
{
    return false;
}

bool
ProcessHangMonitorChild::RecvBeginStartingDebugger()
{
    return false;
}

bool
ProcessHangMonitorChild::RecvEndStartingDebugger()
{
    return false;
}

bool
ProcessHangMonitorChild::RecvForcePaint(
        const TabId& tabId,
        const uint64_t& aLayerObserverEpoch)
{
    return false;
}

MOZ_IMPLICIT ProcessHangMonitorChild::ProcessHangMonitorChild()
{
    MOZ_COUNT_CTOR(ProcessHangMonitorChild);
}

MOZ_IMPLICIT ProcessHangMonitorChild::~ProcessHangMonitorChild()
{
    MOZ_COUNT_DTOR(ProcessHangMonitorChild);
}

} // namespace mozilla
#endif // if 0

#endif // ifndef PProcessHangMonitorChild_h
