//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PMediaParent_h
#define PMediaParent_h

#include "mozilla/media/PMedia.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla
namespace mozilla {
namespace dom {
class PContentChild;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {
class PContentParent;
} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace media {


class PMediaParent :
    public mozilla::ipc::IProtocol
{
    friend class mozilla::dom::PContentParent;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::dom::PContentParent PContentParent;
    typedef mozilla::dom::PContentChild PContentChild;

    typedef PMedia::State State;

    virtual bool
    RecvGetOriginKey(
            const uint32_t& aRequestId,
            const nsCString& aOrigin,
            const bool& aPrivateBrowsing,
            const bool& aPersist) = 0;
    virtual bool
    RecvSanitizeOriginKeys(
            const uint64_t& aSinceWhen,
            const bool& aOnlyPrivateBrowsing) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason aWhy) = 0;

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PMediaParent();

    virtual ~PMediaParent();

    PContentParent*
    Manager() const;

    PMedia::State
    state();

    MOZ_MUST_USE bool
    SendGetOriginKeyResponse(
            const uint32_t& aRequestId,
            const nsCString& key);

    MOZ_MUST_USE static bool
    Send__delete__(PMediaParent* actor);

    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const PMediaParent* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PMediaParent** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    State mState;
};


} // namespace media
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace media {
class MediaParent :
    public PMediaParent
{
    virtual bool
    RecvGetOriginKey(
            const uint32_t& aRequestId,
            const nsCString& aOrigin,
            const bool& aPrivateBrowsing,
            const bool& aPersist);

    virtual bool
    RecvSanitizeOriginKeys(
            const uint64_t& aSinceWhen,
            const bool& aOnlyPrivateBrowsing);

    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

    MOZ_IMPLICIT MediaParent();
    virtual ~MediaParent();
};
} // namespace media
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace media {
bool
MediaParent::RecvGetOriginKey(
        const uint32_t& aRequestId,
        const nsCString& aOrigin,
        const bool& aPrivateBrowsing,
        const bool& aPersist)
{
    return false;
}

bool
MediaParent::RecvSanitizeOriginKeys(
        const uint64_t& aSinceWhen,
        const bool& aOnlyPrivateBrowsing)
{
    return false;
}

void
MediaParent::ActorDestroy(ActorDestroyReason aWhy)
{
}

MOZ_IMPLICIT MediaParent::MediaParent()
{
    MOZ_COUNT_CTOR(MediaParent);
}

MOZ_IMPLICIT MediaParent::~MediaParent()
{
    MOZ_COUNT_DTOR(MediaParent);
}

} // namespace media
} // namespace mozilla
#endif // if 0

#endif // ifndef PMediaParent_h
