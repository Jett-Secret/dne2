//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginScriptableObjectChild_h
#define PPluginScriptableObjectChild_h

#include "mozilla/plugins/PPluginScriptableObject.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

namespace mozilla {
namespace plugins {
class PPluginInstanceChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginInstanceParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginInstanceChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
struct void_t;
} // namespace mozilla

namespace mozilla {
struct null_t;
} // namespace mozilla

namespace mozilla {
namespace plugins {


class PPluginScriptableObjectChild :
    public mozilla::ipc::IProtocol
{
    friend class mozilla::plugins::PPluginInstanceChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::PluginIdentifier PluginIdentifier;
    typedef mozilla::plugins::PluginTag PluginTag;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::plugins::Variant Variant;
    typedef mozilla::null_t null_t;
    typedef mozilla::void_t void_t;
    typedef mozilla::plugins::PPluginInstanceChild PPluginInstanceChild;
    typedef mozilla::plugins::PPluginInstanceParent PPluginInstanceParent;

    typedef PPluginScriptableObject::State State;

    virtual bool
    Recv__delete__();
    virtual bool
    AnswerInvalidate() = 0;
    virtual bool
    AnswerHasMethod(
            const PluginIdentifier& aId,
            bool* aHasMethod) = 0;
    virtual bool
    AnswerInvoke(
            const PluginIdentifier& aId,
            nsTArray<Variant>&& aArgs,
            Variant* aResult,
            bool* aSuccess) = 0;
    virtual bool
    AnswerInvokeDefault(
            nsTArray<Variant>&& aArgs,
            Variant* aResult,
            bool* aSuccess) = 0;
    virtual bool
    AnswerHasProperty(
            const PluginIdentifier& aId,
            bool* aHasProperty) = 0;
    virtual bool
    AnswerSetProperty(
            const PluginIdentifier& aId,
            const Variant& aValue,
            bool* aSuccess) = 0;
    virtual bool
    AnswerRemoveProperty(
            const PluginIdentifier& aId,
            bool* aSuccess) = 0;
    virtual bool
    AnswerEnumerate(
            nsTArray<PluginIdentifier>* aProperties,
            bool* aSuccess) = 0;
    virtual bool
    AnswerConstruct(
            nsTArray<Variant>&& aArgs,
            Variant* aResult,
            bool* aSuccess) = 0;
    virtual bool
    RecvProtect() = 0;
    virtual bool
    RecvUnprotect() = 0;
    virtual bool
    AnswerGetChildProperty(
            const PluginIdentifier& aId,
            bool* aHasProperty,
            bool* aHasMethod,
            Variant* aResult,
            bool* aSuccess) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PPluginScriptableObjectChild();

    virtual ~PPluginScriptableObjectChild();

    PPluginInstanceChild*
    Manager() const;

    PPluginScriptableObject::State
    state();

    static bool
    Send__delete__(PPluginScriptableObjectChild* actor);

    bool
    CallNPN_Evaluate(
            const nsCString& aScript,
            Variant* aResult,
            bool* aSuccess);

    bool
    CallHasMethod(
            const PluginIdentifier& aId,
            bool* aHasMethod);

    bool
    CallInvoke(
            const PluginIdentifier& aId,
            const nsTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess);

    bool
    CallInvokeDefault(
            const nsTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess);

    bool
    CallHasProperty(
            const PluginIdentifier& aId,
            bool* aHasProperty);

    bool
    CallSetProperty(
            const PluginIdentifier& aId,
            const Variant& aValue,
            bool* aSuccess);

    bool
    CallRemoveProperty(
            const PluginIdentifier& aId,
            bool* aSuccess);

    bool
    CallEnumerate(
            nsTArray<PluginIdentifier>* aProperties,
            bool* aSuccess);

    bool
    CallConstruct(
            const nsTArray<Variant>& aArgs,
            Variant* aResult,
            bool* aSuccess);

    bool
    SendProtect();

    bool
    SendUnprotect();

    bool
    CallGetParentProperty(
            const PluginIdentifier& aId,
            Variant* aResult,
            bool* aSuccess);

    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const nsTArray<PluginIdentifier>& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            nsTArray<PluginIdentifier>* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const nsTArray<Variant>& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            nsTArray<Variant>* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PPluginScriptableObjectChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PPluginScriptableObjectChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const PluginIdentifier& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            PluginIdentifier* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const Variant& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            Variant* v__,
            const Message* msg__,
            PickleIterator* iter__);

    State mState;
};


} // namespace plugins
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace plugins {
class PluginScriptableObjectChild :
    public PPluginScriptableObjectChild
{
    virtual bool
    AnswerInvalidate();

    virtual bool
    AnswerHasMethod(
            const PluginIdentifier& aId,
            bool* aHasMethod);

    virtual bool
    AnswerInvoke(
            const PluginIdentifier& aId,
            nsTArray<Variant>&& aArgs,
            Variant* aResult,
            bool* aSuccess);

    virtual bool
    AnswerInvokeDefault(
            nsTArray<Variant>&& aArgs,
            Variant* aResult,
            bool* aSuccess);

    virtual bool
    AnswerHasProperty(
            const PluginIdentifier& aId,
            bool* aHasProperty);

    virtual bool
    AnswerSetProperty(
            const PluginIdentifier& aId,
            const Variant& aValue,
            bool* aSuccess);

    virtual bool
    AnswerRemoveProperty(
            const PluginIdentifier& aId,
            bool* aSuccess);

    virtual bool
    AnswerEnumerate(
            nsTArray<PluginIdentifier>* aProperties,
            bool* aSuccess);

    virtual bool
    AnswerConstruct(
            nsTArray<Variant>&& aArgs,
            Variant* aResult,
            bool* aSuccess);

    virtual bool
    RecvProtect();

    virtual bool
    RecvUnprotect();

    virtual bool
    AnswerGetChildProperty(
            const PluginIdentifier& aId,
            bool* aHasProperty,
            bool* aHasMethod,
            Variant* aResult,
            bool* aSuccess);

    MOZ_IMPLICIT PluginScriptableObjectChild();
    virtual ~PluginScriptableObjectChild();
};
} // namespace plugins
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace plugins {
bool
PluginScriptableObjectChild::AnswerInvalidate()
{
    return false;
}

bool
PluginScriptableObjectChild::AnswerHasMethod(
        const PluginIdentifier& aId,
        bool* aHasMethod)
{
    return false;
}

bool
PluginScriptableObjectChild::AnswerInvoke(
        const PluginIdentifier& aId,
        nsTArray<Variant>&& aArgs,
        Variant* aResult,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectChild::AnswerInvokeDefault(
        nsTArray<Variant>&& aArgs,
        Variant* aResult,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectChild::AnswerHasProperty(
        const PluginIdentifier& aId,
        bool* aHasProperty)
{
    return false;
}

bool
PluginScriptableObjectChild::AnswerSetProperty(
        const PluginIdentifier& aId,
        const Variant& aValue,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectChild::AnswerRemoveProperty(
        const PluginIdentifier& aId,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectChild::AnswerEnumerate(
        nsTArray<PluginIdentifier>* aProperties,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectChild::AnswerConstruct(
        nsTArray<Variant>&& aArgs,
        Variant* aResult,
        bool* aSuccess)
{
    return false;
}

bool
PluginScriptableObjectChild::RecvProtect()
{
    return false;
}

bool
PluginScriptableObjectChild::RecvUnprotect()
{
    return false;
}

bool
PluginScriptableObjectChild::AnswerGetChildProperty(
        const PluginIdentifier& aId,
        bool* aHasProperty,
        bool* aHasMethod,
        Variant* aResult,
        bool* aSuccess)
{
    return false;
}

MOZ_IMPLICIT PluginScriptableObjectChild::PluginScriptableObjectChild()
{
    MOZ_COUNT_CTOR(PluginScriptableObjectChild);
}

MOZ_IMPLICIT PluginScriptableObjectChild::~PluginScriptableObjectChild()
{
    MOZ_COUNT_DTOR(PluginScriptableObjectChild);
}

} // namespace plugins
} // namespace mozilla
#endif // if 0

#endif // ifndef PPluginScriptableObjectChild_h
