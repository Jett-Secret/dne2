//
// Automatically generated by ipdlc.
// Edit at your own risk
//

#ifndef PPluginInstanceChild_h
#define PPluginInstanceChild_h

#include "mozilla/plugins/PPluginInstance.h"
#ifdef DEBUG
#include "prenv.h"
#endif // DEBUG
#include "base/id_map.h"
#include "mozilla/ipc/MessageChannel.h"

// Headers for things that cannot be forward declared
#include "gfxTypes.h"
#include "gfxipc/ShadowLayerUtils.h"
#include "ipc/IPCMessageUtils.h"
#include "mozilla/GfxMessageUtils.h"
#include "mozilla/gfx/2D.h"
#include "mozilla/gfx/Types.h"
#include "mozilla/plugins/PluginMessageUtils.h"
#include "npapi.h"
#include "nsRect.h"

namespace mozilla {
namespace plugins {
class PPluginBackgroundDestroyerChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginBackgroundDestroyerParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginModuleChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginModuleParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginScriptableObjectParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PBrowserStreamChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PBrowserStreamParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginStreamChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginStreamParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PStreamNotifyChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PStreamNotifyParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginSurfaceChild;
} // namespace plugins
} // namespace mozilla
namespace mozilla {
namespace plugins {
class PPluginSurfaceParent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginStreamChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginSurfaceChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginBackgroundDestroyerChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PBrowserStreamChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginModuleChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PStreamNotifyChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
class PPluginScriptableObjectChild;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
struct NPRemoteWindow;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
namespace plugins {
struct NPRemoteEvent;
} // namespace plugins
} // namespace mozilla

namespace mozilla {
struct null_t;
} // namespace mozilla

struct DxgiAdapterDesc;

namespace mozilla {
namespace widget {
struct CandidateWindowPosition;
} // namespace widget
} // namespace mozilla

namespace mozilla {
class NativeEventData;
} // namespace mozilla

namespace mozilla {
namespace plugins {


class PPluginInstanceChild :
    public mozilla::ipc::IProtocol
{
    friend class mozilla::plugins::PPluginStreamChild;

    friend class mozilla::plugins::PPluginSurfaceChild;

    friend class mozilla::plugins::PPluginBackgroundDestroyerChild;

    friend class mozilla::plugins::PBrowserStreamChild;

    friend class mozilla::plugins::PPluginModuleChild;

    friend class mozilla::plugins::PStreamNotifyChild;

    friend class mozilla::plugins::PPluginScriptableObjectChild;

protected:
    typedef mozilla::ipc::ActorHandle ActorHandle;
    typedef mozilla::widget::CandidateWindowPosition CandidateWindowPosition;
    template<class FooSide> using Endpoint = mozilla::ipc::Endpoint<FooSide>;
    typedef mozilla::ipc::FileDescriptor FileDescriptor;
    typedef mozilla::plugins::IOSurfaceDescriptor IOSurfaceDescriptor;
    typedef mozilla::gfx::IntRect IntRect;
    typedef mozilla::gfx::IntSize IntSize;
    typedef mozilla::plugins::NPRemoteEvent NPRemoteEvent;
    typedef mozilla::plugins::NPRemoteWindow NPRemoteWindow;
    typedef mozilla::NativeEventData NativeEventData;
    typedef mozilla::plugins::NativeWindowHandle NativeWindowHandle;
    typedef mozilla::plugins::OptionalShmem OptionalShmem;
    typedef base::ProcessId ProcessId;
    typedef mozilla::ipc::ProtocolId ProtocolId;
    typedef mozilla::ipc::Shmem Shmem;
    typedef mozilla::plugins::SurfaceDescriptor SurfaceDescriptor;
    typedef mozilla::layers::SurfaceDescriptorX11 SurfaceDescriptorX11;
    typedef mozilla::gfx::SurfaceFormat SurfaceFormat;
    typedef mozilla::ipc::Transport Transport;
    typedef mozilla::ipc::TransportDescriptor TransportDescriptor;
    typedef mozilla::WindowsHandle WindowsHandle;
    typedef mozilla::plugins::WindowsSharedMemoryHandle WindowsSharedMemoryHandle;
    typedef mozilla::null_t null_t;
    typedef mozilla::plugins::PPluginBackgroundDestroyerChild PPluginBackgroundDestroyerChild;
    typedef mozilla::plugins::PPluginBackgroundDestroyerParent PPluginBackgroundDestroyerParent;
    typedef mozilla::plugins::PPluginModuleChild PPluginModuleChild;
    typedef mozilla::plugins::PPluginModuleParent PPluginModuleParent;
    typedef mozilla::plugins::PPluginScriptableObjectChild PPluginScriptableObjectChild;
    typedef mozilla::plugins::PPluginScriptableObjectParent PPluginScriptableObjectParent;
    typedef mozilla::plugins::PBrowserStreamChild PBrowserStreamChild;
    typedef mozilla::plugins::PBrowserStreamParent PBrowserStreamParent;
    typedef mozilla::plugins::PPluginStreamChild PPluginStreamChild;
    typedef mozilla::plugins::PPluginStreamParent PPluginStreamParent;
    typedef mozilla::plugins::PStreamNotifyChild PStreamNotifyChild;
    typedef mozilla::plugins::PStreamNotifyParent PStreamNotifyParent;
    typedef mozilla::plugins::PPluginSurfaceChild PPluginSurfaceChild;
    typedef mozilla::plugins::PPluginSurfaceParent PPluginSurfaceParent;

    typedef PPluginInstance::State State;

    virtual bool
    Answer__delete__();
    virtual bool
    AnswerCreateChildPluginWindow(NativeWindowHandle* childPluginWindow) = 0;
    virtual bool
    RecvCreateChildPopupSurrogate(const NativeWindowHandle& netscapeWindow) = 0;
    virtual bool
    AnswerNPP_SetWindow(const NPRemoteWindow& window) = 0;
    virtual bool
    AnswerNPP_GetValue_NPPVpluginWantsAllNetworkStreams(
            bool* value,
            NPError* result) = 0;
    virtual bool
    AnswerNPP_GetValue_NPPVpluginNeedsXEmbed(
            bool* value,
            NPError* result) = 0;
    virtual bool
    AnswerNPP_GetValue_NPPVpluginScriptableNPObject(
            PPluginScriptableObjectChild** value,
            NPError* result) = 0;
    virtual bool
    AnswerNPP_SetValue_NPNVprivateModeBool(
            const bool& value,
            NPError* result) = 0;
    virtual bool
    AnswerNPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(
            nsCString* plug_id,
            NPError* result) = 0;
    virtual bool
    AnswerNPP_SetValue_NPNVCSSZoomFactor(
            const double& value,
            NPError* result) = 0;
    virtual bool
    AnswerNPP_SetValue_NPNVmuteAudioBool(
            const bool& muted,
            NPError* result) = 0;
    virtual bool
    AnswerNPP_HandleEvent(
            const NPRemoteEvent& event,
            int16_t* handled) = 0;
    virtual bool
    AnswerNPP_HandleEvent_Shmem(
            const NPRemoteEvent& event,
            Shmem&& buffer,
            int16_t* handled,
            Shmem* rtnbuffer) = 0;
    virtual bool
    AnswerNPP_HandleEvent_IOSurface(
            const NPRemoteEvent& event,
            const uint32_t& surfaceid,
            int16_t* handled) = 0;
    virtual bool
    AnswerPaint(
            const NPRemoteEvent& event,
            int16_t* handled) = 0;
    virtual bool
    RecvWindowPosChanged(const NPRemoteEvent& event) = 0;
    virtual bool
    RecvContentsScaleFactorChanged(const double& aContentsScaleFactor) = 0;
    virtual bool
    RecvAsyncSetWindow(
            const gfxSurfaceType& surfaceType,
            const NPRemoteWindow& window) = 0;
    virtual bool
    RecvUpdateBackground(
            const SurfaceDescriptor& background,
            const nsIntRect& rect) = 0;
    virtual bool
    RecvNPP_DidComposite() = 0;
    virtual bool
    AnswerNPP_Destroy(NPError* rv) = 0;
    virtual bool
    RecvHandledWindowedPluginKeyEvent(
            const NativeEventData& aKeyEventData,
            const bool& aIsConsumed) = 0;
    virtual bool
    RecvPPluginScriptableObjectConstructor(PPluginScriptableObjectChild* actor);
    virtual bool
    RecvPBrowserStreamConstructor(
            PBrowserStreamChild* actor,
            const nsCString& url,
            const uint32_t& length,
            const uint32_t& lastmodified,
            PStreamNotifyChild* notifyData,
            const nsCString& headers);
    virtual bool
    AnswerNPP_NewStream(
            PBrowserStreamChild* actor,
            const nsCString& mimeType,
            const bool& seekable,
            NPError* rv,
            uint16_t* stype) = 0;
    virtual bool
    RecvAsyncNPP_NewStream(
            PBrowserStreamChild* actor,
            const nsCString& mimeType,
            const bool& seekable) = 0;
    virtual bool
    AnswerSetPluginFocus() = 0;
    virtual bool
    AnswerUpdateWindow() = 0;
    virtual bool
    RecvPPluginBackgroundDestroyerConstructor(PPluginBackgroundDestroyerChild* actor);
    virtual PStreamNotifyChild*
    AllocPStreamNotifyChild(
            const nsCString& url,
            const nsCString& target,
            const bool& post,
            const nsCString& buffer,
            const bool& file,
            NPError* result) = 0;
    virtual bool
    DeallocPStreamNotifyChild(PStreamNotifyChild* aActor) = 0;
    virtual PPluginSurfaceChild*
    AllocPPluginSurfaceChild(
            const WindowsSharedMemoryHandle& handle,
            const IntSize& size,
            const bool& transparent) = 0;
    virtual bool
    DeallocPPluginSurfaceChild(PPluginSurfaceChild* aActor) = 0;
    virtual PPluginScriptableObjectChild*
    AllocPPluginScriptableObjectChild() = 0;
    virtual bool
    DeallocPPluginScriptableObjectChild(PPluginScriptableObjectChild* aActor) = 0;
    virtual PBrowserStreamChild*
    AllocPBrowserStreamChild(
            const nsCString& url,
            const uint32_t& length,
            const uint32_t& lastmodified,
            PStreamNotifyChild* notifyData,
            const nsCString& headers) = 0;
    virtual bool
    DeallocPBrowserStreamChild(PBrowserStreamChild* aActor) = 0;
    virtual PPluginStreamChild*
    AllocPPluginStreamChild(
            const nsCString& mimeType,
            const nsCString& target,
            NPError* result) = 0;
    virtual bool
    DeallocPPluginStreamChild(PPluginStreamChild* aActor) = 0;
    virtual PPluginBackgroundDestroyerChild*
    AllocPPluginBackgroundDestroyerChild() = 0;
    virtual bool
    DeallocPPluginBackgroundDestroyerChild(PPluginBackgroundDestroyerChild* aActor) = 0;

    virtual void
    ActorDestroy(ActorDestroyReason aWhy);

public:
    typedef mozilla::ipc::IProtocol ProtocolBase;
    typedef IPC::Message Message;
    typedef mozilla::ipc::MessageChannel Channel;
    typedef mozilla::ipc::IProtocol ChannelListener;
    typedef base::ProcessHandle ProcessHandle;
    typedef mozilla::ipc::MessageChannel MessageChannel;
    typedef mozilla::ipc::SharedMemory SharedMemory;
    typedef mozilla::ipc::Trigger Trigger;

public:
    MOZ_IMPLICIT PPluginInstanceChild();

    virtual ~PPluginInstanceChild();

    PPluginModuleChild*
    Manager() const;

    void
    ManagedPPluginBackgroundDestroyerChild(nsTArray<PPluginBackgroundDestroyerChild*>& aArr) const;
    const ManagedContainer<PPluginBackgroundDestroyerChild>&
    ManagedPPluginBackgroundDestroyerChild() const;

    void
    ManagedPPluginScriptableObjectChild(nsTArray<PPluginScriptableObjectChild*>& aArr) const;
    const ManagedContainer<PPluginScriptableObjectChild>&
    ManagedPPluginScriptableObjectChild() const;

    void
    ManagedPBrowserStreamChild(nsTArray<PBrowserStreamChild*>& aArr) const;
    const ManagedContainer<PBrowserStreamChild>&
    ManagedPBrowserStreamChild() const;

    void
    ManagedPPluginStreamChild(nsTArray<PPluginStreamChild*>& aArr) const;
    const ManagedContainer<PPluginStreamChild>&
    ManagedPPluginStreamChild() const;

    void
    ManagedPStreamNotifyChild(nsTArray<PStreamNotifyChild*>& aArr) const;
    const ManagedContainer<PStreamNotifyChild>&
    ManagedPStreamNotifyChild() const;

    void
    ManagedPPluginSurfaceChild(nsTArray<PPluginSurfaceChild*>& aArr) const;
    const ManagedContainer<PPluginSurfaceChild>&
    ManagedPPluginSurfaceChild() const;

    PPluginInstance::State
    state();

    bool
    CallNPN_GetValue_NPNVWindowNPObject(
            PPluginScriptableObjectChild** value,
            NPError* result);

    bool
    CallNPN_GetValue_NPNVPluginElementNPObject(
            PPluginScriptableObjectChild** value,
            NPError* result);

    bool
    CallNPN_GetValue_NPNVprivateModeBool(
            bool* value,
            NPError* result);

    bool
    CallNPN_GetValue_NPNVnetscapeWindow(
            NativeWindowHandle* value,
            NPError* result);

    bool
    CallNPN_GetValue_NPNVdocumentOrigin(
            nsCString* value,
            NPError* result);

    bool
    CallNPN_GetValue_DrawingModelSupport(
            const NPNVariable& model,
            bool* value);

    bool
    CallNPN_GetValue_SupportsAsyncBitmapSurface(bool* value);

    bool
    CallNPN_GetValue_SupportsAsyncDXGISurface(bool* value);

    bool
    CallNPN_GetValue_PreferredDXGIAdapter(DxgiAdapterDesc* desc);

    bool
    CallNPN_SetValue_NPPVpluginWindow(
            const bool& windowed,
            NPError* result);

    bool
    CallNPN_SetValue_NPPVpluginTransparent(
            const bool& transparent,
            NPError* result);

    bool
    CallNPN_SetValue_NPPVpluginUsesDOMForCursor(
            const bool& useDOMForCursor,
            NPError* result);

    bool
    CallNPN_SetValue_NPPVpluginDrawingModel(
            const int& drawingModel,
            NPError* result);

    bool
    CallNPN_SetValue_NPPVpluginEventModel(
            const int& eventModel,
            NPError* result);

    bool
    CallNPN_SetValue_NPPVpluginIsPlayingAudio(
            const bool& isAudioPlaying,
            NPError* result);

    bool
    CallNPN_GetURL(
            const nsCString& url,
            const nsCString& target,
            NPError* result);

    bool
    CallNPN_PostURL(
            const nsCString& url,
            const nsCString& target,
            const nsCString& buffer,
            const bool& file,
            NPError* result);

    PStreamNotifyChild*
    CallPStreamNotifyConstructor(
            const nsCString& url,
            const nsCString& target,
            const bool& post,
            const nsCString& buffer,
            const bool& file,
            NPError* result);

    PStreamNotifyChild*
    CallPStreamNotifyConstructor(
            PStreamNotifyChild* actor,
            const nsCString& url,
            const nsCString& target,
            const bool& post,
            const nsCString& buffer,
            const bool& file,
            NPError* result);

    bool
    SendNPN_InvalidateRect(const NPRect& rect);

    bool
    SendRevokeCurrentDirectSurface();

    bool
    SendInitDXGISurface(
            const SurfaceFormat& format,
            const IntSize& size,
            WindowsHandle* handle,
            NPError* result);

    bool
    SendFinalizeDXGISurface(const WindowsHandle& handle);

    bool
    SendShowDirectBitmap(
            Shmem& buffer,
            const SurfaceFormat& format,
            const uint32_t& stride,
            const IntSize& size,
            const IntRect& dirty);

    bool
    SendShowDirectDXGISurface(
            const WindowsHandle& handle,
            const IntRect& dirty);

    bool
    SendShow(
            const NPRect& updatedRect,
            const SurfaceDescriptor& newSurface,
            SurfaceDescriptor* prevSurface);

    PPluginSurfaceChild*
    SendPPluginSurfaceConstructor(
            const WindowsSharedMemoryHandle& handle,
            const IntSize& size,
            const bool& transparent);

    PPluginSurfaceChild*
    SendPPluginSurfaceConstructor(
            PPluginSurfaceChild* actor,
            const WindowsSharedMemoryHandle& handle,
            const IntSize& size,
            const bool& transparent);

    bool
    CallNPN_PushPopupsEnabledState(const bool& aState);

    bool
    CallNPN_PopPopupsEnabledState();

    bool
    CallNPN_GetValueForURL(
            const NPNURLVariable& variable,
            const nsCString& url,
            nsCString* value,
            NPError* result);

    bool
    CallNPN_SetValueForURL(
            const NPNURLVariable& variable,
            const nsCString& url,
            const nsCString& value,
            NPError* result);

    bool
    CallNPN_GetAuthenticationInfo(
            const nsCString& protocol_,
            const nsCString& host,
            const int32_t& port,
            const nsCString& scheme,
            const nsCString& realm,
            nsCString* username,
            nsCString* password,
            NPError* result);

    bool
    CallNPN_ConvertPoint(
            const double& sourceX,
            const bool& ignoreDestX,
            const double& sourceY,
            const bool& ignoreDestY,
            const NPCoordinateSpace& sourceSpace,
            const NPCoordinateSpace& destSpace,
            double* destX,
            double* destY,
            bool* result);

    bool
    SendRedrawPlugin();

    bool
    SendNegotiatedCarbon();

    bool
    SendAsyncNPP_NewResult(const NPError& aResult);

    bool
    SendSetNetscapeWindowAsParent(const NativeWindowHandle& childWindow);

    bool
    SendGetCompositionString(
            const uint32_t& aType,
            nsTArray<uint8_t>* aDist,
            int32_t* aLength);

    bool
    SendSetCandidateWindow(const CandidateWindowPosition& aPosition);

    bool
    SendRequestCommitOrCancel(const bool& aCommitted);

    bool
    SendOnWindowedPluginKeyEvent(const NativeEventData& aKeyEventData);

    PPluginScriptableObjectChild*
    SendPPluginScriptableObjectConstructor();

    PPluginScriptableObjectChild*
    SendPPluginScriptableObjectConstructor(PPluginScriptableObjectChild* actor);

    PPluginStreamChild*
    CallPPluginStreamConstructor(
            const nsCString& mimeType,
            const nsCString& target,
            NPError* result);

    PPluginStreamChild*
    CallPPluginStreamConstructor(
            PPluginStreamChild* actor,
            const nsCString& mimeType,
            const nsCString& target,
            NPError* result);

    bool
    CallPluginFocusChange(const bool& gotFocus);

    virtual void
    RemoveManagee(
            int32_t aProtocolId,
            ProtocolBase* aListener);

    virtual Result
    OnMessageReceived(const Message& msg__);

    virtual Result
    OnMessageReceived(
            const Message& msg__,
            Message*& reply__);

    virtual Result
    OnCallReceived(
            const Message& msg__,
            Message*& reply__);

    int32_t
    GetProtocolTypeId();

private:
    virtual const char*
    ProtocolName() const;

    void
    DestroySubtree(ActorDestroyReason why);

    void
    DeallocSubtree();

    template<typename T>
    void
    Write(
            const T& v__,
            Message* msg__)
    {
        IPC::WriteParam(msg__, v__);
    }

    template<typename T>
    bool
    Read(
            T* v__,
            const Message* msg__,
            PickleIterator* iter__)
    {
        return IPC::ReadParam(msg__, iter__, v__);
    }

    void
    Write(
            const SurfaceDescriptor& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            SurfaceDescriptor* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PPluginStreamChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PPluginStreamChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            Shmem& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            Shmem* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PPluginSurfaceChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PPluginSurfaceChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const PPluginBackgroundDestroyerChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PPluginBackgroundDestroyerChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const IOSurfaceDescriptor& v__,
            Message* msg__);

    MOZ_MUST_USE bool
    Read(
            IOSurfaceDescriptor* v__,
            const Message* msg__,
            PickleIterator* iter__);

    void
    Write(
            const PBrowserStreamChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PBrowserStreamChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const PPluginInstanceChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PPluginInstanceChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const PStreamNotifyChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PStreamNotifyChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    void
    Write(
            const PPluginScriptableObjectChild* v__,
            Message* msg__,
            bool nullable__);

    MOZ_MUST_USE bool
    Read(
            PPluginScriptableObjectChild** v__,
            const Message* msg__,
            PickleIterator* iter__,
            bool nullable__);

    State mState;
    ManagedContainer<PPluginBackgroundDestroyerChild> mManagedPPluginBackgroundDestroyerChild;
    ManagedContainer<PPluginScriptableObjectChild> mManagedPPluginScriptableObjectChild;
    ManagedContainer<PBrowserStreamChild> mManagedPBrowserStreamChild;
    ManagedContainer<PPluginStreamChild> mManagedPPluginStreamChild;
    ManagedContainer<PStreamNotifyChild> mManagedPStreamNotifyChild;
    ManagedContainer<PPluginSurfaceChild> mManagedPPluginSurfaceChild;
};


} // namespace plugins
} // namespace mozilla

#if 0

//-----------------------------------------------------------------------------
// Skeleton implementation of abstract actor class

// Header file contents
namespace mozilla {
namespace plugins {
class PluginInstanceChild :
    public PPluginInstanceChild
{
    virtual bool
    AnswerCreateChildPluginWindow(NativeWindowHandle* childPluginWindow);

    virtual bool
    RecvCreateChildPopupSurrogate(const NativeWindowHandle& netscapeWindow);

    virtual bool
    AnswerNPP_SetWindow(const NPRemoteWindow& window);

    virtual bool
    AnswerNPP_GetValue_NPPVpluginWantsAllNetworkStreams(
            bool* value,
            NPError* result);

    virtual bool
    AnswerNPP_GetValue_NPPVpluginNeedsXEmbed(
            bool* value,
            NPError* result);

    virtual bool
    AnswerNPP_GetValue_NPPVpluginScriptableNPObject(
            PPluginScriptableObjectChild** value,
            NPError* result);

    virtual bool
    AnswerNPP_SetValue_NPNVprivateModeBool(
            const bool& value,
            NPError* result);

    virtual bool
    AnswerNPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(
            nsCString* plug_id,
            NPError* result);

    virtual bool
    AnswerNPP_SetValue_NPNVCSSZoomFactor(
            const double& value,
            NPError* result);

    virtual bool
    AnswerNPP_SetValue_NPNVmuteAudioBool(
            const bool& muted,
            NPError* result);

    virtual bool
    AnswerNPP_HandleEvent(
            const NPRemoteEvent& event,
            int16_t* handled);

    virtual bool
    AnswerNPP_HandleEvent_Shmem(
            const NPRemoteEvent& event,
            Shmem&& buffer,
            int16_t* handled,
            Shmem* rtnbuffer);

    virtual bool
    AnswerNPP_HandleEvent_IOSurface(
            const NPRemoteEvent& event,
            const uint32_t& surfaceid,
            int16_t* handled);

    virtual bool
    AnswerPaint(
            const NPRemoteEvent& event,
            int16_t* handled);

    virtual bool
    RecvWindowPosChanged(const NPRemoteEvent& event);

    virtual bool
    RecvContentsScaleFactorChanged(const double& aContentsScaleFactor);

    virtual bool
    RecvAsyncSetWindow(
            const gfxSurfaceType& surfaceType,
            const NPRemoteWindow& window);

    virtual bool
    RecvUpdateBackground(
            const SurfaceDescriptor& background,
            const nsIntRect& rect);

    virtual bool
    RecvNPP_DidComposite();

    virtual bool
    AnswerNPP_Destroy(NPError* rv);

    virtual bool
    RecvHandledWindowedPluginKeyEvent(
            const NativeEventData& aKeyEventData,
            const bool& aIsConsumed);

    virtual bool
    AnswerNPP_NewStream(
            PBrowserStreamChild* actor,
            const nsCString& mimeType,
            const bool& seekable,
            NPError* rv,
            uint16_t* stype);

    virtual bool
    RecvAsyncNPP_NewStream(
            PBrowserStreamChild* actor,
            const nsCString& mimeType,
            const bool& seekable);

    virtual bool
    AnswerSetPluginFocus();

    virtual bool
    AnswerUpdateWindow();

    virtual PStreamNotifyChild*
    AllocPStreamNotifyChild(
            const nsCString& url,
            const nsCString& target,
            const bool& post,
            const nsCString& buffer,
            const bool& file,
            NPError* result);

    virtual bool
    DeallocPStreamNotifyChild(PStreamNotifyChild* aActor);

    virtual PPluginSurfaceChild*
    AllocPPluginSurfaceChild(
            const WindowsSharedMemoryHandle& handle,
            const IntSize& size,
            const bool& transparent);

    virtual bool
    DeallocPPluginSurfaceChild(PPluginSurfaceChild* aActor);

    virtual PPluginScriptableObjectChild*
    AllocPPluginScriptableObjectChild();

    virtual bool
    DeallocPPluginScriptableObjectChild(PPluginScriptableObjectChild* aActor);

    virtual PBrowserStreamChild*
    AllocPBrowserStreamChild(
            const nsCString& url,
            const uint32_t& length,
            const uint32_t& lastmodified,
            PStreamNotifyChild* notifyData,
            const nsCString& headers);

    virtual bool
    DeallocPBrowserStreamChild(PBrowserStreamChild* aActor);

    virtual PPluginStreamChild*
    AllocPPluginStreamChild(
            const nsCString& mimeType,
            const nsCString& target,
            NPError* result);

    virtual bool
    DeallocPPluginStreamChild(PPluginStreamChild* aActor);

    virtual PPluginBackgroundDestroyerChild*
    AllocPPluginBackgroundDestroyerChild();

    virtual bool
    DeallocPPluginBackgroundDestroyerChild(PPluginBackgroundDestroyerChild* aActor);

    MOZ_IMPLICIT PluginInstanceChild();
    virtual ~PluginInstanceChild();
};
} // namespace plugins
} // namespace mozilla


// C++ file contents
namespace mozilla {
namespace plugins {
bool
PluginInstanceChild::AnswerCreateChildPluginWindow(NativeWindowHandle* childPluginWindow)
{
    return false;
}

bool
PluginInstanceChild::RecvCreateChildPopupSurrogate(const NativeWindowHandle& netscapeWindow)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_SetWindow(const NPRemoteWindow& window)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_GetValue_NPPVpluginWantsAllNetworkStreams(
        bool* value,
        NPError* result)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_GetValue_NPPVpluginNeedsXEmbed(
        bool* value,
        NPError* result)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_GetValue_NPPVpluginScriptableNPObject(
        PPluginScriptableObjectChild** value,
        NPError* result)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_SetValue_NPNVprivateModeBool(
        const bool& value,
        NPError* result)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_GetValue_NPPVpluginNativeAccessibleAtkPlugId(
        nsCString* plug_id,
        NPError* result)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_SetValue_NPNVCSSZoomFactor(
        const double& value,
        NPError* result)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_SetValue_NPNVmuteAudioBool(
        const bool& muted,
        NPError* result)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_HandleEvent(
        const NPRemoteEvent& event,
        int16_t* handled)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_HandleEvent_Shmem(
        const NPRemoteEvent& event,
        Shmem&& buffer,
        int16_t* handled,
        Shmem* rtnbuffer)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_HandleEvent_IOSurface(
        const NPRemoteEvent& event,
        const uint32_t& surfaceid,
        int16_t* handled)
{
    return false;
}

bool
PluginInstanceChild::AnswerPaint(
        const NPRemoteEvent& event,
        int16_t* handled)
{
    return false;
}

bool
PluginInstanceChild::RecvWindowPosChanged(const NPRemoteEvent& event)
{
    return false;
}

bool
PluginInstanceChild::RecvContentsScaleFactorChanged(const double& aContentsScaleFactor)
{
    return false;
}

bool
PluginInstanceChild::RecvAsyncSetWindow(
        const gfxSurfaceType& surfaceType,
        const NPRemoteWindow& window)
{
    return false;
}

bool
PluginInstanceChild::RecvUpdateBackground(
        const SurfaceDescriptor& background,
        const nsIntRect& rect)
{
    return false;
}

bool
PluginInstanceChild::RecvNPP_DidComposite()
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_Destroy(NPError* rv)
{
    return false;
}

bool
PluginInstanceChild::RecvHandledWindowedPluginKeyEvent(
        const NativeEventData& aKeyEventData,
        const bool& aIsConsumed)
{
    return false;
}

bool
PluginInstanceChild::AnswerNPP_NewStream(
        PBrowserStreamChild* actor,
        const nsCString& mimeType,
        const bool& seekable,
        NPError* rv,
        uint16_t* stype)
{
    return false;
}

bool
PluginInstanceChild::RecvAsyncNPP_NewStream(
        PBrowserStreamChild* actor,
        const nsCString& mimeType,
        const bool& seekable)
{
    return false;
}

bool
PluginInstanceChild::AnswerSetPluginFocus()
{
    return false;
}

bool
PluginInstanceChild::AnswerUpdateWindow()
{
    return false;
}

PStreamNotifyChild*
PluginInstanceChild::AllocPStreamNotifyChild(
        const nsCString& url,
        const nsCString& target,
        const bool& post,
        const nsCString& buffer,
        const bool& file,
        NPError* result)
{
    return 0;
}

bool
PluginInstanceChild::DeallocPStreamNotifyChild(PStreamNotifyChild* aActor)
{
    return false;
}

PPluginSurfaceChild*
PluginInstanceChild::AllocPPluginSurfaceChild(
        const WindowsSharedMemoryHandle& handle,
        const IntSize& size,
        const bool& transparent)
{
    return 0;
}

bool
PluginInstanceChild::DeallocPPluginSurfaceChild(PPluginSurfaceChild* aActor)
{
    return false;
}

PPluginScriptableObjectChild*
PluginInstanceChild::AllocPPluginScriptableObjectChild()
{
    return 0;
}

bool
PluginInstanceChild::DeallocPPluginScriptableObjectChild(PPluginScriptableObjectChild* aActor)
{
    return false;
}

PBrowserStreamChild*
PluginInstanceChild::AllocPBrowserStreamChild(
        const nsCString& url,
        const uint32_t& length,
        const uint32_t& lastmodified,
        PStreamNotifyChild* notifyData,
        const nsCString& headers)
{
    return 0;
}

bool
PluginInstanceChild::DeallocPBrowserStreamChild(PBrowserStreamChild* aActor)
{
    return false;
}

PPluginStreamChild*
PluginInstanceChild::AllocPPluginStreamChild(
        const nsCString& mimeType,
        const nsCString& target,
        NPError* result)
{
    return 0;
}

bool
PluginInstanceChild::DeallocPPluginStreamChild(PPluginStreamChild* aActor)
{
    return false;
}

PPluginBackgroundDestroyerChild*
PluginInstanceChild::AllocPPluginBackgroundDestroyerChild()
{
    return 0;
}

bool
PluginInstanceChild::DeallocPPluginBackgroundDestroyerChild(PPluginBackgroundDestroyerChild* aActor)
{
    return false;
}

MOZ_IMPLICIT PluginInstanceChild::PluginInstanceChild()
{
    MOZ_COUNT_CTOR(PluginInstanceChild);
}

MOZ_IMPLICIT PluginInstanceChild::~PluginInstanceChild()
{
    MOZ_COUNT_DTOR(PluginInstanceChild);
}

} // namespace plugins
} // namespace mozilla
#endif // if 0

#endif // ifndef PPluginInstanceChild_h
