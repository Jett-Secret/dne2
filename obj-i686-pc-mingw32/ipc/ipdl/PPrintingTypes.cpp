//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/embedding/PPrintingTypes.h"


//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct CStringKeyValue|
//
namespace mozilla {
namespace embedding {
MOZ_IMPLICIT CStringKeyValue::CStringKeyValue() :
    key_(),
    value_()
{
    Init();
}

CStringKeyValue::~CStringKeyValue()
{
}

auto CStringKeyValue::operator==(const CStringKeyValue& _o) const -> bool
{
    if ((!((key()) == ((_o).key())))) {
        return false;
    }
    if ((!((value()) == ((_o).value())))) {
        return false;
    }
    return true;
}

auto CStringKeyValue::Init() -> void
{
}

auto CStringKeyValue::Assign(
        const nsCString& _key,
        const nsCString& _value) -> void
{
    key_ = _key;
    value_ = _value;
}

} // namespace embedding
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct PrintData|
//
namespace mozilla {
namespace embedding {
MOZ_IMPLICIT PrintData::PrintData() :
    startPageRange_(),
    endPageRange_(),
    edgeTop_(),
    edgeLeft_(),
    edgeBottom_(),
    edgeRight_(),
    marginTop_(),
    marginLeft_(),
    marginBottom_(),
    marginRight_(),
    unwriteableMarginTop_(),
    unwriteableMarginLeft_(),
    unwriteableMarginBottom_(),
    unwriteableMarginRight_(),
    scaling_(),
    printBGColors_(),
    printBGImages_(),
    printRange_(),
    title_(),
    docURL_(),
    headerStrLeft_(),
    headerStrCenter_(),
    headerStrRight_(),
    footerStrLeft_(),
    footerStrCenter_(),
    footerStrRight_(),
    howToEnableFrameUI_(),
    isCancelled_(),
    printFrameTypeUsage_(),
    printFrameType_(),
    printSilent_(),
    shrinkToFit_(),
    showPrintProgress_(),
    paperName_(),
    paperData_(),
    paperWidth_(),
    paperHeight_(),
    paperSizeUnit_(),
    printReversed_(),
    printInColor_(),
    orientation_(),
    numCopies_(),
    printerName_(),
    printToFile_(),
    toFileName_(),
    outputFormat_(),
    printPageDelay_(),
    resolution_(),
    duplex_(),
    isInitializedFromPrinter_(),
    isInitializedFromPrefs_(),
    optionFlags_(),
    driverName_(),
    deviceName_(),
    printableWidthInInches_(),
    printableHeightInInches_(),
    isFramesetDocument_(),
    isFramesetFrameSelected_(),
    isIFrameSelected_(),
    isRangeSelection_(),
    printJobName_(),
    printAllPages_(),
    mustCollate_(),
    disposition_(),
    pagesAcross_(),
    pagesDown_(),
    printTime_(),
    detailedErrorReporting_(),
    faxNumber_(),
    addHeaderAndFooter_(),
    fileNameExtensionHidden_(),
    scalingFactor_(),
    widthScale_(),
    heightScale_(),
    adjustedPaperWidth_(),
    adjustedPaperHeight_()
{
    Init();
}

PrintData::~PrintData()
{
}

auto PrintData::operator==(const PrintData& _o) const -> bool
{
    if ((!((remotePrintJobParent()) == ((_o).remotePrintJobParent())))) {
        return false;
    }
    if ((!((remotePrintJobChild()) == ((_o).remotePrintJobChild())))) {
        return false;
    }
    if ((!((startPageRange()) == ((_o).startPageRange())))) {
        return false;
    }
    if ((!((endPageRange()) == ((_o).endPageRange())))) {
        return false;
    }
    if ((!((edgeTop()) == ((_o).edgeTop())))) {
        return false;
    }
    if ((!((edgeLeft()) == ((_o).edgeLeft())))) {
        return false;
    }
    if ((!((edgeBottom()) == ((_o).edgeBottom())))) {
        return false;
    }
    if ((!((edgeRight()) == ((_o).edgeRight())))) {
        return false;
    }
    if ((!((marginTop()) == ((_o).marginTop())))) {
        return false;
    }
    if ((!((marginLeft()) == ((_o).marginLeft())))) {
        return false;
    }
    if ((!((marginBottom()) == ((_o).marginBottom())))) {
        return false;
    }
    if ((!((marginRight()) == ((_o).marginRight())))) {
        return false;
    }
    if ((!((unwriteableMarginTop()) == ((_o).unwriteableMarginTop())))) {
        return false;
    }
    if ((!((unwriteableMarginLeft()) == ((_o).unwriteableMarginLeft())))) {
        return false;
    }
    if ((!((unwriteableMarginBottom()) == ((_o).unwriteableMarginBottom())))) {
        return false;
    }
    if ((!((unwriteableMarginRight()) == ((_o).unwriteableMarginRight())))) {
        return false;
    }
    if ((!((scaling()) == ((_o).scaling())))) {
        return false;
    }
    if ((!((printBGColors()) == ((_o).printBGColors())))) {
        return false;
    }
    if ((!((printBGImages()) == ((_o).printBGImages())))) {
        return false;
    }
    if ((!((printRange()) == ((_o).printRange())))) {
        return false;
    }
    if ((!((title()) == ((_o).title())))) {
        return false;
    }
    if ((!((docURL()) == ((_o).docURL())))) {
        return false;
    }
    if ((!((headerStrLeft()) == ((_o).headerStrLeft())))) {
        return false;
    }
    if ((!((headerStrCenter()) == ((_o).headerStrCenter())))) {
        return false;
    }
    if ((!((headerStrRight()) == ((_o).headerStrRight())))) {
        return false;
    }
    if ((!((footerStrLeft()) == ((_o).footerStrLeft())))) {
        return false;
    }
    if ((!((footerStrCenter()) == ((_o).footerStrCenter())))) {
        return false;
    }
    if ((!((footerStrRight()) == ((_o).footerStrRight())))) {
        return false;
    }
    if ((!((howToEnableFrameUI()) == ((_o).howToEnableFrameUI())))) {
        return false;
    }
    if ((!((isCancelled()) == ((_o).isCancelled())))) {
        return false;
    }
    if ((!((printFrameTypeUsage()) == ((_o).printFrameTypeUsage())))) {
        return false;
    }
    if ((!((printFrameType()) == ((_o).printFrameType())))) {
        return false;
    }
    if ((!((printSilent()) == ((_o).printSilent())))) {
        return false;
    }
    if ((!((shrinkToFit()) == ((_o).shrinkToFit())))) {
        return false;
    }
    if ((!((showPrintProgress()) == ((_o).showPrintProgress())))) {
        return false;
    }
    if ((!((paperName()) == ((_o).paperName())))) {
        return false;
    }
    if ((!((paperData()) == ((_o).paperData())))) {
        return false;
    }
    if ((!((paperWidth()) == ((_o).paperWidth())))) {
        return false;
    }
    if ((!((paperHeight()) == ((_o).paperHeight())))) {
        return false;
    }
    if ((!((paperSizeUnit()) == ((_o).paperSizeUnit())))) {
        return false;
    }
    if ((!((printReversed()) == ((_o).printReversed())))) {
        return false;
    }
    if ((!((printInColor()) == ((_o).printInColor())))) {
        return false;
    }
    if ((!((orientation()) == ((_o).orientation())))) {
        return false;
    }
    if ((!((numCopies()) == ((_o).numCopies())))) {
        return false;
    }
    if ((!((printerName()) == ((_o).printerName())))) {
        return false;
    }
    if ((!((printToFile()) == ((_o).printToFile())))) {
        return false;
    }
    if ((!((toFileName()) == ((_o).toFileName())))) {
        return false;
    }
    if ((!((outputFormat()) == ((_o).outputFormat())))) {
        return false;
    }
    if ((!((printPageDelay()) == ((_o).printPageDelay())))) {
        return false;
    }
    if ((!((resolution()) == ((_o).resolution())))) {
        return false;
    }
    if ((!((duplex()) == ((_o).duplex())))) {
        return false;
    }
    if ((!((isInitializedFromPrinter()) == ((_o).isInitializedFromPrinter())))) {
        return false;
    }
    if ((!((isInitializedFromPrefs()) == ((_o).isInitializedFromPrefs())))) {
        return false;
    }
    if ((!((optionFlags()) == ((_o).optionFlags())))) {
        return false;
    }
    if ((!((driverName()) == ((_o).driverName())))) {
        return false;
    }
    if ((!((deviceName()) == ((_o).deviceName())))) {
        return false;
    }
    if ((!((printableWidthInInches()) == ((_o).printableWidthInInches())))) {
        return false;
    }
    if ((!((printableHeightInInches()) == ((_o).printableHeightInInches())))) {
        return false;
    }
    if ((!((isFramesetDocument()) == ((_o).isFramesetDocument())))) {
        return false;
    }
    if ((!((isFramesetFrameSelected()) == ((_o).isFramesetFrameSelected())))) {
        return false;
    }
    if ((!((isIFrameSelected()) == ((_o).isIFrameSelected())))) {
        return false;
    }
    if ((!((isRangeSelection()) == ((_o).isRangeSelection())))) {
        return false;
    }
    if ((!((devModeData()) == ((_o).devModeData())))) {
        return false;
    }
    if ((!((GTKPrintSettings()) == ((_o).GTKPrintSettings())))) {
        return false;
    }
    if ((!((printJobName()) == ((_o).printJobName())))) {
        return false;
    }
    if ((!((printAllPages()) == ((_o).printAllPages())))) {
        return false;
    }
    if ((!((mustCollate()) == ((_o).mustCollate())))) {
        return false;
    }
    if ((!((disposition()) == ((_o).disposition())))) {
        return false;
    }
    if ((!((pagesAcross()) == ((_o).pagesAcross())))) {
        return false;
    }
    if ((!((pagesDown()) == ((_o).pagesDown())))) {
        return false;
    }
    if ((!((printTime()) == ((_o).printTime())))) {
        return false;
    }
    if ((!((detailedErrorReporting()) == ((_o).detailedErrorReporting())))) {
        return false;
    }
    if ((!((faxNumber()) == ((_o).faxNumber())))) {
        return false;
    }
    if ((!((addHeaderAndFooter()) == ((_o).addHeaderAndFooter())))) {
        return false;
    }
    if ((!((fileNameExtensionHidden()) == ((_o).fileNameExtensionHidden())))) {
        return false;
    }
    if ((!((scalingFactor()) == ((_o).scalingFactor())))) {
        return false;
    }
    if ((!((widthScale()) == ((_o).widthScale())))) {
        return false;
    }
    if ((!((heightScale()) == ((_o).heightScale())))) {
        return false;
    }
    if ((!((adjustedPaperWidth()) == ((_o).adjustedPaperWidth())))) {
        return false;
    }
    if ((!((adjustedPaperHeight()) == ((_o).adjustedPaperHeight())))) {
        return false;
    }
    return true;
}

auto PrintData::Init() -> void
{
    remotePrintJobParent_ = nullptr;
    remotePrintJobChild_ = nullptr;
}

auto PrintData::Assign(
        PRemotePrintJobParent* _remotePrintJobParent,
        PRemotePrintJobChild* _remotePrintJobChild,
        const int32_t& _startPageRange,
        const int32_t& _endPageRange,
        const double& _edgeTop,
        const double& _edgeLeft,
        const double& _edgeBottom,
        const double& _edgeRight,
        const double& _marginTop,
        const double& _marginLeft,
        const double& _marginBottom,
        const double& _marginRight,
        const double& _unwriteableMarginTop,
        const double& _unwriteableMarginLeft,
        const double& _unwriteableMarginBottom,
        const double& _unwriteableMarginRight,
        const double& _scaling,
        const bool& _printBGColors,
        const bool& _printBGImages,
        const short& _printRange,
        const nsString& _title,
        const nsString& _docURL,
        const nsString& _headerStrLeft,
        const nsString& _headerStrCenter,
        const nsString& _headerStrRight,
        const nsString& _footerStrLeft,
        const nsString& _footerStrCenter,
        const nsString& _footerStrRight,
        const short& _howToEnableFrameUI,
        const bool& _isCancelled,
        const short& _printFrameTypeUsage,
        const short& _printFrameType,
        const bool& _printSilent,
        const bool& _shrinkToFit,
        const bool& _showPrintProgress,
        const nsString& _paperName,
        const short& _paperData,
        const double& _paperWidth,
        const double& _paperHeight,
        const short& _paperSizeUnit,
        const bool& _printReversed,
        const bool& _printInColor,
        const int32_t& _orientation,
        const int32_t& _numCopies,
        const nsString& _printerName,
        const bool& _printToFile,
        const nsString& _toFileName,
        const short& _outputFormat,
        const int32_t& _printPageDelay,
        const int32_t& _resolution,
        const int32_t& _duplex,
        const bool& _isInitializedFromPrinter,
        const bool& _isInitializedFromPrefs,
        const int32_t& _optionFlags,
        const nsString& _driverName,
        const nsString& _deviceName,
        const double& _printableWidthInInches,
        const double& _printableHeightInInches,
        const bool& _isFramesetDocument,
        const bool& _isFramesetFrameSelected,
        const bool& _isIFrameSelected,
        const bool& _isRangeSelection,
        const nsTArray<uint8_t>& _devModeData,
        const nsTArray<CStringKeyValue>& _GTKPrintSettings,
        const nsString& _printJobName,
        const bool& _printAllPages,
        const bool& _mustCollate,
        const nsString& _disposition,
        const short& _pagesAcross,
        const short& _pagesDown,
        const double& _printTime,
        const bool& _detailedErrorReporting,
        const nsString& _faxNumber,
        const bool& _addHeaderAndFooter,
        const bool& _fileNameExtensionHidden,
        const float& _scalingFactor,
        const float& _widthScale,
        const float& _heightScale,
        const double& _adjustedPaperWidth,
        const double& _adjustedPaperHeight) -> void
{
    remotePrintJobParent_ = _remotePrintJobParent;
    remotePrintJobChild_ = _remotePrintJobChild;
    startPageRange_ = _startPageRange;
    endPageRange_ = _endPageRange;
    edgeTop_ = _edgeTop;
    edgeLeft_ = _edgeLeft;
    edgeBottom_ = _edgeBottom;
    edgeRight_ = _edgeRight;
    marginTop_ = _marginTop;
    marginLeft_ = _marginLeft;
    marginBottom_ = _marginBottom;
    marginRight_ = _marginRight;
    unwriteableMarginTop_ = _unwriteableMarginTop;
    unwriteableMarginLeft_ = _unwriteableMarginLeft;
    unwriteableMarginBottom_ = _unwriteableMarginBottom;
    unwriteableMarginRight_ = _unwriteableMarginRight;
    scaling_ = _scaling;
    printBGColors_ = _printBGColors;
    printBGImages_ = _printBGImages;
    printRange_ = _printRange;
    title_ = _title;
    docURL_ = _docURL;
    headerStrLeft_ = _headerStrLeft;
    headerStrCenter_ = _headerStrCenter;
    headerStrRight_ = _headerStrRight;
    footerStrLeft_ = _footerStrLeft;
    footerStrCenter_ = _footerStrCenter;
    footerStrRight_ = _footerStrRight;
    howToEnableFrameUI_ = _howToEnableFrameUI;
    isCancelled_ = _isCancelled;
    printFrameTypeUsage_ = _printFrameTypeUsage;
    printFrameType_ = _printFrameType;
    printSilent_ = _printSilent;
    shrinkToFit_ = _shrinkToFit;
    showPrintProgress_ = _showPrintProgress;
    paperName_ = _paperName;
    paperData_ = _paperData;
    paperWidth_ = _paperWidth;
    paperHeight_ = _paperHeight;
    paperSizeUnit_ = _paperSizeUnit;
    printReversed_ = _printReversed;
    printInColor_ = _printInColor;
    orientation_ = _orientation;
    numCopies_ = _numCopies;
    printerName_ = _printerName;
    printToFile_ = _printToFile;
    toFileName_ = _toFileName;
    outputFormat_ = _outputFormat;
    printPageDelay_ = _printPageDelay;
    resolution_ = _resolution;
    duplex_ = _duplex;
    isInitializedFromPrinter_ = _isInitializedFromPrinter;
    isInitializedFromPrefs_ = _isInitializedFromPrefs;
    optionFlags_ = _optionFlags;
    driverName_ = _driverName;
    deviceName_ = _deviceName;
    printableWidthInInches_ = _printableWidthInInches;
    printableHeightInInches_ = _printableHeightInInches;
    isFramesetDocument_ = _isFramesetDocument;
    isFramesetFrameSelected_ = _isFramesetFrameSelected;
    isIFrameSelected_ = _isIFrameSelected;
    isRangeSelection_ = _isRangeSelection;
    devModeData_ = _devModeData;
    GTKPrintSettings_ = _GTKPrintSettings;
    printJobName_ = _printJobName;
    printAllPages_ = _printAllPages;
    mustCollate_ = _mustCollate;
    disposition_ = _disposition;
    pagesAcross_ = _pagesAcross;
    pagesDown_ = _pagesDown;
    printTime_ = _printTime;
    detailedErrorReporting_ = _detailedErrorReporting;
    faxNumber_ = _faxNumber;
    addHeaderAndFooter_ = _addHeaderAndFooter;
    fileNameExtensionHidden_ = _fileNameExtensionHidden;
    scalingFactor_ = _scalingFactor;
    widthScale_ = _widthScale;
    heightScale_ = _heightScale;
    adjustedPaperWidth_ = _adjustedPaperWidth;
    adjustedPaperHeight_ = _adjustedPaperHeight;
}

} // namespace embedding
} // namespace mozilla
