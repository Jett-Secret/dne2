//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PTCPServerSocketParent.h"

#include "mozilla/net/PNeckoParent.h"
#include "mozilla/net/PTCPSocketParent.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace net {



MOZ_IMPLICIT PTCPServerSocketParent::PTCPServerSocketParent() :
    mozilla::ipc::IProtocol(mozilla::ipc::ParentSide),
    mState(PTCPServerSocket::__Dead)
{
    MOZ_COUNT_CTOR(PTCPServerSocketParent);
}

PTCPServerSocketParent::~PTCPServerSocketParent()
{
    MOZ_COUNT_DTOR(PTCPServerSocketParent);
}

auto PTCPServerSocketParent::Manager() const -> PNeckoParent*
{
    return static_cast<PNeckoParent*>(IProtocol::Manager());
}

auto PTCPServerSocketParent::state() -> PTCPServerSocket::State
{
    return mState;
}

auto PTCPServerSocketParent::SendCallbackAccept(PTCPSocketParent* socket) -> bool
{
    IPC::Message* msg__ = PTCPServerSocket::Msg_CallbackAccept(Id());

    Write(socket, msg__, false);
    // Sentinel = 'socket'
    (msg__)->WriteSentinel(3619774181);




    if (mozilla::ipc::LoggingEnabledFor("PTCPServerSocketParent")) {
        mozilla::ipc::LogMessageForProtocol("PTCPServerSocketParent", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PTCPServerSocket", "Msg_CallbackAccept", js::ProfileEntry::Category::OTHER);
    if ((!(PTCPServerSocket::Transition(Trigger(Trigger::Send, PTCPServerSocket::Msg_CallbackAccept__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PTCPServerSocketParent::Send__delete__(PTCPServerSocketParent* actor) -> bool
{
    if ((!(actor))) {
        return false;
    }

    IPC::Message* msg__ = PTCPServerSocket::Msg___delete__((actor)->Id());

    (actor)->Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);



    if (mozilla::ipc::LoggingEnabledFor("PTCPServerSocketParent")) {
        mozilla::ipc::LogMessageForProtocol("PTCPServerSocketParent", (actor)->OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PTCPServerSocket", "Msg___delete__", js::ProfileEntry::Category::OTHER);
    if ((!(PTCPServerSocket::Transition(Trigger(Trigger::Send, PTCPServerSocket::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = ((actor)->GetIPCChannel())->Send(msg__);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->Manager())->RemoveManagee(PTCPServerSocketMsgStart, actor);
    return sendok__;
}

auto PTCPServerSocketParent::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PTCPServerSocketParent::OnMessageReceived(const Message& msg__) -> PTCPServerSocketParent::Result
{
    switch ((msg__).type()) {
    case PTCPServerSocket::Msg_Close__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPServerSocketParent")) {
                mozilla::ipc::LogMessageForProtocol("PTCPServerSocketParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PTCPServerSocket", "Msg_Close", js::ProfileEntry::Category::OTHER);

            if ((!(PTCPServerSocket::Transition(Trigger(Trigger::Recv, PTCPServerSocket::Msg_Close__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvClose()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPServerSocket::Msg_RequestDelete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PTCPServerSocketParent")) {
                mozilla::ipc::LogMessageForProtocol("PTCPServerSocketParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PTCPServerSocket", "Msg_RequestDelete", js::ProfileEntry::Category::OTHER);

            if ((!(PTCPServerSocket::Transition(Trigger(Trigger::Recv, PTCPServerSocket::Msg_RequestDelete__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvRequestDelete()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PTCPServerSocket::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PTCPServerSocketParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PTCPServerSocketParent::Result
{
    return MsgNotKnown;
}

auto PTCPServerSocketParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PTCPServerSocketParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PTCPServerSocketParent::GetProtocolTypeId() -> int32_t
{
    return PTCPServerSocketMsgStart;
}

auto PTCPServerSocketParent::ProtocolName() const -> const char*
{
    return "PTCPServerSocketParent";
}

auto PTCPServerSocketParent::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PTCPServerSocketParent::DeallocSubtree() -> void
{
}

auto PTCPServerSocketParent::Write(
        const PTCPServerSocketParent* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PTCPServerSocketParent::Read(
        PTCPServerSocketParent** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PTCPServerSocket", PTCPServerSocketMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PTCPServerSocketParent*>((actor).value());
    return true;
}

auto PTCPServerSocketParent::Write(
        const PTCPSocketParent* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PTCPServerSocketParent::Read(
        PTCPSocketParent** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PTCPSocket", PTCPSocketMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PTCPSocketParent*>((actor).value());
    return true;
}



} // namespace net
} // namespace mozilla
