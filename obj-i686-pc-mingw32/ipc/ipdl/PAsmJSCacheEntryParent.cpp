//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/asmjscache/PAsmJSCacheEntryParent.h"

#include "mozilla/ipc/PBackgroundParent.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace dom {
namespace asmjscache {


auto PAsmJSCacheEntryParent::Recv__delete__(const AsmJSCacheResult& result) -> bool
{
    return true;
}


MOZ_IMPLICIT PAsmJSCacheEntryParent::PAsmJSCacheEntryParent() :
    mozilla::ipc::IProtocol(mozilla::ipc::ParentSide),
    mState(PAsmJSCacheEntry::__Dead)
{
    MOZ_COUNT_CTOR(PAsmJSCacheEntryParent);
}

PAsmJSCacheEntryParent::~PAsmJSCacheEntryParent()
{
    MOZ_COUNT_DTOR(PAsmJSCacheEntryParent);
}

auto PAsmJSCacheEntryParent::Manager() const -> PBackgroundParent*
{
    return static_cast<PBackgroundParent*>(IProtocol::Manager());
}

auto PAsmJSCacheEntryParent::state() -> PAsmJSCacheEntry::State
{
    return mState;
}

auto PAsmJSCacheEntryParent::SendOnOpenMetadataForRead(const Metadata& metadata) -> bool
{
    IPC::Message* msg__ = PAsmJSCacheEntry::Msg_OnOpenMetadataForRead(Id());

    Write(metadata, msg__);
    // Sentinel = 'metadata'
    (msg__)->WriteSentinel(541737151);




    if (mozilla::ipc::LoggingEnabledFor("PAsmJSCacheEntryParent")) {
        mozilla::ipc::LogMessageForProtocol("PAsmJSCacheEntryParent", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PAsmJSCacheEntry", "Msg_OnOpenMetadataForRead", js::ProfileEntry::Category::OTHER);
    if ((!(PAsmJSCacheEntry::Transition(Trigger(Trigger::Send, PAsmJSCacheEntry::Msg_OnOpenMetadataForRead__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PAsmJSCacheEntryParent::SendOnOpenCacheFile(
        const int64_t& fileSize,
        const FileDescriptor& fileDesc) -> bool
{
    IPC::Message* msg__ = PAsmJSCacheEntry::Msg_OnOpenCacheFile(Id());

    Write(fileSize, msg__);
    // Sentinel = 'fileSize'
    (msg__)->WriteSentinel(76219605);
    Write(fileDesc, msg__);
    // Sentinel = 'fileDesc'
    (msg__)->WriteSentinel(4281913877);




    if (mozilla::ipc::LoggingEnabledFor("PAsmJSCacheEntryParent")) {
        mozilla::ipc::LogMessageForProtocol("PAsmJSCacheEntryParent", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PAsmJSCacheEntry", "Msg_OnOpenCacheFile", js::ProfileEntry::Category::OTHER);
    if ((!(PAsmJSCacheEntry::Transition(Trigger(Trigger::Send, PAsmJSCacheEntry::Msg_OnOpenCacheFile__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PAsmJSCacheEntryParent::Send__delete__(
        PAsmJSCacheEntryParent* actor,
        const AsmJSCacheResult& result) -> bool
{
    if ((!(actor))) {
        return false;
    }

    IPC::Message* msg__ = PAsmJSCacheEntry::Msg___delete__((actor)->Id());

    (actor)->Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);
    (actor)->Write(result, msg__);
    // Sentinel = 'result'
    (msg__)->WriteSentinel(3991766165);



    if (mozilla::ipc::LoggingEnabledFor("PAsmJSCacheEntryParent")) {
        mozilla::ipc::LogMessageForProtocol("PAsmJSCacheEntryParent", (actor)->OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PAsmJSCacheEntry", "Msg___delete__", js::ProfileEntry::Category::OTHER);
    if ((!(PAsmJSCacheEntry::Transition(Trigger(Trigger::Send, PAsmJSCacheEntry::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = ((actor)->GetIPCChannel())->Send(msg__);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->Manager())->RemoveManagee(PAsmJSCacheEntryMsgStart, actor);
    return sendok__;
}

auto PAsmJSCacheEntryParent::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PAsmJSCacheEntryParent::OnMessageReceived(const Message& msg__) -> PAsmJSCacheEntryParent::Result
{
    switch ((msg__).type()) {
    case PAsmJSCacheEntry::Msg_SelectCacheFileToRead__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAsmJSCacheEntryParent")) {
                mozilla::ipc::LogMessageForProtocol("PAsmJSCacheEntryParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PAsmJSCacheEntry", "Msg_SelectCacheFileToRead", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            uint32_t moduleIndex;

            if ((!(Read((&(moduleIndex)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'moduleIndex'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 457002823)))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PAsmJSCacheEntry::Transition(Trigger(Trigger::Recv, PAsmJSCacheEntry::Msg_SelectCacheFileToRead__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvSelectCacheFileToRead(mozilla::Move(moduleIndex))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAsmJSCacheEntry::Msg_CacheMiss__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAsmJSCacheEntryParent")) {
                mozilla::ipc::LogMessageForProtocol("PAsmJSCacheEntryParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PAsmJSCacheEntry", "Msg_CacheMiss", js::ProfileEntry::Category::OTHER);

            if ((!(PAsmJSCacheEntry::Transition(Trigger(Trigger::Recv, PAsmJSCacheEntry::Msg_CacheMiss__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvCacheMiss()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PAsmJSCacheEntry::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    case PAsmJSCacheEntry::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PAsmJSCacheEntryParent")) {
                mozilla::ipc::LogMessageForProtocol("PAsmJSCacheEntryParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PAsmJSCacheEntry", "Msg___delete__", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            PAsmJSCacheEntryParent* actor;
            AsmJSCacheResult result;

            if ((!(Read((&(actor)), (&(msg__)), (&(iter__)), false)))) {
                FatalError("Error deserializing 'PAsmJSCacheEntryParent'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 875202478)))) {
                FatalError("Error deserializing 'PAsmJSCacheEntryParent'");
                return MsgValueError;
            }
            if ((!(Read((&(result)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'AsmJSCacheResult'");
                return MsgValueError;
            }
            // Sentinel = 'result'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3991766165)))) {
                FatalError("Error deserializing 'AsmJSCacheResult'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PAsmJSCacheEntry::Transition(Trigger(Trigger::Recv, PAsmJSCacheEntry::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__(mozilla::Move(result))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }


            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->Manager())->RemoveManagee(PAsmJSCacheEntryMsgStart, actor);

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PAsmJSCacheEntryParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PAsmJSCacheEntryParent::Result
{
    return MsgNotKnown;
}

auto PAsmJSCacheEntryParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PAsmJSCacheEntryParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PAsmJSCacheEntryParent::GetProtocolTypeId() -> int32_t
{
    return PAsmJSCacheEntryMsgStart;
}

auto PAsmJSCacheEntryParent::ProtocolName() const -> const char*
{
    return "PAsmJSCacheEntryParent";
}

auto PAsmJSCacheEntryParent::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PAsmJSCacheEntryParent::DeallocSubtree() -> void
{
}

auto PAsmJSCacheEntryParent::Write(
        const FileDescriptor& v__,
        Message* msg__) -> void
{
    FileDescriptor::PickleType pfd = (v__).ShareTo(FileDescriptor::IPDLPrivate(), OtherPid());
    IPC::WriteParam(msg__, pfd);
}

auto PAsmJSCacheEntryParent::Read(
        FileDescriptor* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    FileDescriptor::PickleType pfd;
    if ((!(IPC::ReadParam(msg__, iter__, (&(pfd)))))) {
        return false;
    }

    FileDescriptor fd = FileDescriptor(FileDescriptor::IPDLPrivate(), pfd);
    if ((!((fd).IsValid()))) {
        mozilla::ipc::ProtocolErrorBreakpoint("[PAsmJSCacheEntryParent] Received an invalid file descriptor!");
    }

    (*(v__)) = fd;
    return true;
}

auto PAsmJSCacheEntryParent::Write(
        const PAsmJSCacheEntryParent* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PAsmJSCacheEntryParent::Read(
        PAsmJSCacheEntryParent** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PAsmJSCacheEntry", PAsmJSCacheEntryMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PAsmJSCacheEntryParent*>((actor).value());
    return true;
}



} // namespace asmjscache
} // namespace dom
} // namespace mozilla
