//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/PBrowser.h"

namespace mozilla {
namespace dom {
namespace PBrowser {

nsresult
CreateEndpoints(
        base::ProcessId aParentDestPid,
        base::ProcessId aChildDestPid,
        mozilla::ipc::Endpoint<mozilla::dom::PBrowserParent>* aParent,
        mozilla::ipc::Endpoint<mozilla::dom::PBrowserChild>* aChild)
{
    return mozilla::ipc::CreateEndpoints(mozilla::ipc::PrivateIPDLInterface(), aParentDestPid, aChildDestPid, PBrowserMsgStart, PBrowserMsgStartChild, aParent, aChild);
}
bool
Transition(
        mozilla::ipc::Trigger trigger,
        State* next)
{
    State from = (*(next));
    switch (from) {
    case __Null:
    case __Error:
        if ((Msg___delete____ID) == ((trigger).mMessage)) {
            (*(next)) = __Dead;
            return true;
        }
        return (__Null) == (from);
    case __Dead:
        mozilla::ipc::LogicError("__delete__()d actor");
        return false;
    case __Dying:
        mozilla::ipc::LogicError("__delete__()d (and unexpectedly dying) actor");
        return false;
    default:
        mozilla::ipc::LogicError("corrupted actor state");
        return false;
    }
}
IPC::Message*
Msg_AsyncMessage(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_AsyncMessage__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_AsyncMessage");
}
IPC::Message*
Msg_PRenderFrameConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_PRenderFrameConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_PRenderFrameConstructor");
}
IPC::Message*
Reply_PRenderFrameConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_PRenderFrameConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_PRenderFrameConstructor");
}
IPC::Message*
Msg_PDocAccessibleConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_PDocAccessibleConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_PDocAccessibleConstructor");
}
IPC::Message*
Reply_PDocAccessibleConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_PDocAccessibleConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_PDocAccessibleConstructor");
}
IPC::Message*
Msg_PPluginWidgetConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_PPluginWidgetConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_PPluginWidgetConstructor");
}
IPC::Message*
Reply_PPluginWidgetConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_PPluginWidgetConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_PPluginWidgetConstructor");
}
IPC::Message*
Msg_GetWidgetNativeData(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_GetWidgetNativeData__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_GetWidgetNativeData");
}
IPC::Message*
Reply_GetWidgetNativeData(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_GetWidgetNativeData__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_GetWidgetNativeData");
}
IPC::Message*
Msg_SetNativeChildOfShareableWindow(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetNativeChildOfShareableWindow__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetNativeChildOfShareableWindow");
}
IPC::Message*
Msg_DispatchFocusToTopLevelWindow(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_DispatchFocusToTopLevelWindow__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_DispatchFocusToTopLevelWindow");
}
IPC::Message*
Reply_DispatchFocusToTopLevelWindow(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_DispatchFocusToTopLevelWindow__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_DispatchFocusToTopLevelWindow");
}
IPC::Message*
Msg_MoveFocus(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_MoveFocus__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_MoveFocus");
}
IPC::Message*
Msg_SizeShellTo(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SizeShellTo__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SizeShellTo");
}
IPC::Message*
Msg_DropLinks(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_DropLinks__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_DropLinks");
}
IPC::Message*
Msg_Event(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_Event__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_Event");
}
IPC::Message*
Msg_SyncMessage(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SyncMessage__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SyncMessage");
}
IPC::Message*
Reply_SyncMessage(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_SyncMessage__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_SyncMessage");
}
IPC::Message*
Msg_RpcMessage(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RpcMessage__ID, IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RpcMessage");
}
IPC::Message*
Reply_RpcMessage(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_RpcMessage__ID, IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_RpcMessage");
}
IPC::Message*
Msg_NotifyIMEFocus(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NotifyIMEFocus__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NotifyIMEFocus");
}
IPC::Message*
Reply_NotifyIMEFocus(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_NotifyIMEFocus__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_NotifyIMEFocus");
}
IPC::Message*
Msg_NotifyIMETextChange(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NotifyIMETextChange__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NotifyIMETextChange");
}
IPC::Message*
Msg_NotifyIMECompositionUpdate(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NotifyIMECompositionUpdate__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NotifyIMECompositionUpdate");
}
IPC::Message*
Msg_NotifyIMESelection(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NotifyIMESelection__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NotifyIMESelection");
}
IPC::Message*
Msg_UpdateContentCache(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_UpdateContentCache__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_UpdateContentCache");
}
IPC::Message*
Msg_NotifyIMEMouseButtonEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NotifyIMEMouseButtonEvent__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NotifyIMEMouseButtonEvent");
}
IPC::Message*
Reply_NotifyIMEMouseButtonEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_NotifyIMEMouseButtonEvent__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_NotifyIMEMouseButtonEvent");
}
IPC::Message*
Msg_NotifyIMEPositionChange(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NotifyIMEPositionChange__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NotifyIMEPositionChange");
}
IPC::Message*
Msg_RequestIMEToCommitComposition(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RequestIMEToCommitComposition__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RequestIMEToCommitComposition");
}
IPC::Message*
Reply_RequestIMEToCommitComposition(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_RequestIMEToCommitComposition__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_RequestIMEToCommitComposition");
}
IPC::Message*
Msg_OnEventNeedingAckHandled(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_OnEventNeedingAckHandled__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_OnEventNeedingAckHandled");
}
IPC::Message*
Msg_StartPluginIME(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_StartPluginIME__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_StartPluginIME");
}
IPC::Message*
Reply_StartPluginIME(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_StartPluginIME__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_StartPluginIME");
}
IPC::Message*
Msg_SetPluginFocused(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetPluginFocused__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetPluginFocused");
}
IPC::Message*
Msg_SetCandidateWindowForPlugin(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetCandidateWindowForPlugin__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetCandidateWindowForPlugin");
}
IPC::Message*
Msg_OnWindowedPluginKeyEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_OnWindowedPluginKeyEvent__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_OnWindowedPluginKeyEvent");
}
IPC::Message*
Msg_DefaultProcOfPluginEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_DefaultProcOfPluginEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_DefaultProcOfPluginEvent");
}
IPC::Message*
Msg_RequestFocus(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RequestFocus__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RequestFocus");
}
IPC::Message*
Msg_EnableDisableCommands(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_EnableDisableCommands__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_EnableDisableCommands");
}
IPC::Message*
Msg_GetInputContext(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_GetInputContext__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_GetInputContext");
}
IPC::Message*
Reply_GetInputContext(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_GetInputContext__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_GetInputContext");
}
IPC::Message*
Msg_SetInputContext(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetInputContext__ID, IPC::Message::NESTED_INSIDE_CPOW, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetInputContext");
}
IPC::Message*
Msg_IsParentWindowMainWidgetVisible(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_IsParentWindowMainWidgetVisible__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_IsParentWindowMainWidgetVisible");
}
IPC::Message*
Reply_IsParentWindowMainWidgetVisible(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_IsParentWindowMainWidgetVisible__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_IsParentWindowMainWidgetVisible");
}
IPC::Message*
Msg_GetDPI(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_GetDPI__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_GetDPI");
}
IPC::Message*
Reply_GetDPI(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_GetDPI__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_GetDPI");
}
IPC::Message*
Msg_GetDefaultScale(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_GetDefaultScale__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_GetDefaultScale");
}
IPC::Message*
Reply_GetDefaultScale(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_GetDefaultScale__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_GetDefaultScale");
}
IPC::Message*
Msg_GetWidgetRounding(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_GetWidgetRounding__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_GetWidgetRounding");
}
IPC::Message*
Reply_GetWidgetRounding(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_GetWidgetRounding__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_GetWidgetRounding");
}
IPC::Message*
Msg_GetMaxTouchPoints(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_GetMaxTouchPoints__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_GetMaxTouchPoints");
}
IPC::Message*
Reply_GetMaxTouchPoints(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_GetMaxTouchPoints__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_GetMaxTouchPoints");
}
IPC::Message*
Msg_SetCursor(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetCursor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetCursor");
}
IPC::Message*
Msg_SetCustomCursor(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetCustomCursor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetCustomCursor");
}
IPC::Message*
Msg_SetStatus(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetStatus__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetStatus");
}
IPC::Message*
Msg_ShowTooltip(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_ShowTooltip__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_ShowTooltip");
}
IPC::Message*
Msg_HideTooltip(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_HideTooltip__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_HideTooltip");
}
IPC::Message*
Msg_PColorPickerConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_PColorPickerConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_PColorPickerConstructor");
}
IPC::Message*
Reply_PColorPickerConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_PColorPickerConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_PColorPickerConstructor");
}
IPC::Message*
Msg_PFilePickerConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_PFilePickerConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_PFilePickerConstructor");
}
IPC::Message*
Reply_PFilePickerConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_PFilePickerConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_PFilePickerConstructor");
}
IPC::Message*
Msg_PIndexedDBPermissionRequestConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_PIndexedDBPermissionRequestConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_PIndexedDBPermissionRequestConstructor");
}
IPC::Message*
Reply_PIndexedDBPermissionRequestConstructor(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_PIndexedDBPermissionRequestConstructor__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_PIndexedDBPermissionRequestConstructor");
}
IPC::Message*
Msg_BrowserFrameOpenWindow(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_BrowserFrameOpenWindow__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_BrowserFrameOpenWindow");
}
IPC::Message*
Reply_BrowserFrameOpenWindow(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_BrowserFrameOpenWindow__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_BrowserFrameOpenWindow");
}
IPC::Message*
Msg_RespondStartSwipeEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RespondStartSwipeEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RespondStartSwipeEvent");
}
IPC::Message*
Msg_AsyncAuthPrompt(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_AsyncAuthPrompt__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_AsyncAuthPrompt");
}
IPC::Message*
Msg_LookUpDictionary(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_LookUpDictionary__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_LookUpDictionary");
}
IPC::Message*
Msg___delete__(int32_t routingId)
{
    return new IPC::Message(routingId, Msg___delete____ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg___delete__");
}
IPC::Message*
Reply___delete__(int32_t routingId)
{
    return new IPC::Message(routingId, Reply___delete____ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply___delete__");
}
IPC::Message*
Msg_ReplyKeyEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_ReplyKeyEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_ReplyKeyEvent");
}
IPC::Message*
Msg_DispatchAfterKeyboardEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_DispatchAfterKeyboardEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_DispatchAfterKeyboardEvent");
}
IPC::Message*
Msg_RequestNativeKeyBindings(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RequestNativeKeyBindings__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RequestNativeKeyBindings");
}
IPC::Message*
Reply_RequestNativeKeyBindings(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_RequestNativeKeyBindings__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_RequestNativeKeyBindings");
}
IPC::Message*
Msg_SynthesizeNativeKeyEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SynthesizeNativeKeyEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SynthesizeNativeKeyEvent");
}
IPC::Message*
Msg_SynthesizeNativeMouseEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SynthesizeNativeMouseEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SynthesizeNativeMouseEvent");
}
IPC::Message*
Msg_SynthesizeNativeMouseMove(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SynthesizeNativeMouseMove__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SynthesizeNativeMouseMove");
}
IPC::Message*
Msg_SynthesizeNativeMouseScrollEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SynthesizeNativeMouseScrollEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SynthesizeNativeMouseScrollEvent");
}
IPC::Message*
Msg_SynthesizeNativeTouchPoint(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SynthesizeNativeTouchPoint__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SynthesizeNativeTouchPoint");
}
IPC::Message*
Msg_SynthesizeNativeTouchTap(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SynthesizeNativeTouchTap__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SynthesizeNativeTouchTap");
}
IPC::Message*
Msg_ClearNativeTouchSequence(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_ClearNativeTouchSequence__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_ClearNativeTouchSequence");
}
IPC::Message*
Msg_GetTabCount(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_GetTabCount__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_GetTabCount");
}
IPC::Message*
Reply_GetTabCount(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_GetTabCount__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_GetTabCount");
}
IPC::Message*
Msg_AccessKeyNotHandled(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_AccessKeyNotHandled__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_AccessKeyNotHandled");
}
IPC::Message*
Msg_NativeSynthesisResponse(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NativeSynthesisResponse__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NativeSynthesisResponse");
}
IPC::Message*
Msg_RemotePaintIsReady(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RemotePaintIsReady__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RemotePaintIsReady");
}
IPC::Message*
Msg_ForcePaintNoOp(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_ForcePaintNoOp__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_ForcePaintNoOp");
}
IPC::Message*
Msg_SetDimensions(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetDimensions__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetDimensions");
}
IPC::Message*
Msg_DispatchWheelEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_DispatchWheelEvent__ID, IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_DispatchWheelEvent");
}
IPC::Message*
Reply_DispatchWheelEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_DispatchWheelEvent__ID, IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_DispatchWheelEvent");
}
IPC::Message*
Msg_DispatchMouseEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_DispatchMouseEvent__ID, IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_DispatchMouseEvent");
}
IPC::Message*
Reply_DispatchMouseEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_DispatchMouseEvent__ID, IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_DispatchMouseEvent");
}
IPC::Message*
Msg_DispatchKeyboardEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_DispatchKeyboardEvent__ID, IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_DispatchKeyboardEvent");
}
IPC::Message*
Reply_DispatchKeyboardEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_DispatchKeyboardEvent__ID, IPC::Message::NESTED_INSIDE_SYNC, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_DispatchKeyboardEvent");
}
IPC::Message*
Msg_InvokeDragSession(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_InvokeDragSession__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_InvokeDragSession");
}
IPC::Message*
Msg_AudioChannelActivityNotification(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_AudioChannelActivityNotification__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_AudioChannelActivityNotification");
}
IPC::Message*
Msg_EnsureLayersConnected(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_EnsureLayersConnected__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_EnsureLayersConnected");
}
IPC::Message*
Reply_EnsureLayersConnected(int32_t routingId)
{
    return new IPC::Message(routingId, Reply_EnsureLayersConnected__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Reply_EnsureLayersConnected");
}
IPC::Message*
Msg_NotifySessionHistoryChange(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NotifySessionHistoryChange__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NotifySessionHistoryChange");
}
IPC::Message*
Msg_RequestCrossBrowserNavigation(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RequestCrossBrowserNavigation__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RequestCrossBrowserNavigation");
}
IPC::Message*
Msg_Show(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_Show__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_Show");
}
IPC::Message*
Msg_LoadURL(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_LoadURL__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_LoadURL");
}
IPC::Message*
Msg_UpdateDimensions(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_UpdateDimensions__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_ALL, "PBrowser::Msg_UpdateDimensions");
}
IPC::Message*
Msg_SizeModeChanged(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SizeModeChanged__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SizeModeChanged");
}
IPC::Message*
Msg_Activate(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_Activate__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_Activate");
}
IPC::Message*
Msg_Deactivate(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_Deactivate__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_Deactivate");
}
IPC::Message*
Msg_ParentActivated(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_ParentActivated__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_ParentActivated");
}
IPC::Message*
Msg_SetKeyboardIndicators(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetKeyboardIndicators__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetKeyboardIndicators");
}
IPC::Message*
Msg_StopIMEStateManagement(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_StopIMEStateManagement__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_StopIMEStateManagement");
}
IPC::Message*
Msg_MenuKeyboardListenerInstalled(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_MenuKeyboardListenerInstalled__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_MenuKeyboardListenerInstalled");
}
IPC::Message*
Msg_MouseEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_MouseEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_MouseEvent");
}
IPC::Message*
Msg_RealMouseMoveEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RealMouseMoveEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_ENABLED, "PBrowser::Msg_RealMouseMoveEvent");
}
IPC::Message*
Msg_SynthMouseMoveEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SynthMouseMoveEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SynthMouseMoveEvent");
}
IPC::Message*
Msg_RealMouseButtonEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RealMouseButtonEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RealMouseButtonEvent");
}
IPC::Message*
Msg_RealKeyEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RealKeyEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RealKeyEvent");
}
IPC::Message*
Msg_MouseWheelEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_MouseWheelEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_MouseWheelEvent");
}
IPC::Message*
Msg_RealTouchEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RealTouchEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RealTouchEvent");
}
IPC::Message*
Msg_HandleTap(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_HandleTap__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_HandleTap");
}
IPC::Message*
Msg_RealTouchMoveEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RealTouchMoveEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RealTouchMoveEvent");
}
IPC::Message*
Msg_RealDragEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RealDragEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RealDragEvent");
}
IPC::Message*
Msg_PluginEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_PluginEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_PluginEvent");
}
IPC::Message*
Msg_KeyEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_KeyEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_KeyEvent");
}
IPC::Message*
Msg_CompositionEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_CompositionEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_CompositionEvent");
}
IPC::Message*
Msg_SelectionEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SelectionEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SelectionEvent");
}
IPC::Message*
Msg_PasteTransferable(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_PasteTransferable__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_PasteTransferable");
}
IPC::Message*
Msg_ActivateFrameEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_ActivateFrameEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_ActivateFrameEvent");
}
IPC::Message*
Msg_LoadRemoteScript(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_LoadRemoteScript__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_LoadRemoteScript");
}
IPC::Message*
Msg_Destroy(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_Destroy__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_Destroy");
}
IPC::Message*
Msg_SetDocShellIsActive(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetDocShellIsActive__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetDocShellIsActive");
}
IPC::Message*
Msg_SuppressDisplayport(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SuppressDisplayport__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SuppressDisplayport");
}
IPC::Message*
Msg_NavigateByKey(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NavigateByKey__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NavigateByKey");
}
IPC::Message*
Msg_RequestNotifyAfterRemotePaint(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_RequestNotifyAfterRemotePaint__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_RequestNotifyAfterRemotePaint");
}
IPC::Message*
Msg_UIResolutionChanged(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_UIResolutionChanged__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_UIResolutionChanged");
}
IPC::Message*
Msg_ThemeChanged(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_ThemeChanged__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_ThemeChanged");
}
IPC::Message*
Msg_SwappedWithOtherRemoteLoader(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SwappedWithOtherRemoteLoader__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SwappedWithOtherRemoteLoader");
}
IPC::Message*
Msg_HandleAccessKey(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_HandleAccessKey__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_HandleAccessKey");
}
IPC::Message*
Msg_AudioChannelChangeNotification(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_AudioChannelChangeNotification__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_AudioChannelChangeNotification");
}
IPC::Message*
Msg_SetUseGlobalHistory(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetUseGlobalHistory__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetUseGlobalHistory");
}
IPC::Message*
Msg_HandledWindowedPluginKeyEvent(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_HandledWindowedPluginKeyEvent__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_HandledWindowedPluginKeyEvent");
}
IPC::Message*
Msg_Print(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_Print__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_Print");
}
IPC::Message*
Msg_UpdateNativeWindowHandle(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_UpdateNativeWindowHandle__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_UpdateNativeWindowHandle");
}
IPC::Message*
Msg_NotifyAttachGroupedSessionHistory(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NotifyAttachGroupedSessionHistory__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NotifyAttachGroupedSessionHistory");
}
IPC::Message*
Msg_NotifyPartialSessionHistoryActive(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NotifyPartialSessionHistoryActive__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NotifyPartialSessionHistoryActive");
}
IPC::Message*
Msg_NotifyPartialSessionHistoryDeactive(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_NotifyPartialSessionHistoryDeactive__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_NotifyPartialSessionHistoryDeactive");
}
IPC::Message*
Msg_SetFreshProcess(int32_t routingId)
{
    return new IPC::Message(routingId, Msg_SetFreshProcess__ID, IPC::Message::NOT_NESTED, IPC::Message::NORMAL_PRIORITY, IPC::Message::COMPRESSION_NONE, "PBrowser::Msg_SetFreshProcess");
}

} // namespace PBrowser
} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct NativeKeyBinding|
//
namespace mozilla {
namespace dom {
MOZ_IMPLICIT NativeKeyBinding::NativeKeyBinding()
{
    Init();
}

NativeKeyBinding::~NativeKeyBinding()
{
}

auto NativeKeyBinding::operator==(const NativeKeyBinding& _o) const -> bool
{
    if ((!((singleLineCommands()) == ((_o).singleLineCommands())))) {
        return false;
    }
    if ((!((multiLineCommands()) == ((_o).multiLineCommands())))) {
        return false;
    }
    if ((!((richTextCommands()) == ((_o).richTextCommands())))) {
        return false;
    }
    return true;
}

auto NativeKeyBinding::Init() -> void
{
}

auto NativeKeyBinding::Assign(
        const nsTArray<CommandInt>& _singleLineCommands,
        const nsTArray<CommandInt>& _multiLineCommands,
        const nsTArray<CommandInt>& _richTextCommands) -> void
{
    singleLineCommands_ = _singleLineCommands;
    multiLineCommands_ = _multiLineCommands;
    richTextCommands_ = _richTextCommands;
}

} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union MaybeNativeKeyBinding|
//
namespace mozilla {
namespace dom {
auto MaybeNativeKeyBinding::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case TNativeKeyBinding:
        {
            (ptr_NativeKeyBinding())->~NativeKeyBinding__tdef();
            break;
        }
    case Tvoid_t:
        {
            (ptr_void_t())->~void_t__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT MaybeNativeKeyBinding::MaybeNativeKeyBinding(const NativeKeyBinding& aOther)
{
    new (mozilla::KnownNotNull, ptr_NativeKeyBinding()) NativeKeyBinding(aOther);
    mType = TNativeKeyBinding;
}

MOZ_IMPLICIT MaybeNativeKeyBinding::MaybeNativeKeyBinding(const void_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(aOther);
    mType = Tvoid_t;
}

MOZ_IMPLICIT MaybeNativeKeyBinding::MaybeNativeKeyBinding(const MaybeNativeKeyBinding& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case TNativeKeyBinding:
        {
            new (mozilla::KnownNotNull, ptr_NativeKeyBinding()) NativeKeyBinding((aOther).get_NativeKeyBinding());
            break;
        }
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t((aOther).get_void_t());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

MaybeNativeKeyBinding::~MaybeNativeKeyBinding()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto MaybeNativeKeyBinding::operator=(const NativeKeyBinding& aRhs) -> MaybeNativeKeyBinding&
{
    if (MaybeDestroy(TNativeKeyBinding)) {
        new (mozilla::KnownNotNull, ptr_NativeKeyBinding()) NativeKeyBinding;
    }
    (*(ptr_NativeKeyBinding())) = aRhs;
    mType = TNativeKeyBinding;
    return (*(this));
}

auto MaybeNativeKeyBinding::operator=(const void_t& aRhs) -> MaybeNativeKeyBinding&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = aRhs;
    mType = Tvoid_t;
    return (*(this));
}

auto MaybeNativeKeyBinding::operator=(const MaybeNativeKeyBinding& aRhs) -> MaybeNativeKeyBinding&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case TNativeKeyBinding:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_NativeKeyBinding()) NativeKeyBinding;
            }
            (*(ptr_NativeKeyBinding())) = (aRhs).get_NativeKeyBinding();
            break;
        }
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = (aRhs).get_void_t();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto MaybeNativeKeyBinding::operator==(const NativeKeyBinding& aRhs) const -> bool
{
    return (get_NativeKeyBinding()) == (aRhs);
}

auto MaybeNativeKeyBinding::operator==(const void_t& aRhs) const -> bool
{
    return (get_void_t()) == (aRhs);
}

auto MaybeNativeKeyBinding::operator==(const MaybeNativeKeyBinding& aRhs) const -> bool
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case TNativeKeyBinding:
        {
            return (get_NativeKeyBinding()) == ((aRhs).get_NativeKeyBinding());
        }
    case Tvoid_t:
        {
            return (get_void_t()) == ((aRhs).get_void_t());
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return false;
        }
    }
}

auto MaybeNativeKeyBinding::get(NativeKeyBinding* aOutValue) const -> void
{
    (*(aOutValue)) = get_NativeKeyBinding();
}

auto MaybeNativeKeyBinding::get(void_t* aOutValue) const -> void
{
    (*(aOutValue)) = get_void_t();
}

} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |struct ShowInfo|
//
namespace mozilla {
namespace dom {
MOZ_IMPLICIT ShowInfo::ShowInfo() :
    name_(),
    fullscreenAllowed_(),
    isPrivate_(),
    fakeShowInfo_(),
    isTransparent_(),
    dpi_(),
    widgetRounding_(),
    defaultScale_()
{
    Init();
}

ShowInfo::~ShowInfo()
{
}

auto ShowInfo::operator==(const ShowInfo& _o) const -> bool
{
    if ((!((name()) == ((_o).name())))) {
        return false;
    }
    if ((!((fullscreenAllowed()) == ((_o).fullscreenAllowed())))) {
        return false;
    }
    if ((!((isPrivate()) == ((_o).isPrivate())))) {
        return false;
    }
    if ((!((fakeShowInfo()) == ((_o).fakeShowInfo())))) {
        return false;
    }
    if ((!((isTransparent()) == ((_o).isTransparent())))) {
        return false;
    }
    if ((!((dpi()) == ((_o).dpi())))) {
        return false;
    }
    if ((!((widgetRounding()) == ((_o).widgetRounding())))) {
        return false;
    }
    if ((!((defaultScale()) == ((_o).defaultScale())))) {
        return false;
    }
    return true;
}

auto ShowInfo::Init() -> void
{
}

auto ShowInfo::Assign(
        const nsString& _name,
        const bool& _fullscreenAllowed,
        const bool& _isPrivate,
        const bool& _fakeShowInfo,
        const bool& _isTransparent,
        const float& _dpi,
        const int32_t& _widgetRounding,
        const double& _defaultScale) -> void
{
    name_ = _name;
    fullscreenAllowed_ = _fullscreenAllowed;
    isPrivate_ = _isPrivate;
    fakeShowInfo_ = _fakeShowInfo;
    isTransparent_ = _isTransparent;
    dpi_ = _dpi;
    widgetRounding_ = _widgetRounding;
    defaultScale_ = _defaultScale;
}

} // namespace dom
} // namespace mozilla

//-----------------------------------------------------------------------------
// Method definitions for the IPDL type |union OptionalShmem|
//
namespace mozilla {
namespace dom {
auto OptionalShmem::MaybeDestroy(Type aNewType) -> bool
{
    if ((mType) == (T__None)) {
        return true;
    }
    if ((mType) == (aNewType)) {
        return false;
    }
    switch (mType) {
    case Tvoid_t:
        {
            (ptr_void_t())->~void_t__tdef();
            break;
        }
    case TShmem:
        {
            (ptr_Shmem())->~Shmem__tdef();
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("not reached");
            break;
        }
    }
    return true;
}

MOZ_IMPLICIT OptionalShmem::OptionalShmem(const void_t& aOther)
{
    new (mozilla::KnownNotNull, ptr_void_t()) void_t(aOther);
    mType = Tvoid_t;
}

MOZ_IMPLICIT OptionalShmem::OptionalShmem(Shmem& aOther)
{
    new (mozilla::KnownNotNull, ptr_Shmem()) Shmem(aOther);
    mType = TShmem;
}

MOZ_IMPLICIT OptionalShmem::OptionalShmem(const OptionalShmem& aOther)
{
    (aOther).AssertSanity();
    switch ((aOther).type()) {
    case Tvoid_t:
        {
            new (mozilla::KnownNotNull, ptr_void_t()) void_t((aOther).get_void_t());
            break;
        }
    case TShmem:
        {
            new (mozilla::KnownNotNull, ptr_Shmem()) Shmem((aOther).get_Shmem());
            break;
        }
    case T__None:
        {
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return;
        }
    }
    mType = (aOther).type();
}

OptionalShmem::~OptionalShmem()
{
    static_cast<void>(MaybeDestroy(T__None));
}

auto OptionalShmem::operator=(const void_t& aRhs) -> OptionalShmem&
{
    if (MaybeDestroy(Tvoid_t)) {
        new (mozilla::KnownNotNull, ptr_void_t()) void_t;
    }
    (*(ptr_void_t())) = aRhs;
    mType = Tvoid_t;
    return (*(this));
}

auto OptionalShmem::operator=(Shmem& aRhs) -> OptionalShmem&
{
    if (MaybeDestroy(TShmem)) {
        new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
    }
    (*(ptr_Shmem())) = aRhs;
    mType = TShmem;
    return (*(this));
}

auto OptionalShmem::operator=(const OptionalShmem& aRhs) -> OptionalShmem&
{
    (aRhs).AssertSanity();
    Type t = (aRhs).type();
    switch (t) {
    case Tvoid_t:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_void_t()) void_t;
            }
            (*(ptr_void_t())) = (aRhs).get_void_t();
            break;
        }
    case TShmem:
        {
            if (MaybeDestroy(t)) {
                new (mozilla::KnownNotNull, ptr_Shmem()) Shmem;
            }
            (*(ptr_Shmem())) = (aRhs).get_Shmem();
            break;
        }
    case T__None:
        {
            static_cast<void>(MaybeDestroy(t));
            break;
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            break;
        }
    }
    mType = t;
    return (*(this));
}

auto OptionalShmem::operator==(const void_t& aRhs) const -> bool
{
    return (get_void_t()) == (aRhs);
}

auto OptionalShmem::operator==(Shmem& aRhs) const -> bool
{
    return (get_Shmem()) == (aRhs);
}

auto OptionalShmem::operator==(const OptionalShmem& aRhs) const -> bool
{
    if ((type()) != ((aRhs).type())) {
        return false;
    }

    switch (type()) {
    case Tvoid_t:
        {
            return (get_void_t()) == ((aRhs).get_void_t());
        }
    case TShmem:
        {
            return (get_Shmem()) == ((aRhs).get_Shmem());
        }
    default:
        {
            mozilla::ipc::LogicError("unreached");
            return false;
        }
    }
}

auto OptionalShmem::get(void_t* aOutValue) const -> void
{
    (*(aOutValue)) = get_void_t();
}

auto OptionalShmem::get(Shmem* aOutValue) const -> void
{
    (*(aOutValue)) = get_Shmem();
}

} // namespace dom
} // namespace mozilla
