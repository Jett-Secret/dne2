//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/dom/indexedDB/PBackgroundIDBTransactionChild.h"

#include "mozilla/dom/indexedDB/PBackgroundIDBCursorChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBDatabaseFileChild.h"
#include "mozilla/dom/indexedDB/PBackgroundIDBRequestChild.h"
#include "mozilla/dom/PBackgroundMutableFileChild.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace dom {
namespace indexedDB {


auto PBackgroundIDBTransactionChild::Recv__delete__() -> bool
{
    return true;
}

auto PBackgroundIDBTransactionChild::ActorDestroy(ActorDestroyReason aWhy) -> void
{
}

MOZ_IMPLICIT PBackgroundIDBTransactionChild::PBackgroundIDBTransactionChild() :
    mozilla::ipc::IProtocol(mozilla::ipc::ChildSide),
    mState(PBackgroundIDBTransaction::__Dead)
{
    MOZ_COUNT_CTOR(PBackgroundIDBTransactionChild);
}

PBackgroundIDBTransactionChild::~PBackgroundIDBTransactionChild()
{
    MOZ_COUNT_DTOR(PBackgroundIDBTransactionChild);
}

auto PBackgroundIDBTransactionChild::Manager() const -> PBackgroundIDBDatabaseChild*
{
    return static_cast<PBackgroundIDBDatabaseChild*>(IProtocol::Manager());
}

auto PBackgroundIDBTransactionChild::ManagedPBackgroundIDBCursorChild(nsTArray<PBackgroundIDBCursorChild*>& aArr) const -> void
{
    (mManagedPBackgroundIDBCursorChild).ToArray(aArr);
}

auto PBackgroundIDBTransactionChild::ManagedPBackgroundIDBCursorChild() const -> const ManagedContainer<PBackgroundIDBCursorChild>&
{
    return mManagedPBackgroundIDBCursorChild;
}

auto PBackgroundIDBTransactionChild::ManagedPBackgroundIDBRequestChild(nsTArray<PBackgroundIDBRequestChild*>& aArr) const -> void
{
    (mManagedPBackgroundIDBRequestChild).ToArray(aArr);
}

auto PBackgroundIDBTransactionChild::ManagedPBackgroundIDBRequestChild() const -> const ManagedContainer<PBackgroundIDBRequestChild>&
{
    return mManagedPBackgroundIDBRequestChild;
}

auto PBackgroundIDBTransactionChild::state() -> PBackgroundIDBTransaction::State
{
    return mState;
}

auto PBackgroundIDBTransactionChild::SendDeleteMe() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBTransaction::Msg_DeleteMe(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBTransactionChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBTransaction", "Msg_DeleteMe", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBTransaction::Transition(Trigger(Trigger::Recv, PBackgroundIDBTransaction::Msg_DeleteMe__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PBackgroundIDBTransactionChild::SendCommit() -> bool
{
    IPC::Message* msg__ = PBackgroundIDBTransaction::Msg_Commit(Id());





    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBTransactionChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBTransaction", "Msg_Commit", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBTransaction::Transition(Trigger(Trigger::Recv, PBackgroundIDBTransaction::Msg_Commit__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PBackgroundIDBTransactionChild::SendAbort(const nsresult& resultCode) -> bool
{
    IPC::Message* msg__ = PBackgroundIDBTransaction::Msg_Abort(Id());

    Write(resultCode, msg__);
    // Sentinel = 'resultCode'
    (msg__)->WriteSentinel(183600282);




    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBTransactionChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBTransaction", "Msg_Abort", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBTransaction::Transition(Trigger(Trigger::Recv, PBackgroundIDBTransaction::Msg_Abort__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PBackgroundIDBTransactionChild::SendPBackgroundIDBCursorConstructor(const OpenCursorParams& params) -> PBackgroundIDBCursorChild*
{
    return SendPBackgroundIDBCursorConstructor(AllocPBackgroundIDBCursorChild(params), params);
}

auto PBackgroundIDBTransactionChild::SendPBackgroundIDBCursorConstructor(
        PBackgroundIDBCursorChild* actor,
        const OpenCursorParams& params) -> PBackgroundIDBCursorChild*
{
    if ((!(actor))) {
        NS_WARNING("Error constructing actor PBackgroundIDBCursorChild");
        return nullptr;
    }
    (actor)->SetId(Register(actor));
    (actor)->SetManager(this);
    (actor)->SetIPCChannel(GetIPCChannel());
    (mManagedPBackgroundIDBCursorChild).PutEntry(actor);
    (actor)->mState = mozilla::dom::indexedDB::PBackgroundIDBCursor::__Start;

    IPC::Message* msg__ = PBackgroundIDBTransaction::Msg_PBackgroundIDBCursorConstructor(Id());

    Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);
    Write(params, msg__);
    // Sentinel = 'params'
    (msg__)->WriteSentinel(1677790004);



    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBTransactionChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBTransaction", "Msg_PBackgroundIDBCursorConstructor", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBTransaction::Transition(Trigger(Trigger::Recv, PBackgroundIDBTransaction::Msg_PBackgroundIDBCursorConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    if ((!(sendok__))) {
        FatalError("constructor for actor failed");
        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBTransactionChild::SendPBackgroundIDBRequestConstructor(const RequestParams& params) -> PBackgroundIDBRequestChild*
{
    return SendPBackgroundIDBRequestConstructor(AllocPBackgroundIDBRequestChild(params), params);
}

auto PBackgroundIDBTransactionChild::SendPBackgroundIDBRequestConstructor(
        PBackgroundIDBRequestChild* actor,
        const RequestParams& params) -> PBackgroundIDBRequestChild*
{
    if ((!(actor))) {
        NS_WARNING("Error constructing actor PBackgroundIDBRequestChild");
        return nullptr;
    }
    (actor)->SetId(Register(actor));
    (actor)->SetManager(this);
    (actor)->SetIPCChannel(GetIPCChannel());
    (mManagedPBackgroundIDBRequestChild).PutEntry(actor);
    (actor)->mState = mozilla::dom::indexedDB::PBackgroundIDBRequest::__Start;

    IPC::Message* msg__ = PBackgroundIDBTransaction::Msg_PBackgroundIDBRequestConstructor(Id());

    Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);
    Write(params, msg__);
    // Sentinel = 'params'
    (msg__)->WriteSentinel(1677790004);



    if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBTransactionChild")) {
        mozilla::ipc::LogMessageForProtocol("PBackgroundIDBTransactionChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PBackgroundIDBTransaction", "Msg_PBackgroundIDBRequestConstructor", js::ProfileEntry::Category::OTHER);
    if ((!(PBackgroundIDBTransaction::Transition(Trigger(Trigger::Recv, PBackgroundIDBTransaction::Msg_PBackgroundIDBRequestConstructor__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    if ((!(sendok__))) {
        FatalError("constructor for actor failed");
        return nullptr;
    }
    return actor;
}

auto PBackgroundIDBTransactionChild::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    switch (aProtocolId) {
    case PBackgroundIDBCursorMsgStart:
        {
            PBackgroundIDBCursorChild* actor = static_cast<PBackgroundIDBCursorChild*>(aListener);
            auto& container = mManagedPBackgroundIDBCursorChild;
            MOZ_RELEASE_ASSERT((container).Contains(actor), "actor not managed by this!");

            (container).RemoveEntry(actor);
            DeallocPBackgroundIDBCursorChild(actor);
            return;
        }
    case PBackgroundIDBRequestMsgStart:
        {
            PBackgroundIDBRequestChild* actor = static_cast<PBackgroundIDBRequestChild*>(aListener);
            auto& container = mManagedPBackgroundIDBRequestChild;
            MOZ_RELEASE_ASSERT((container).Contains(actor), "actor not managed by this!");

            (container).RemoveEntry(actor);
            DeallocPBackgroundIDBRequestChild(actor);
            return;
        }
    default:
        {
            FatalError("unreached");
            return;
        }
    }
}

auto PBackgroundIDBTransactionChild::OnMessageReceived(const Message& msg__) -> PBackgroundIDBTransactionChild::Result
{
    switch ((msg__).type()) {
    case PBackgroundIDBTransaction::Reply_PBackgroundIDBCursorConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBTransaction::Reply_PBackgroundIDBRequestConstructor__ID:
        {
            return MsgProcessed;
        }
    case PBackgroundIDBTransaction::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBTransactionChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBTransaction", "Msg___delete__", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            PBackgroundIDBTransactionChild* actor;

            if ((!(Read((&(actor)), (&(msg__)), (&(iter__)), false)))) {
                FatalError("Error deserializing 'PBackgroundIDBTransactionChild'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 875202478)))) {
                FatalError("Error deserializing 'PBackgroundIDBTransactionChild'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PBackgroundIDBTransaction::Transition(Trigger(Trigger::Send, PBackgroundIDBTransaction::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }


            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->Manager())->RemoveManagee(PBackgroundIDBTransactionMsgStart, actor);

            return MsgProcessed;
        }
    case PBackgroundIDBTransaction::Msg_Complete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PBackgroundIDBTransactionChild")) {
                mozilla::ipc::LogMessageForProtocol("PBackgroundIDBTransactionChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PBackgroundIDBTransaction", "Msg_Complete", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsresult result;

            if ((!(Read((&(result)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'result'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3991766165)))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PBackgroundIDBTransaction::Transition(Trigger(Trigger::Send, PBackgroundIDBTransaction::Msg_Complete__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvComplete(mozilla::Move(result))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PBackgroundIDBTransactionChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBTransactionChild::Result
{
    return MsgNotKnown;
}

auto PBackgroundIDBTransactionChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PBackgroundIDBTransactionChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PBackgroundIDBTransactionChild::GetProtocolTypeId() -> int32_t
{
    return PBackgroundIDBTransactionMsgStart;
}

auto PBackgroundIDBTransactionChild::ProtocolName() const -> const char*
{
    return "PBackgroundIDBTransactionChild";
}

auto PBackgroundIDBTransactionChild::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    ActorDestroyReason subtreewhy = (((why) == (Deletion)) || ((why) == (FailedConstructor)) ? AncestorDeletion : why);

    {
        // Recursively shutting down PBackgroundIDBCursor kids
        nsTArray<PBackgroundIDBCursorChild*> kids;
        // Accumulate kids into a stable structure to iterate over
        ManagedPBackgroundIDBCursorChild(kids);
        for (auto& kid : kids) {
            // Guarding against a child removing a sibling from the list during the iteration.
            if ((mManagedPBackgroundIDBCursorChild).Contains(kid)) {
                (kid)->DestroySubtree(subtreewhy);
            }
        }
    }
    {
        // Recursively shutting down PBackgroundIDBRequest kids
        nsTArray<PBackgroundIDBRequestChild*> kids;
        // Accumulate kids into a stable structure to iterate over
        ManagedPBackgroundIDBRequestChild(kids);
        for (auto& kid : kids) {
            // Guarding against a child removing a sibling from the list during the iteration.
            if ((mManagedPBackgroundIDBRequestChild).Contains(kid)) {
                (kid)->DestroySubtree(subtreewhy);
            }
        }
    }

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PBackgroundIDBTransactionChild::DeallocSubtree() -> void
{
    {
        // Recursively deleting PBackgroundIDBCursor kids
        for (auto iter = (mManagedPBackgroundIDBCursorChild).Iter(); (!((iter).Done())); (iter).Next()) {
            (((iter).Get())->GetKey())->DeallocSubtree();
        }

        for (auto iter = (mManagedPBackgroundIDBCursorChild).Iter(); (!((iter).Done())); (iter).Next()) {
            DeallocPBackgroundIDBCursorChild(((iter).Get())->GetKey());
        }
        (mManagedPBackgroundIDBCursorChild).Clear();
    }
    {
        // Recursively deleting PBackgroundIDBRequest kids
        for (auto iter = (mManagedPBackgroundIDBRequestChild).Iter(); (!((iter).Done())); (iter).Next()) {
            (((iter).Get())->GetKey())->DeallocSubtree();
        }

        for (auto iter = (mManagedPBackgroundIDBRequestChild).Iter(); (!((iter).Done())); (iter).Next()) {
            DeallocPBackgroundIDBRequestChild(((iter).Get())->GetKey());
        }
        (mManagedPBackgroundIDBRequestChild).Clear();
    }
}

auto PBackgroundIDBTransactionChild::Write(
        const nsTArray<IndexUpdateInfo>& v__,
        Message* msg__) -> void
{
    uint32_t length = (v__).Length();
    Write(length, msg__);
    // Sentinel = ('length', 'IndexUpdateInfo[]')
    (msg__)->WriteSentinel(2251747467);

    for (auto& elem : v__) {
        Write(elem, msg__);
        // Sentinel = 'IndexUpdateInfo[]'
        (msg__)->WriteSentinel(2033178830);
    }
}

auto PBackgroundIDBTransactionChild::Read(
        nsTArray<IndexUpdateInfo>* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    nsTArray<IndexUpdateInfo> fa;
    uint32_t length;
    if ((!(Read((&(length)), msg__, iter__)))) {
        mozilla::ipc::ArrayLengthReadError("IndexUpdateInfo[]");
        return false;
    }
    // Sentinel = ('length', 'IndexUpdateInfo[]')
    if ((!((msg__)->ReadSentinel(iter__, 2251747467)))) {
        mozilla::ipc::ArrayLengthReadError("IndexUpdateInfo[]");
        return false;
    }

    IndexUpdateInfo* elems = (fa).AppendElements(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(elems[i])), msg__, iter__)))) {
            FatalError("Error deserializing 'IndexUpdateInfo[i]'");
            return false;
        }
        // Sentinel = 'IndexUpdateInfo[]'
        if ((!((msg__)->ReadSentinel(iter__, 2033178830)))) {
            FatalError("Error deserializing 'IndexUpdateInfo[i]'");
            return false;
        }
    }
    (v__)->SwapElements(fa);
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreGetAllKeysParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).optionalKeyRange(), msg__);
    // Sentinel = 'optionalKeyRange'
    (msg__)->WriteSentinel(2533597392);
    Write((v__).limit(), msg__);
    // Sentinel = 'limit'
    (msg__)->WriteSentinel(3880566644);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreGetAllKeysParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreGetAllKeysParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreGetAllKeysParams'");
        return false;
    }
    if ((!(Read((&((v__)->optionalKeyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'ObjectStoreGetAllKeysParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 2533597392)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'ObjectStoreGetAllKeysParams'");
        return false;
    }
    if ((!(Read((&((v__)->limit())), msg__, iter__)))) {
        FatalError("Error deserializing 'limit' (uint32_t) member of 'ObjectStoreGetAllKeysParams'");
        return false;
    }
    // Sentinel = 'limit'
    if ((!((msg__)->ReadSentinel(iter__, 3880566644)))) {
        FatalError("Error deserializing 'limit' (uint32_t) member of 'ObjectStoreGetAllKeysParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const FileAddInfo& v__,
        Message* msg__) -> void
{
    Write((v__).file(), msg__);
    // Sentinel = 'file'
    (msg__)->WriteSentinel(224874390);
    Write((v__).type(), msg__);
    // Sentinel = 'type'
    (msg__)->WriteSentinel(2982068540);
}

auto PBackgroundIDBTransactionChild::Read(
        FileAddInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->file())), msg__, iter__)))) {
        FatalError("Error deserializing 'file' (DatabaseOrMutableFile) member of 'FileAddInfo'");
        return false;
    }
    // Sentinel = 'file'
    if ((!((msg__)->ReadSentinel(iter__, 224874390)))) {
        FatalError("Error deserializing 'file' (DatabaseOrMutableFile) member of 'FileAddInfo'");
        return false;
    }
    if ((!(Read((&((v__)->type())), msg__, iter__)))) {
        FatalError("Error deserializing 'type' (FileType) member of 'FileAddInfo'");
        return false;
    }
    // Sentinel = 'type'
    if ((!((msg__)->ReadSentinel(iter__, 2982068540)))) {
        FatalError("Error deserializing 'type' (FileType) member of 'FileAddInfo'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreOpenKeyCursorParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).optionalKeyRange(), msg__);
    // Sentinel = 'optionalKeyRange'
    (msg__)->WriteSentinel(2533597392);
    Write((v__).direction(), msg__);
    // Sentinel = 'direction'
    (msg__)->WriteSentinel(1283484994);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreOpenKeyCursorParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreOpenKeyCursorParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreOpenKeyCursorParams'");
        return false;
    }
    if ((!(Read((&((v__)->optionalKeyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'ObjectStoreOpenKeyCursorParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 2533597392)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'ObjectStoreOpenKeyCursorParams'");
        return false;
    }
    if ((!(Read((&((v__)->direction())), msg__, iter__)))) {
        FatalError("Error deserializing 'direction' (Direction) member of 'ObjectStoreOpenKeyCursorParams'");
        return false;
    }
    // Sentinel = 'direction'
    if ((!((msg__)->ReadSentinel(iter__, 1283484994)))) {
        FatalError("Error deserializing 'direction' (Direction) member of 'ObjectStoreOpenKeyCursorParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreCountParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).optionalKeyRange(), msg__);
    // Sentinel = 'optionalKeyRange'
    (msg__)->WriteSentinel(2533597392);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreCountParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreCountParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreCountParams'");
        return false;
    }
    if ((!(Read((&((v__)->optionalKeyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'ObjectStoreCountParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 2533597392)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'ObjectStoreCountParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreGetKeyParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).keyRange(), msg__);
    // Sentinel = 'keyRange'
    (msg__)->WriteSentinel(4120394740);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreGetKeyParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreGetKeyParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreGetKeyParams'");
        return false;
    }
    if ((!(Read((&((v__)->keyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreGetKeyParams'");
        return false;
    }
    // Sentinel = 'keyRange'
    if ((!((msg__)->ReadSentinel(iter__, 4120394740)))) {
        FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreGetKeyParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const PBackgroundIDBRequestChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBTransactionChild::Read(
        PBackgroundIDBRequestChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBRequest", PBackgroundIDBRequestMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBRequestChild*>((actor).value());
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const PBackgroundIDBCursorChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBTransactionChild::Read(
        PBackgroundIDBCursorChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBCursor", PBackgroundIDBCursorMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBCursorChild*>((actor).value());
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const IndexGetParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).indexId(), msg__);
    // Sentinel = 'indexId'
    (msg__)->WriteSentinel(2324882252);
    Write((v__).keyRange(), msg__);
    // Sentinel = 'keyRange'
    (msg__)->WriteSentinel(4120394740);
}

auto PBackgroundIDBTransactionChild::Read(
        IndexGetParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexGetParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexGetParams'");
        return false;
    }
    if ((!(Read((&((v__)->indexId())), msg__, iter__)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexGetParams'");
        return false;
    }
    // Sentinel = 'indexId'
    if ((!((msg__)->ReadSentinel(iter__, 2324882252)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexGetParams'");
        return false;
    }
    if ((!(Read((&((v__)->keyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'IndexGetParams'");
        return false;
    }
    // Sentinel = 'keyRange'
    if ((!((msg__)->ReadSentinel(iter__, 4120394740)))) {
        FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'IndexGetParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreDeleteParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).keyRange(), msg__);
    // Sentinel = 'keyRange'
    (msg__)->WriteSentinel(4120394740);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreDeleteParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreDeleteParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreDeleteParams'");
        return false;
    }
    if ((!(Read((&((v__)->keyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreDeleteParams'");
        return false;
    }
    // Sentinel = 'keyRange'
    if ((!((msg__)->ReadSentinel(iter__, 4120394740)))) {
        FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreDeleteParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreAddParams& v__,
        Message* msg__) -> void
{
    Write((v__).commonParams(), msg__);
    // Sentinel = 'commonParams'
    (msg__)->WriteSentinel(3132658281);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreAddParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->commonParams())), msg__, iter__)))) {
        FatalError("Error deserializing 'commonParams' (ObjectStoreAddPutParams) member of 'ObjectStoreAddParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((msg__)->ReadSentinel(iter__, 3132658281)))) {
        FatalError("Error deserializing 'commonParams' (ObjectStoreAddPutParams) member of 'ObjectStoreAddParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const DatabaseOrMutableFile& v__,
        Message* msg__) -> void
{
    typedef DatabaseOrMutableFile type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'DatabaseOrMutableFile'
    (msg__)->WriteSentinel(2620527749);

    switch ((v__).type()) {
    case type__::TPBackgroundIDBDatabaseFileParent:
        {
            FatalError("wrong side!");
            return;
        }
    case type__::TPBackgroundIDBDatabaseFileChild:
        {
            Write((v__).get_PBackgroundIDBDatabaseFileChild(), msg__, false);
            // Sentinel = 'TPBackgroundIDBDatabaseFileChild'
            (msg__)->WriteSentinel(1165865148);
            return;
        }
    case type__::TPBackgroundMutableFileParent:
        {
            FatalError("wrong side!");
            return;
        }
    case type__::TPBackgroundMutableFileChild:
        {
            Write((v__).get_PBackgroundMutableFileChild(), msg__, false);
            // Sentinel = 'TPBackgroundMutableFileChild'
            (msg__)->WriteSentinel(3897825762);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PBackgroundIDBTransactionChild::Read(
        DatabaseOrMutableFile* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef DatabaseOrMutableFile type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("DatabaseOrMutableFile");
        return false;
    }
    // Sentinel = 'DatabaseOrMutableFile'
    if ((!((msg__)->ReadSentinel(iter__, 2620527749)))) {
        mozilla::ipc::UnionTypeReadError("DatabaseOrMutableFile");
        return false;
    }

    switch (type) {
    case type__::TPBackgroundIDBDatabaseFileParent:
        {
            PBackgroundIDBDatabaseFileChild* tmp = nullptr;
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_PBackgroundIDBDatabaseFileChild())), msg__, iter__, false)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TPBackgroundIDBDatabaseFileParent'
            if ((!((msg__)->ReadSentinel(iter__, 2944443155)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TPBackgroundIDBDatabaseFileChild:
        {
            return false;
        }
    case type__::TPBackgroundMutableFileParent:
        {
            PBackgroundMutableFileChild* tmp = nullptr;
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_PBackgroundMutableFileChild())), msg__, iter__, false)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TPBackgroundMutableFileParent'
            if ((!((msg__)->ReadSentinel(iter__, 2187321649)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TPBackgroundMutableFileChild:
        {
            return false;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PBackgroundIDBTransactionChild::Write(
        const RequestParams& v__,
        Message* msg__) -> void
{
    typedef RequestParams type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'RequestParams'
    (msg__)->WriteSentinel(2934802656);

    switch ((v__).type()) {
    case type__::TObjectStoreAddParams:
        {
            Write((v__).get_ObjectStoreAddParams(), msg__);
            // Sentinel = 'TObjectStoreAddParams'
            (msg__)->WriteSentinel(1161695818);
            return;
        }
    case type__::TObjectStorePutParams:
        {
            Write((v__).get_ObjectStorePutParams(), msg__);
            // Sentinel = 'TObjectStorePutParams'
            (msg__)->WriteSentinel(2873690316);
            return;
        }
    case type__::TObjectStoreGetParams:
        {
            Write((v__).get_ObjectStoreGetParams(), msg__);
            // Sentinel = 'TObjectStoreGetParams'
            (msg__)->WriteSentinel(1141983111);
            return;
        }
    case type__::TObjectStoreGetKeyParams:
        {
            Write((v__).get_ObjectStoreGetKeyParams(), msg__);
            // Sentinel = 'TObjectStoreGetKeyParams'
            (msg__)->WriteSentinel(3194382439);
            return;
        }
    case type__::TObjectStoreGetAllParams:
        {
            Write((v__).get_ObjectStoreGetAllParams(), msg__);
            // Sentinel = 'TObjectStoreGetAllParams'
            (msg__)->WriteSentinel(177439819);
            return;
        }
    case type__::TObjectStoreGetAllKeysParams:
        {
            Write((v__).get_ObjectStoreGetAllKeysParams(), msg__);
            // Sentinel = 'TObjectStoreGetAllKeysParams'
            (msg__)->WriteSentinel(2643668455);
            return;
        }
    case type__::TObjectStoreDeleteParams:
        {
            Write((v__).get_ObjectStoreDeleteParams(), msg__);
            // Sentinel = 'TObjectStoreDeleteParams'
            (msg__)->WriteSentinel(2121891991);
            return;
        }
    case type__::TObjectStoreClearParams:
        {
            Write((v__).get_ObjectStoreClearParams(), msg__);
            // Sentinel = 'TObjectStoreClearParams'
            (msg__)->WriteSentinel(1657547170);
            return;
        }
    case type__::TObjectStoreCountParams:
        {
            Write((v__).get_ObjectStoreCountParams(), msg__);
            // Sentinel = 'TObjectStoreCountParams'
            (msg__)->WriteSentinel(1876506348);
            return;
        }
    case type__::TIndexGetParams:
        {
            Write((v__).get_IndexGetParams(), msg__);
            // Sentinel = 'TIndexGetParams'
            (msg__)->WriteSentinel(1781506953);
            return;
        }
    case type__::TIndexGetKeyParams:
        {
            Write((v__).get_IndexGetKeyParams(), msg__);
            // Sentinel = 'TIndexGetKeyParams'
            (msg__)->WriteSentinel(1826675297);
            return;
        }
    case type__::TIndexGetAllParams:
        {
            Write((v__).get_IndexGetAllParams(), msg__);
            // Sentinel = 'TIndexGetAllParams'
            (msg__)->WriteSentinel(3516951325);
            return;
        }
    case type__::TIndexGetAllKeysParams:
        {
            Write((v__).get_IndexGetAllKeysParams(), msg__);
            // Sentinel = 'TIndexGetAllKeysParams'
            (msg__)->WriteSentinel(3505860041);
            return;
        }
    case type__::TIndexCountParams:
        {
            Write((v__).get_IndexCountParams(), msg__);
            // Sentinel = 'TIndexCountParams'
            (msg__)->WriteSentinel(895903702);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PBackgroundIDBTransactionChild::Read(
        RequestParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef RequestParams type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("RequestParams");
        return false;
    }
    // Sentinel = 'RequestParams'
    if ((!((msg__)->ReadSentinel(iter__, 2934802656)))) {
        mozilla::ipc::UnionTypeReadError("RequestParams");
        return false;
    }

    switch (type) {
    case type__::TObjectStoreAddParams:
        {
            ObjectStoreAddParams tmp = ObjectStoreAddParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStoreAddParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStoreAddParams'
            if ((!((msg__)->ReadSentinel(iter__, 1161695818)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TObjectStorePutParams:
        {
            ObjectStorePutParams tmp = ObjectStorePutParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStorePutParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStorePutParams'
            if ((!((msg__)->ReadSentinel(iter__, 2873690316)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TObjectStoreGetParams:
        {
            ObjectStoreGetParams tmp = ObjectStoreGetParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStoreGetParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStoreGetParams'
            if ((!((msg__)->ReadSentinel(iter__, 1141983111)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TObjectStoreGetKeyParams:
        {
            ObjectStoreGetKeyParams tmp = ObjectStoreGetKeyParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStoreGetKeyParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStoreGetKeyParams'
            if ((!((msg__)->ReadSentinel(iter__, 3194382439)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TObjectStoreGetAllParams:
        {
            ObjectStoreGetAllParams tmp = ObjectStoreGetAllParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStoreGetAllParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStoreGetAllParams'
            if ((!((msg__)->ReadSentinel(iter__, 177439819)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TObjectStoreGetAllKeysParams:
        {
            ObjectStoreGetAllKeysParams tmp = ObjectStoreGetAllKeysParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStoreGetAllKeysParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStoreGetAllKeysParams'
            if ((!((msg__)->ReadSentinel(iter__, 2643668455)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TObjectStoreDeleteParams:
        {
            ObjectStoreDeleteParams tmp = ObjectStoreDeleteParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStoreDeleteParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStoreDeleteParams'
            if ((!((msg__)->ReadSentinel(iter__, 2121891991)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TObjectStoreClearParams:
        {
            ObjectStoreClearParams tmp = ObjectStoreClearParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStoreClearParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStoreClearParams'
            if ((!((msg__)->ReadSentinel(iter__, 1657547170)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TObjectStoreCountParams:
        {
            ObjectStoreCountParams tmp = ObjectStoreCountParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStoreCountParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStoreCountParams'
            if ((!((msg__)->ReadSentinel(iter__, 1876506348)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TIndexGetParams:
        {
            IndexGetParams tmp = IndexGetParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_IndexGetParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TIndexGetParams'
            if ((!((msg__)->ReadSentinel(iter__, 1781506953)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TIndexGetKeyParams:
        {
            IndexGetKeyParams tmp = IndexGetKeyParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_IndexGetKeyParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TIndexGetKeyParams'
            if ((!((msg__)->ReadSentinel(iter__, 1826675297)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TIndexGetAllParams:
        {
            IndexGetAllParams tmp = IndexGetAllParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_IndexGetAllParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TIndexGetAllParams'
            if ((!((msg__)->ReadSentinel(iter__, 3516951325)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TIndexGetAllKeysParams:
        {
            IndexGetAllKeysParams tmp = IndexGetAllKeysParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_IndexGetAllKeysParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TIndexGetAllKeysParams'
            if ((!((msg__)->ReadSentinel(iter__, 3505860041)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TIndexCountParams:
        {
            IndexCountParams tmp = IndexCountParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_IndexCountParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TIndexCountParams'
            if ((!((msg__)->ReadSentinel(iter__, 895903702)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PBackgroundIDBTransactionChild::Write(
        const PBackgroundIDBTransactionChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBTransactionChild::Read(
        PBackgroundIDBTransactionChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBTransaction", PBackgroundIDBTransactionMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBTransactionChild*>((actor).value());
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const PBackgroundMutableFileChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBTransactionChild::Read(
        PBackgroundMutableFileChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundMutableFile", PBackgroundMutableFileMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundMutableFileChild*>((actor).value());
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const nsTArray<FileAddInfo>& v__,
        Message* msg__) -> void
{
    uint32_t length = (v__).Length();
    Write(length, msg__);
    // Sentinel = ('length', 'FileAddInfo[]')
    (msg__)->WriteSentinel(4142766623);

    for (auto& elem : v__) {
        Write(elem, msg__);
        // Sentinel = 'FileAddInfo[]'
        (msg__)->WriteSentinel(1896194666);
    }
}

auto PBackgroundIDBTransactionChild::Read(
        nsTArray<FileAddInfo>* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    nsTArray<FileAddInfo> fa;
    uint32_t length;
    if ((!(Read((&(length)), msg__, iter__)))) {
        mozilla::ipc::ArrayLengthReadError("FileAddInfo[]");
        return false;
    }
    // Sentinel = ('length', 'FileAddInfo[]')
    if ((!((msg__)->ReadSentinel(iter__, 4142766623)))) {
        mozilla::ipc::ArrayLengthReadError("FileAddInfo[]");
        return false;
    }

    FileAddInfo* elems = (fa).AppendElements(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(elems[i])), msg__, iter__)))) {
            FatalError("Error deserializing 'FileAddInfo[i]'");
            return false;
        }
        // Sentinel = 'FileAddInfo[]'
        if ((!((msg__)->ReadSentinel(iter__, 1896194666)))) {
            FatalError("Error deserializing 'FileAddInfo[i]'");
            return false;
        }
    }
    (v__)->SwapElements(fa);
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreOpenCursorParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).optionalKeyRange(), msg__);
    // Sentinel = 'optionalKeyRange'
    (msg__)->WriteSentinel(2533597392);
    Write((v__).direction(), msg__);
    // Sentinel = 'direction'
    (msg__)->WriteSentinel(1283484994);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreOpenCursorParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreOpenCursorParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreOpenCursorParams'");
        return false;
    }
    if ((!(Read((&((v__)->optionalKeyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'ObjectStoreOpenCursorParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 2533597392)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'ObjectStoreOpenCursorParams'");
        return false;
    }
    if ((!(Read((&((v__)->direction())), msg__, iter__)))) {
        FatalError("Error deserializing 'direction' (Direction) member of 'ObjectStoreOpenCursorParams'");
        return false;
    }
    // Sentinel = 'direction'
    if ((!((msg__)->ReadSentinel(iter__, 1283484994)))) {
        FatalError("Error deserializing 'direction' (Direction) member of 'ObjectStoreOpenCursorParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const SerializedStructuredCloneWriteInfo& v__,
        Message* msg__) -> void
{
    Write((v__).data(), msg__);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(843352540);
    Write((v__).offsetToKeyProp(), msg__);
    // Sentinel = 'offsetToKeyProp'
    (msg__)->WriteSentinel(521537079);
}

auto PBackgroundIDBTransactionChild::Read(
        SerializedStructuredCloneWriteInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->data())), msg__, iter__)))) {
        FatalError("Error deserializing 'data' (SerializedStructuredCloneBuffer) member of 'SerializedStructuredCloneWriteInfo'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((msg__)->ReadSentinel(iter__, 843352540)))) {
        FatalError("Error deserializing 'data' (SerializedStructuredCloneBuffer) member of 'SerializedStructuredCloneWriteInfo'");
        return false;
    }
    if ((!(Read((&((v__)->offsetToKeyProp())), msg__, iter__)))) {
        FatalError("Error deserializing 'offsetToKeyProp' (uint64_t) member of 'SerializedStructuredCloneWriteInfo'");
        return false;
    }
    // Sentinel = 'offsetToKeyProp'
    if ((!((msg__)->ReadSentinel(iter__, 521537079)))) {
        FatalError("Error deserializing 'offsetToKeyProp' (uint64_t) member of 'SerializedStructuredCloneWriteInfo'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const OpenCursorParams& v__,
        Message* msg__) -> void
{
    typedef OpenCursorParams type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'OpenCursorParams'
    (msg__)->WriteSentinel(2457402456);

    switch ((v__).type()) {
    case type__::TObjectStoreOpenCursorParams:
        {
            Write((v__).get_ObjectStoreOpenCursorParams(), msg__);
            // Sentinel = 'TObjectStoreOpenCursorParams'
            (msg__)->WriteSentinel(362670232);
            return;
        }
    case type__::TObjectStoreOpenKeyCursorParams:
        {
            Write((v__).get_ObjectStoreOpenKeyCursorParams(), msg__);
            // Sentinel = 'TObjectStoreOpenKeyCursorParams'
            (msg__)->WriteSentinel(2249927906);
            return;
        }
    case type__::TIndexOpenCursorParams:
        {
            Write((v__).get_IndexOpenCursorParams(), msg__);
            // Sentinel = 'TIndexOpenCursorParams'
            (msg__)->WriteSentinel(1102643606);
            return;
        }
    case type__::TIndexOpenKeyCursorParams:
        {
            Write((v__).get_IndexOpenKeyCursorParams(), msg__);
            // Sentinel = 'TIndexOpenKeyCursorParams'
            (msg__)->WriteSentinel(3100852688);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PBackgroundIDBTransactionChild::Read(
        OpenCursorParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef OpenCursorParams type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("OpenCursorParams");
        return false;
    }
    // Sentinel = 'OpenCursorParams'
    if ((!((msg__)->ReadSentinel(iter__, 2457402456)))) {
        mozilla::ipc::UnionTypeReadError("OpenCursorParams");
        return false;
    }

    switch (type) {
    case type__::TObjectStoreOpenCursorParams:
        {
            ObjectStoreOpenCursorParams tmp = ObjectStoreOpenCursorParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStoreOpenCursorParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStoreOpenCursorParams'
            if ((!((msg__)->ReadSentinel(iter__, 362670232)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TObjectStoreOpenKeyCursorParams:
        {
            ObjectStoreOpenKeyCursorParams tmp = ObjectStoreOpenKeyCursorParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ObjectStoreOpenKeyCursorParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TObjectStoreOpenKeyCursorParams'
            if ((!((msg__)->ReadSentinel(iter__, 2249927906)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TIndexOpenCursorParams:
        {
            IndexOpenCursorParams tmp = IndexOpenCursorParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_IndexOpenCursorParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TIndexOpenCursorParams'
            if ((!((msg__)->ReadSentinel(iter__, 1102643606)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TIndexOpenKeyCursorParams:
        {
            IndexOpenKeyCursorParams tmp = IndexOpenKeyCursorParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_IndexOpenKeyCursorParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TIndexOpenKeyCursorParams'
            if ((!((msg__)->ReadSentinel(iter__, 3100852688)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PBackgroundIDBTransactionChild::Write(
        const OptionalKeyRange& v__,
        Message* msg__) -> void
{
    typedef OptionalKeyRange type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'OptionalKeyRange'
    (msg__)->WriteSentinel(3868659120);

    switch ((v__).type()) {
    case type__::TSerializedKeyRange:
        {
            Write((v__).get_SerializedKeyRange(), msg__);
            // Sentinel = 'TSerializedKeyRange'
            (msg__)->WriteSentinel(3215595009);
            return;
        }
    case type__::Tvoid_t:
        {
            Write((v__).get_void_t(), msg__);
            // Sentinel = 'Tvoid_t'
            (msg__)->WriteSentinel(3041273328);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PBackgroundIDBTransactionChild::Read(
        OptionalKeyRange* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef OptionalKeyRange type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("OptionalKeyRange");
        return false;
    }
    // Sentinel = 'OptionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 3868659120)))) {
        mozilla::ipc::UnionTypeReadError("OptionalKeyRange");
        return false;
    }

    switch (type) {
    case type__::TSerializedKeyRange:
        {
            SerializedKeyRange tmp = SerializedKeyRange();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_SerializedKeyRange())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TSerializedKeyRange'
            if ((!((msg__)->ReadSentinel(iter__, 3215595009)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::Tvoid_t:
        {
            void_t tmp = void_t();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_void_t())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((msg__)->ReadSentinel(iter__, 3041273328)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStorePutParams& v__,
        Message* msg__) -> void
{
    Write((v__).commonParams(), msg__);
    // Sentinel = 'commonParams'
    (msg__)->WriteSentinel(3132658281);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStorePutParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->commonParams())), msg__, iter__)))) {
        FatalError("Error deserializing 'commonParams' (ObjectStoreAddPutParams) member of 'ObjectStorePutParams'");
        return false;
    }
    // Sentinel = 'commonParams'
    if ((!((msg__)->ReadSentinel(iter__, 3132658281)))) {
        FatalError("Error deserializing 'commonParams' (ObjectStoreAddPutParams) member of 'ObjectStorePutParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const IndexGetKeyParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).indexId(), msg__);
    // Sentinel = 'indexId'
    (msg__)->WriteSentinel(2324882252);
    Write((v__).keyRange(), msg__);
    // Sentinel = 'keyRange'
    (msg__)->WriteSentinel(4120394740);
}

auto PBackgroundIDBTransactionChild::Read(
        IndexGetKeyParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexGetKeyParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexGetKeyParams'");
        return false;
    }
    if ((!(Read((&((v__)->indexId())), msg__, iter__)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexGetKeyParams'");
        return false;
    }
    // Sentinel = 'indexId'
    if ((!((msg__)->ReadSentinel(iter__, 2324882252)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexGetKeyParams'");
        return false;
    }
    if ((!(Read((&((v__)->keyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'IndexGetKeyParams'");
        return false;
    }
    // Sentinel = 'keyRange'
    if ((!((msg__)->ReadSentinel(iter__, 4120394740)))) {
        FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'IndexGetKeyParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreGetAllParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).optionalKeyRange(), msg__);
    // Sentinel = 'optionalKeyRange'
    (msg__)->WriteSentinel(2533597392);
    Write((v__).limit(), msg__);
    // Sentinel = 'limit'
    (msg__)->WriteSentinel(3880566644);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreGetAllParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreGetAllParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreGetAllParams'");
        return false;
    }
    if ((!(Read((&((v__)->optionalKeyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'ObjectStoreGetAllParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 2533597392)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'ObjectStoreGetAllParams'");
        return false;
    }
    if ((!(Read((&((v__)->limit())), msg__, iter__)))) {
        FatalError("Error deserializing 'limit' (uint32_t) member of 'ObjectStoreGetAllParams'");
        return false;
    }
    // Sentinel = 'limit'
    if ((!((msg__)->ReadSentinel(iter__, 3880566644)))) {
        FatalError("Error deserializing 'limit' (uint32_t) member of 'ObjectStoreGetAllParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreAddPutParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).cloneInfo(), msg__);
    // Sentinel = 'cloneInfo'
    (msg__)->WriteSentinel(517148166);
    Write((v__).key(), msg__);
    // Sentinel = 'key'
    (msg__)->WriteSentinel(35142870);
    Write((v__).indexUpdateInfos(), msg__);
    // Sentinel = 'indexUpdateInfos'
    (msg__)->WriteSentinel(2166177934);
    Write((v__).fileAddInfos(), msg__);
    // Sentinel = 'fileAddInfos'
    (msg__)->WriteSentinel(4195013434);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreAddPutParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    if ((!(Read((&((v__)->cloneInfo())), msg__, iter__)))) {
        FatalError("Error deserializing 'cloneInfo' (SerializedStructuredCloneWriteInfo) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    // Sentinel = 'cloneInfo'
    if ((!((msg__)->ReadSentinel(iter__, 517148166)))) {
        FatalError("Error deserializing 'cloneInfo' (SerializedStructuredCloneWriteInfo) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    if ((!(Read((&((v__)->key())), msg__, iter__)))) {
        FatalError("Error deserializing 'key' (Key) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    // Sentinel = 'key'
    if ((!((msg__)->ReadSentinel(iter__, 35142870)))) {
        FatalError("Error deserializing 'key' (Key) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    if ((!(Read((&((v__)->indexUpdateInfos())), msg__, iter__)))) {
        FatalError("Error deserializing 'indexUpdateInfos' (IndexUpdateInfo[]) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    // Sentinel = 'indexUpdateInfos'
    if ((!((msg__)->ReadSentinel(iter__, 2166177934)))) {
        FatalError("Error deserializing 'indexUpdateInfos' (IndexUpdateInfo[]) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    if ((!(Read((&((v__)->fileAddInfos())), msg__, iter__)))) {
        FatalError("Error deserializing 'fileAddInfos' (FileAddInfo[]) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    // Sentinel = 'fileAddInfos'
    if ((!((msg__)->ReadSentinel(iter__, 4195013434)))) {
        FatalError("Error deserializing 'fileAddInfos' (FileAddInfo[]) member of 'ObjectStoreAddPutParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreClearParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreClearParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreClearParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreClearParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const IndexUpdateInfo& v__,
        Message* msg__) -> void
{
    Write((v__).indexId(), msg__);
    // Sentinel = 'indexId'
    (msg__)->WriteSentinel(2324882252);
    Write((v__).value(), msg__);
    // Sentinel = 'value'
    (msg__)->WriteSentinel(3456818542);
    Write((v__).localizedValue(), msg__);
    // Sentinel = 'localizedValue'
    (msg__)->WriteSentinel(810322080);
}

auto PBackgroundIDBTransactionChild::Read(
        IndexUpdateInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->indexId())), msg__, iter__)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexUpdateInfo'");
        return false;
    }
    // Sentinel = 'indexId'
    if ((!((msg__)->ReadSentinel(iter__, 2324882252)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexUpdateInfo'");
        return false;
    }
    if ((!(Read((&((v__)->value())), msg__, iter__)))) {
        FatalError("Error deserializing 'value' (Key) member of 'IndexUpdateInfo'");
        return false;
    }
    // Sentinel = 'value'
    if ((!((msg__)->ReadSentinel(iter__, 3456818542)))) {
        FatalError("Error deserializing 'value' (Key) member of 'IndexUpdateInfo'");
        return false;
    }
    if ((!(Read((&((v__)->localizedValue())), msg__, iter__)))) {
        FatalError("Error deserializing 'localizedValue' (Key) member of 'IndexUpdateInfo'");
        return false;
    }
    // Sentinel = 'localizedValue'
    if ((!((msg__)->ReadSentinel(iter__, 810322080)))) {
        FatalError("Error deserializing 'localizedValue' (Key) member of 'IndexUpdateInfo'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const IndexGetAllParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).indexId(), msg__);
    // Sentinel = 'indexId'
    (msg__)->WriteSentinel(2324882252);
    Write((v__).optionalKeyRange(), msg__);
    // Sentinel = 'optionalKeyRange'
    (msg__)->WriteSentinel(2533597392);
    Write((v__).limit(), msg__);
    // Sentinel = 'limit'
    (msg__)->WriteSentinel(3880566644);
}

auto PBackgroundIDBTransactionChild::Read(
        IndexGetAllParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexGetAllParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexGetAllParams'");
        return false;
    }
    if ((!(Read((&((v__)->indexId())), msg__, iter__)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexGetAllParams'");
        return false;
    }
    // Sentinel = 'indexId'
    if ((!((msg__)->ReadSentinel(iter__, 2324882252)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexGetAllParams'");
        return false;
    }
    if ((!(Read((&((v__)->optionalKeyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'IndexGetAllParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 2533597392)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'IndexGetAllParams'");
        return false;
    }
    if ((!(Read((&((v__)->limit())), msg__, iter__)))) {
        FatalError("Error deserializing 'limit' (uint32_t) member of 'IndexGetAllParams'");
        return false;
    }
    // Sentinel = 'limit'
    if ((!((msg__)->ReadSentinel(iter__, 3880566644)))) {
        FatalError("Error deserializing 'limit' (uint32_t) member of 'IndexGetAllParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const IndexGetAllKeysParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).indexId(), msg__);
    // Sentinel = 'indexId'
    (msg__)->WriteSentinel(2324882252);
    Write((v__).optionalKeyRange(), msg__);
    // Sentinel = 'optionalKeyRange'
    (msg__)->WriteSentinel(2533597392);
    Write((v__).limit(), msg__);
    // Sentinel = 'limit'
    (msg__)->WriteSentinel(3880566644);
}

auto PBackgroundIDBTransactionChild::Read(
        IndexGetAllKeysParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexGetAllKeysParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexGetAllKeysParams'");
        return false;
    }
    if ((!(Read((&((v__)->indexId())), msg__, iter__)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexGetAllKeysParams'");
        return false;
    }
    // Sentinel = 'indexId'
    if ((!((msg__)->ReadSentinel(iter__, 2324882252)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexGetAllKeysParams'");
        return false;
    }
    if ((!(Read((&((v__)->optionalKeyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'IndexGetAllKeysParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 2533597392)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'IndexGetAllKeysParams'");
        return false;
    }
    if ((!(Read((&((v__)->limit())), msg__, iter__)))) {
        FatalError("Error deserializing 'limit' (uint32_t) member of 'IndexGetAllKeysParams'");
        return false;
    }
    // Sentinel = 'limit'
    if ((!((msg__)->ReadSentinel(iter__, 3880566644)))) {
        FatalError("Error deserializing 'limit' (uint32_t) member of 'IndexGetAllKeysParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const PBackgroundIDBDatabaseFileChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PBackgroundIDBTransactionChild::Read(
        PBackgroundIDBDatabaseFileChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PBackgroundIDBDatabaseFile", PBackgroundIDBDatabaseFileMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PBackgroundIDBDatabaseFileChild*>((actor).value());
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const IndexOpenCursorParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).indexId(), msg__);
    // Sentinel = 'indexId'
    (msg__)->WriteSentinel(2324882252);
    Write((v__).optionalKeyRange(), msg__);
    // Sentinel = 'optionalKeyRange'
    (msg__)->WriteSentinel(2533597392);
    Write((v__).direction(), msg__);
    // Sentinel = 'direction'
    (msg__)->WriteSentinel(1283484994);
}

auto PBackgroundIDBTransactionChild::Read(
        IndexOpenCursorParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexOpenCursorParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexOpenCursorParams'");
        return false;
    }
    if ((!(Read((&((v__)->indexId())), msg__, iter__)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexOpenCursorParams'");
        return false;
    }
    // Sentinel = 'indexId'
    if ((!((msg__)->ReadSentinel(iter__, 2324882252)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexOpenCursorParams'");
        return false;
    }
    if ((!(Read((&((v__)->optionalKeyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'IndexOpenCursorParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 2533597392)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'IndexOpenCursorParams'");
        return false;
    }
    if ((!(Read((&((v__)->direction())), msg__, iter__)))) {
        FatalError("Error deserializing 'direction' (Direction) member of 'IndexOpenCursorParams'");
        return false;
    }
    // Sentinel = 'direction'
    if ((!((msg__)->ReadSentinel(iter__, 1283484994)))) {
        FatalError("Error deserializing 'direction' (Direction) member of 'IndexOpenCursorParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const SerializedKeyRange& v__,
        Message* msg__) -> void
{
    Write((v__).lower(), msg__);
    // Sentinel = 'lower'
    (msg__)->WriteSentinel(2752837090);
    Write((v__).upper(), msg__);
    // Sentinel = 'upper'
    (msg__)->WriteSentinel(799778945);
    Write((v__).lowerOpen(), msg__);
    // Sentinel = 'lowerOpen'
    (msg__)->WriteSentinel(1536551642);
    Write((v__).upperOpen(), msg__);
    // Sentinel = 'upperOpen'
    (msg__)->WriteSentinel(1975212941);
    Write((v__).isOnly(), msg__);
    // Sentinel = 'isOnly'
    (msg__)->WriteSentinel(1446384824);
}

auto PBackgroundIDBTransactionChild::Read(
        SerializedKeyRange* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->lower())), msg__, iter__)))) {
        FatalError("Error deserializing 'lower' (Key) member of 'SerializedKeyRange'");
        return false;
    }
    // Sentinel = 'lower'
    if ((!((msg__)->ReadSentinel(iter__, 2752837090)))) {
        FatalError("Error deserializing 'lower' (Key) member of 'SerializedKeyRange'");
        return false;
    }
    if ((!(Read((&((v__)->upper())), msg__, iter__)))) {
        FatalError("Error deserializing 'upper' (Key) member of 'SerializedKeyRange'");
        return false;
    }
    // Sentinel = 'upper'
    if ((!((msg__)->ReadSentinel(iter__, 799778945)))) {
        FatalError("Error deserializing 'upper' (Key) member of 'SerializedKeyRange'");
        return false;
    }
    if ((!(Read((&((v__)->lowerOpen())), msg__, iter__)))) {
        FatalError("Error deserializing 'lowerOpen' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    // Sentinel = 'lowerOpen'
    if ((!((msg__)->ReadSentinel(iter__, 1536551642)))) {
        FatalError("Error deserializing 'lowerOpen' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    if ((!(Read((&((v__)->upperOpen())), msg__, iter__)))) {
        FatalError("Error deserializing 'upperOpen' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    // Sentinel = 'upperOpen'
    if ((!((msg__)->ReadSentinel(iter__, 1975212941)))) {
        FatalError("Error deserializing 'upperOpen' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    if ((!(Read((&((v__)->isOnly())), msg__, iter__)))) {
        FatalError("Error deserializing 'isOnly' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    // Sentinel = 'isOnly'
    if ((!((msg__)->ReadSentinel(iter__, 1446384824)))) {
        FatalError("Error deserializing 'isOnly' (bool) member of 'SerializedKeyRange'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const ObjectStoreGetParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).keyRange(), msg__);
    // Sentinel = 'keyRange'
    (msg__)->WriteSentinel(4120394740);
}

auto PBackgroundIDBTransactionChild::Read(
        ObjectStoreGetParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreGetParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'ObjectStoreGetParams'");
        return false;
    }
    if ((!(Read((&((v__)->keyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreGetParams'");
        return false;
    }
    // Sentinel = 'keyRange'
    if ((!((msg__)->ReadSentinel(iter__, 4120394740)))) {
        FatalError("Error deserializing 'keyRange' (SerializedKeyRange) member of 'ObjectStoreGetParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const IndexCountParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).indexId(), msg__);
    // Sentinel = 'indexId'
    (msg__)->WriteSentinel(2324882252);
    Write((v__).optionalKeyRange(), msg__);
    // Sentinel = 'optionalKeyRange'
    (msg__)->WriteSentinel(2533597392);
}

auto PBackgroundIDBTransactionChild::Read(
        IndexCountParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexCountParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexCountParams'");
        return false;
    }
    if ((!(Read((&((v__)->indexId())), msg__, iter__)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexCountParams'");
        return false;
    }
    // Sentinel = 'indexId'
    if ((!((msg__)->ReadSentinel(iter__, 2324882252)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexCountParams'");
        return false;
    }
    if ((!(Read((&((v__)->optionalKeyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'IndexCountParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 2533597392)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'IndexCountParams'");
        return false;
    }
    return true;
}

auto PBackgroundIDBTransactionChild::Write(
        const IndexOpenKeyCursorParams& v__,
        Message* msg__) -> void
{
    Write((v__).objectStoreId(), msg__);
    // Sentinel = 'objectStoreId'
    (msg__)->WriteSentinel(2036303666);
    Write((v__).indexId(), msg__);
    // Sentinel = 'indexId'
    (msg__)->WriteSentinel(2324882252);
    Write((v__).optionalKeyRange(), msg__);
    // Sentinel = 'optionalKeyRange'
    (msg__)->WriteSentinel(2533597392);
    Write((v__).direction(), msg__);
    // Sentinel = 'direction'
    (msg__)->WriteSentinel(1283484994);
}

auto PBackgroundIDBTransactionChild::Read(
        IndexOpenKeyCursorParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->objectStoreId())), msg__, iter__)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexOpenKeyCursorParams'");
        return false;
    }
    // Sentinel = 'objectStoreId'
    if ((!((msg__)->ReadSentinel(iter__, 2036303666)))) {
        FatalError("Error deserializing 'objectStoreId' (int64_t) member of 'IndexOpenKeyCursorParams'");
        return false;
    }
    if ((!(Read((&((v__)->indexId())), msg__, iter__)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexOpenKeyCursorParams'");
        return false;
    }
    // Sentinel = 'indexId'
    if ((!((msg__)->ReadSentinel(iter__, 2324882252)))) {
        FatalError("Error deserializing 'indexId' (int64_t) member of 'IndexOpenKeyCursorParams'");
        return false;
    }
    if ((!(Read((&((v__)->optionalKeyRange())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'IndexOpenKeyCursorParams'");
        return false;
    }
    // Sentinel = 'optionalKeyRange'
    if ((!((msg__)->ReadSentinel(iter__, 2533597392)))) {
        FatalError("Error deserializing 'optionalKeyRange' (OptionalKeyRange) member of 'IndexOpenKeyCursorParams'");
        return false;
    }
    if ((!(Read((&((v__)->direction())), msg__, iter__)))) {
        FatalError("Error deserializing 'direction' (Direction) member of 'IndexOpenKeyCursorParams'");
        return false;
    }
    // Sentinel = 'direction'
    if ((!((msg__)->ReadSentinel(iter__, 1283484994)))) {
        FatalError("Error deserializing 'direction' (Direction) member of 'IndexOpenKeyCursorParams'");
        return false;
    }
    return true;
}



} // namespace indexedDB
} // namespace dom
} // namespace mozilla
