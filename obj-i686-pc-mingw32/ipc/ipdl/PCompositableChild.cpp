//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/layers/PCompositableChild.h"

#include "mozilla/layers/PLayerTransactionChild.h"
#include "mozilla/layers/PImageBridgeChild.h"
#include "mozilla/layers/PCompositorBridgeChild.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace layers {


auto PCompositableChild::Recv__delete__() -> bool
{
    return true;
}

auto PCompositableChild::ActorDestroy(ActorDestroyReason aWhy) -> void
{
}

MOZ_IMPLICIT PCompositableChild::PCompositableChild() :
    mozilla::ipc::IProtocol(mozilla::ipc::ChildSide),
    mState(PCompositable::__Dead)
{
    MOZ_COUNT_CTOR(PCompositableChild);
}

PCompositableChild::~PCompositableChild()
{
    MOZ_COUNT_DTOR(PCompositableChild);
}

auto PCompositableChild::state() -> PCompositable::State
{
    return mState;
}

auto PCompositableChild::SendDestroy() -> bool
{
    IPC::Message* msg__ = PCompositable::Msg_Destroy(Id());





    if (mozilla::ipc::LoggingEnabledFor("PCompositableChild")) {
        mozilla::ipc::LogMessageForProtocol("PCompositableChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PCompositable", "Msg_Destroy", js::ProfileEntry::Category::OTHER);
    if ((!(PCompositable::Transition(Trigger(Trigger::Recv, PCompositable::Msg_Destroy__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PCompositableChild::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PCompositableChild::OnMessageReceived(const Message& msg__) -> PCompositableChild::Result
{
    switch ((msg__).type()) {
    case PCompositable::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PCompositableChild")) {
                mozilla::ipc::LogMessageForProtocol("PCompositableChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PCompositable", "Msg___delete__", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            PCompositableChild* actor;

            if ((!(Read((&(actor)), (&(msg__)), (&(iter__)), false)))) {
                FatalError("Error deserializing 'PCompositableChild'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 875202478)))) {
                FatalError("Error deserializing 'PCompositableChild'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PCompositable::Transition(Trigger(Trigger::Send, PCompositable::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }


            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->Manager())->RemoveManagee(PCompositableMsgStart, actor);

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PCompositableChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PCompositableChild::Result
{
    return MsgNotKnown;
}

auto PCompositableChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PCompositableChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PCompositableChild::GetProtocolTypeId() -> int32_t
{
    return PCompositableMsgStart;
}

auto PCompositableChild::ProtocolName() const -> const char*
{
    return "PCompositableChild";
}

auto PCompositableChild::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PCompositableChild::DeallocSubtree() -> void
{
}

auto PCompositableChild::Write(
        const PCompositableChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PCompositableChild::Read(
        PCompositableChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PCompositable", PCompositableMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PCompositableChild*>((actor).value());
    return true;
}



} // namespace layers
} // namespace mozilla
