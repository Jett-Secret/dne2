//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PChannelDiverterParent.h"

#include "mozilla/net/PFTPChannelParent.h"
#include "mozilla/net/PHttpChannelParent.h"
#include "mozilla/net/PNeckoParent.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace net {



MOZ_IMPLICIT PChannelDiverterParent::PChannelDiverterParent() :
    mozilla::ipc::IProtocol(mozilla::ipc::ParentSide),
    mState(PChannelDiverter::__Dead)
{
    MOZ_COUNT_CTOR(PChannelDiverterParent);
}

PChannelDiverterParent::~PChannelDiverterParent()
{
    MOZ_COUNT_DTOR(PChannelDiverterParent);
}

auto PChannelDiverterParent::Manager() const -> PNeckoParent*
{
    return static_cast<PNeckoParent*>(IProtocol::Manager());
}

auto PChannelDiverterParent::state() -> PChannelDiverter::State
{
    return mState;
}

auto PChannelDiverterParent::Send__delete__(PChannelDiverterParent* actor) -> bool
{
    if ((!(actor))) {
        return false;
    }

    IPC::Message* msg__ = PChannelDiverter::Msg___delete__((actor)->Id());

    (actor)->Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);



    if (mozilla::ipc::LoggingEnabledFor("PChannelDiverterParent")) {
        mozilla::ipc::LogMessageForProtocol("PChannelDiverterParent", (actor)->OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PChannelDiverter", "Msg___delete__", js::ProfileEntry::Category::OTHER);
    if ((!(PChannelDiverter::Transition(Trigger(Trigger::Send, PChannelDiverter::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = ((actor)->GetIPCChannel())->Send(msg__);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->Manager())->RemoveManagee(PChannelDiverterMsgStart, actor);
    return sendok__;
}

auto PChannelDiverterParent::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PChannelDiverterParent::OnMessageReceived(const Message& msg__) -> PChannelDiverterParent::Result
{
    switch ((msg__).type()) {
    case PChannelDiverter::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PChannelDiverterParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PChannelDiverterParent::Result
{
    return MsgNotKnown;
}

auto PChannelDiverterParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PChannelDiverterParent::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PChannelDiverterParent::GetProtocolTypeId() -> int32_t
{
    return PChannelDiverterMsgStart;
}

auto PChannelDiverterParent::ProtocolName() const -> const char*
{
    return "PChannelDiverterParent";
}

auto PChannelDiverterParent::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PChannelDiverterParent::DeallocSubtree() -> void
{
}

auto PChannelDiverterParent::Write(
        const PChannelDiverterParent* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PChannelDiverterParent::Read(
        PChannelDiverterParent** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PChannelDiverter", PChannelDiverterMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PChannelDiverterParent*>((actor).value());
    return true;
}



} // namespace net
} // namespace mozilla
