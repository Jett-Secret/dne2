//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/net/PWebSocketChild.h"
#include "SerializedLoadContext.h"
#include "ipc/IPCMessageUtils.h"

#include "mozilla/net/PNeckoChild.h"
#include "mozilla/dom/PBrowserChild.h"
#include "mozilla/net/PTransportProviderChild.h"
#include "mozilla/dom/PBlobChild.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace net {


auto PWebSocketChild::Recv__delete__() -> bool
{
    return true;
}

auto PWebSocketChild::ActorDestroy(ActorDestroyReason aWhy) -> void
{
}

MOZ_IMPLICIT PWebSocketChild::PWebSocketChild() :
    mozilla::ipc::IProtocol(mozilla::ipc::ChildSide),
    mState(PWebSocket::__Dead)
{
    MOZ_COUNT_CTOR(PWebSocketChild);
}

PWebSocketChild::~PWebSocketChild()
{
    MOZ_COUNT_DTOR(PWebSocketChild);
}

auto PWebSocketChild::Manager() const -> PNeckoChild*
{
    return static_cast<PNeckoChild*>(IProtocol::Manager());
}

auto PWebSocketChild::state() -> PWebSocket::State
{
    return mState;
}

auto PWebSocketChild::SendAsyncOpen(
        const OptionalURIParams& aURI,
        const nsCString& aOrigin,
        const uint64_t& aInnerWindowID,
        const nsCString& aProtocol,
        const bool& aSecure,
        const uint32_t& aPingInterval,
        const bool& aClientSetPingInterval,
        const uint32_t& aPingTimeout,
        const bool& aClientSetPingTimeout,
        const OptionalLoadInfoArgs& aLoadInfoArgs,
        const OptionalTransportProvider& aProvider,
        const nsCString& aNegotiatedExtensions) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_AsyncOpen(Id());

    Write(aURI, msg__);
    // Sentinel = 'aURI'
    (msg__)->WriteSentinel(2075506333);
    Write(aOrigin, msg__);
    // Sentinel = 'aOrigin'
    (msg__)->WriteSentinel(2118207704);
    Write(aInnerWindowID, msg__);
    // Sentinel = 'aInnerWindowID'
    (msg__)->WriteSentinel(3059251422);
    Write(aProtocol, msg__);
    // Sentinel = 'aProtocol'
    (msg__)->WriteSentinel(3505310484);
    Write(aSecure, msg__);
    // Sentinel = 'aSecure'
    (msg__)->WriteSentinel(4071505201);
    Write(aPingInterval, msg__);
    // Sentinel = 'aPingInterval'
    (msg__)->WriteSentinel(407028319);
    Write(aClientSetPingInterval, msg__);
    // Sentinel = 'aClientSetPingInterval'
    (msg__)->WriteSentinel(3486439937);
    Write(aPingTimeout, msg__);
    // Sentinel = 'aPingTimeout'
    (msg__)->WriteSentinel(1400185874);
    Write(aClientSetPingTimeout, msg__);
    // Sentinel = 'aClientSetPingTimeout'
    (msg__)->WriteSentinel(2731101232);
    Write(aLoadInfoArgs, msg__);
    // Sentinel = 'aLoadInfoArgs'
    (msg__)->WriteSentinel(3659468731);
    Write(aProvider, msg__);
    // Sentinel = 'aProvider'
    (msg__)->WriteSentinel(4112742927);
    Write(aNegotiatedExtensions, msg__);
    // Sentinel = 'aNegotiatedExtensions'
    (msg__)->WriteSentinel(2751189790);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PWebSocket", "Msg_AsyncOpen", js::ProfileEntry::Category::OTHER);
    if ((!(PWebSocket::Transition(Trigger(Trigger::Recv, PWebSocket::Msg_AsyncOpen__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PWebSocketChild::SendClose(
        const uint16_t& code,
        const nsCString& reason) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_Close(Id());

    Write(code, msg__);
    // Sentinel = 'code'
    (msg__)->WriteSentinel(3318913027);
    Write(reason, msg__);
    // Sentinel = 'reason'
    (msg__)->WriteSentinel(4151390930);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PWebSocket", "Msg_Close", js::ProfileEntry::Category::OTHER);
    if ((!(PWebSocket::Transition(Trigger(Trigger::Recv, PWebSocket::Msg_Close__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PWebSocketChild::SendSendMsg(const nsCString& aMsg) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_SendMsg(Id());

    Write(aMsg, msg__);
    // Sentinel = 'aMsg'
    (msg__)->WriteSentinel(3584578888);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PWebSocket", "Msg_SendMsg", js::ProfileEntry::Category::OTHER);
    if ((!(PWebSocket::Transition(Trigger(Trigger::Recv, PWebSocket::Msg_SendMsg__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PWebSocketChild::SendSendBinaryMsg(const nsCString& aMsg) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_SendBinaryMsg(Id());

    Write(aMsg, msg__);
    // Sentinel = 'aMsg'
    (msg__)->WriteSentinel(3584578888);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PWebSocket", "Msg_SendBinaryMsg", js::ProfileEntry::Category::OTHER);
    if ((!(PWebSocket::Transition(Trigger(Trigger::Recv, PWebSocket::Msg_SendBinaryMsg__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PWebSocketChild::SendSendBinaryStream(
        const InputStreamParams& aStream,
        const uint32_t& aLength) -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_SendBinaryStream(Id());

    Write(aStream, msg__);
    // Sentinel = 'aStream'
    (msg__)->WriteSentinel(3415320318);
    Write(aLength, msg__);
    // Sentinel = 'aLength'
    (msg__)->WriteSentinel(2696905790);




    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PWebSocket", "Msg_SendBinaryStream", js::ProfileEntry::Category::OTHER);
    if ((!(PWebSocket::Transition(Trigger(Trigger::Recv, PWebSocket::Msg_SendBinaryStream__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PWebSocketChild::SendDeleteSelf() -> bool
{
    IPC::Message* msg__ = PWebSocket::Msg_DeleteSelf(Id());





    if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
        mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PWebSocket", "Msg_DeleteSelf", js::ProfileEntry::Category::OTHER);
    if ((!(PWebSocket::Transition(Trigger(Trigger::Recv, PWebSocket::Msg_DeleteSelf__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PWebSocketChild::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PWebSocketChild::OnMessageReceived(const Message& msg__) -> PWebSocketChild::Result
{
    switch ((msg__).type()) {
    case PWebSocket::Msg_OnStart__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PWebSocket", "Msg_OnStart", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsCString aProtocol;
            nsCString aExtensions;
            nsString aEffectiveURL;
            bool aEncrypted;

            if ((!(Read((&(aProtocol)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aProtocol'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3505310484)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(Read((&(aExtensions)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aExtensions'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 805668716)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(Read((&(aEffectiveURL)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            // Sentinel = 'aEffectiveURL'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2123459946)))) {
                FatalError("Error deserializing 'nsString'");
                return MsgValueError;
            }
            if ((!(Read((&(aEncrypted)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'aEncrypted'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3962043913)))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PWebSocket::Transition(Trigger(Trigger::Send, PWebSocket::Msg_OnStart__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnStart(mozilla::Move(aProtocol), mozilla::Move(aExtensions), mozilla::Move(aEffectiveURL), mozilla::Move(aEncrypted))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnStop__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PWebSocket", "Msg_OnStop", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsresult aStatusCode;

            if ((!(Read((&(aStatusCode)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            // Sentinel = 'aStatusCode'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3484261911)))) {
                FatalError("Error deserializing 'nsresult'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PWebSocket::Transition(Trigger(Trigger::Send, PWebSocket::Msg_OnStop__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnStop(mozilla::Move(aStatusCode))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnMessageAvailable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PWebSocket", "Msg_OnMessageAvailable", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsCString aMsg;

            if ((!(Read((&(aMsg)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aMsg'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3584578888)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PWebSocket::Transition(Trigger(Trigger::Send, PWebSocket::Msg_OnMessageAvailable__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnMessageAvailable(mozilla::Move(aMsg))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnBinaryMessageAvailable__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PWebSocket", "Msg_OnBinaryMessageAvailable", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsCString aMsg;

            if ((!(Read((&(aMsg)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aMsg'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3584578888)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PWebSocket::Transition(Trigger(Trigger::Send, PWebSocket::Msg_OnBinaryMessageAvailable__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnBinaryMessageAvailable(mozilla::Move(aMsg))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnAcknowledge__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PWebSocket", "Msg_OnAcknowledge", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            uint32_t aSize;

            if ((!(Read((&(aSize)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            // Sentinel = 'aSize'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 2556665555)))) {
                FatalError("Error deserializing 'uint32_t'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PWebSocket::Transition(Trigger(Trigger::Send, PWebSocket::Msg_OnAcknowledge__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnAcknowledge(mozilla::Move(aSize))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg_OnServerClose__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PWebSocket", "Msg_OnServerClose", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            uint16_t code;
            nsCString aReason;

            if ((!(Read((&(code)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            // Sentinel = 'code'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3318913027)))) {
                FatalError("Error deserializing 'uint16_t'");
                return MsgValueError;
            }
            if ((!(Read((&(aReason)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aReason'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 829905706)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PWebSocket::Transition(Trigger(Trigger::Send, PWebSocket::Msg_OnServerClose__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOnServerClose(mozilla::Move(code), mozilla::Move(aReason))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PWebSocket::Msg___delete____ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PWebSocketChild")) {
                mozilla::ipc::LogMessageForProtocol("PWebSocketChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PWebSocket", "Msg___delete__", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            PWebSocketChild* actor;

            if ((!(Read((&(actor)), (&(msg__)), (&(iter__)), false)))) {
                FatalError("Error deserializing 'PWebSocketChild'");
                return MsgValueError;
            }
            // Sentinel = 'actor'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 875202478)))) {
                FatalError("Error deserializing 'PWebSocketChild'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PWebSocket::Transition(Trigger(Trigger::Send, PWebSocket::Msg___delete____ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(Recv__delete__()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }


            (actor)->DestroySubtree(Deletion);
            (actor)->DeallocSubtree();
            ((actor)->Manager())->RemoveManagee(PWebSocketMsgStart, actor);

            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PWebSocketChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PWebSocketChild::Result
{
    return MsgNotKnown;
}

auto PWebSocketChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PWebSocketChild::Result
{
    MOZ_ASSERT_UNREACHABLE("message protocol not supported");
    return MsgNotKnown;
}

auto PWebSocketChild::GetProtocolTypeId() -> int32_t
{
    return PWebSocketMsgStart;
}

auto PWebSocketChild::ProtocolName() const -> const char*
{
    return "PWebSocketChild";
}

auto PWebSocketChild::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PWebSocketChild::DeallocSubtree() -> void
{
}

auto PWebSocketChild::Write(
        const SystemPrincipalInfo& v__,
        Message* msg__) -> void
{
}

auto PWebSocketChild::Read(
        SystemPrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    return true;
}

auto PWebSocketChild::Write(
        const nsTArray<PrincipalInfo>& v__,
        Message* msg__) -> void
{
    uint32_t length = (v__).Length();
    Write(length, msg__);
    // Sentinel = ('length', 'PrincipalInfo[]')
    (msg__)->WriteSentinel(1032188126);

    for (auto& elem : v__) {
        Write(elem, msg__);
        // Sentinel = 'PrincipalInfo[]'
        (msg__)->WriteSentinel(413380193);
    }
}

auto PWebSocketChild::Read(
        nsTArray<PrincipalInfo>* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    nsTArray<PrincipalInfo> fa;
    uint32_t length;
    if ((!(Read((&(length)), msg__, iter__)))) {
        mozilla::ipc::ArrayLengthReadError("PrincipalInfo[]");
        return false;
    }
    // Sentinel = ('length', 'PrincipalInfo[]')
    if ((!((msg__)->ReadSentinel(iter__, 1032188126)))) {
        mozilla::ipc::ArrayLengthReadError("PrincipalInfo[]");
        return false;
    }

    PrincipalInfo* elems = (fa).AppendElements(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(elems[i])), msg__, iter__)))) {
            FatalError("Error deserializing 'PrincipalInfo[i]'");
            return false;
        }
        // Sentinel = 'PrincipalInfo[]'
        if ((!((msg__)->ReadSentinel(iter__, 413380193)))) {
            FatalError("Error deserializing 'PrincipalInfo[i]'");
            return false;
        }
    }
    (v__)->SwapElements(fa);
    return true;
}

auto PWebSocketChild::Write(
        const BufferedInputStreamParams& v__,
        Message* msg__) -> void
{
    Write((v__).optionalStream(), msg__);
    // Sentinel = 'optionalStream'
    (msg__)->WriteSentinel(1003718562);
    Write((v__).bufferSize(), msg__);
    // Sentinel = 'bufferSize'
    (msg__)->WriteSentinel(3444538779);
}

auto PWebSocketChild::Read(
        BufferedInputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->optionalStream())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalStream' (OptionalInputStreamParams) member of 'BufferedInputStreamParams'");
        return false;
    }
    // Sentinel = 'optionalStream'
    if ((!((msg__)->ReadSentinel(iter__, 1003718562)))) {
        FatalError("Error deserializing 'optionalStream' (OptionalInputStreamParams) member of 'BufferedInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->bufferSize())), msg__, iter__)))) {
        FatalError("Error deserializing 'bufferSize' (uint32_t) member of 'BufferedInputStreamParams'");
        return false;
    }
    // Sentinel = 'bufferSize'
    if ((!((msg__)->ReadSentinel(iter__, 3444538779)))) {
        FatalError("Error deserializing 'bufferSize' (uint32_t) member of 'BufferedInputStreamParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const nsTArray<InputStreamParams>& v__,
        Message* msg__) -> void
{
    uint32_t length = (v__).Length();
    Write(length, msg__);
    // Sentinel = ('length', 'InputStreamParams[]')
    (msg__)->WriteSentinel(348334258);

    for (auto& elem : v__) {
        Write(elem, msg__);
        // Sentinel = 'InputStreamParams[]'
        (msg__)->WriteSentinel(2927715197);
    }
}

auto PWebSocketChild::Read(
        nsTArray<InputStreamParams>* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    nsTArray<InputStreamParams> fa;
    uint32_t length;
    if ((!(Read((&(length)), msg__, iter__)))) {
        mozilla::ipc::ArrayLengthReadError("InputStreamParams[]");
        return false;
    }
    // Sentinel = ('length', 'InputStreamParams[]')
    if ((!((msg__)->ReadSentinel(iter__, 348334258)))) {
        mozilla::ipc::ArrayLengthReadError("InputStreamParams[]");
        return false;
    }

    InputStreamParams* elems = (fa).AppendElements(length);
    for (uint32_t i = 0; (i) < (length); (++(i))) {
        if ((!(Read((&(elems[i])), msg__, iter__)))) {
            FatalError("Error deserializing 'InputStreamParams[i]'");
            return false;
        }
        // Sentinel = 'InputStreamParams[]'
        if ((!((msg__)->ReadSentinel(iter__, 2927715197)))) {
            FatalError("Error deserializing 'InputStreamParams[i]'");
            return false;
        }
    }
    (v__)->SwapElements(fa);
    return true;
}

auto PWebSocketChild::Write(
        const OptionalURIParams& v__,
        Message* msg__) -> void
{
    typedef OptionalURIParams type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'OptionalURIParams'
    (msg__)->WriteSentinel(1977079525);

    switch ((v__).type()) {
    case type__::Tvoid_t:
        {
            Write((v__).get_void_t(), msg__);
            // Sentinel = 'Tvoid_t'
            (msg__)->WriteSentinel(3041273328);
            return;
        }
    case type__::TURIParams:
        {
            Write((v__).get_URIParams(), msg__);
            // Sentinel = 'TURIParams'
            (msg__)->WriteSentinel(1132652062);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PWebSocketChild::Read(
        OptionalURIParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef OptionalURIParams type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("OptionalURIParams");
        return false;
    }
    // Sentinel = 'OptionalURIParams'
    if ((!((msg__)->ReadSentinel(iter__, 1977079525)))) {
        mozilla::ipc::UnionTypeReadError("OptionalURIParams");
        return false;
    }

    switch (type) {
    case type__::Tvoid_t:
        {
            void_t tmp = void_t();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_void_t())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((msg__)->ReadSentinel(iter__, 3041273328)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TURIParams:
        {
            URIParams tmp = URIParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_URIParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TURIParams'
            if ((!((msg__)->ReadSentinel(iter__, 1132652062)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PWebSocketChild::Write(
        const ContentPrincipalInfoOriginNoSuffix& v__,
        Message* msg__) -> void
{
    typedef ContentPrincipalInfoOriginNoSuffix type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'ContentPrincipalInfoOriginNoSuffix'
    (msg__)->WriteSentinel(2442066713);

    switch ((v__).type()) {
    case type__::TnsCString:
        {
            Write((v__).get_nsCString(), msg__);
            // Sentinel = 'TnsCString'
            (msg__)->WriteSentinel(2427411293);
            return;
        }
    case type__::Tvoid_t:
        {
            Write((v__).get_void_t(), msg__);
            // Sentinel = 'Tvoid_t'
            (msg__)->WriteSentinel(3041273328);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PWebSocketChild::Read(
        ContentPrincipalInfoOriginNoSuffix* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef ContentPrincipalInfoOriginNoSuffix type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("ContentPrincipalInfoOriginNoSuffix");
        return false;
    }
    // Sentinel = 'ContentPrincipalInfoOriginNoSuffix'
    if ((!((msg__)->ReadSentinel(iter__, 2442066713)))) {
        mozilla::ipc::UnionTypeReadError("ContentPrincipalInfoOriginNoSuffix");
        return false;
    }

    switch (type) {
    case type__::TnsCString:
        {
            nsCString tmp = nsCString();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_nsCString())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TnsCString'
            if ((!((msg__)->ReadSentinel(iter__, 2427411293)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::Tvoid_t:
        {
            void_t tmp = void_t();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_void_t())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((msg__)->ReadSentinel(iter__, 3041273328)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PWebSocketChild::Write(
        const StandardURLParams& v__,
        Message* msg__) -> void
{
    Write((v__).urlType(), msg__);
    // Sentinel = 'urlType'
    (msg__)->WriteSentinel(4149428228);
    Write((v__).port(), msg__);
    // Sentinel = 'port'
    (msg__)->WriteSentinel(3633211549);
    Write((v__).defaultPort(), msg__);
    // Sentinel = 'defaultPort'
    (msg__)->WriteSentinel(599318897);
    Write((v__).spec(), msg__);
    // Sentinel = 'spec'
    (msg__)->WriteSentinel(1630740541);
    Write((v__).scheme(), msg__);
    // Sentinel = 'scheme'
    (msg__)->WriteSentinel(3619238715);
    Write((v__).authority(), msg__);
    // Sentinel = 'authority'
    (msg__)->WriteSentinel(1669684878);
    Write((v__).username(), msg__);
    // Sentinel = 'username'
    (msg__)->WriteSentinel(689225024);
    Write((v__).password(), msg__);
    // Sentinel = 'password'
    (msg__)->WriteSentinel(2527534683);
    Write((v__).host(), msg__);
    // Sentinel = 'host'
    (msg__)->WriteSentinel(4070301394);
    Write((v__).path(), msg__);
    // Sentinel = 'path'
    (msg__)->WriteSentinel(913629401);
    Write((v__).filePath(), msg__);
    // Sentinel = 'filePath'
    (msg__)->WriteSentinel(4122896455);
    Write((v__).directory(), msg__);
    // Sentinel = 'directory'
    (msg__)->WriteSentinel(1201172472);
    Write((v__).baseName(), msg__);
    // Sentinel = 'baseName'
    (msg__)->WriteSentinel(2448877418);
    Write((v__).extension(), msg__);
    // Sentinel = 'extension'
    (msg__)->WriteSentinel(3211853542);
    Write((v__).query(), msg__);
    // Sentinel = 'query'
    (msg__)->WriteSentinel(4249802777);
    Write((v__).ref(), msg__);
    // Sentinel = 'ref'
    (msg__)->WriteSentinel(2626476732);
    Write((v__).originCharset(), msg__);
    // Sentinel = 'originCharset'
    (msg__)->WriteSentinel(1320725495);
    Write((v__).isMutable(), msg__);
    // Sentinel = 'isMutable'
    (msg__)->WriteSentinel(3552466783);
    Write((v__).supportsFileURL(), msg__);
    // Sentinel = 'supportsFileURL'
    (msg__)->WriteSentinel(1871785710);
    Write((v__).hostEncoding(), msg__);
    // Sentinel = 'hostEncoding'
    (msg__)->WriteSentinel(1044841773);
}

auto PWebSocketChild::Read(
        StandardURLParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->urlType())), msg__, iter__)))) {
        FatalError("Error deserializing 'urlType' (uint32_t) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'urlType'
    if ((!((msg__)->ReadSentinel(iter__, 4149428228)))) {
        FatalError("Error deserializing 'urlType' (uint32_t) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->port())), msg__, iter__)))) {
        FatalError("Error deserializing 'port' (int32_t) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'port'
    if ((!((msg__)->ReadSentinel(iter__, 3633211549)))) {
        FatalError("Error deserializing 'port' (int32_t) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->defaultPort())), msg__, iter__)))) {
        FatalError("Error deserializing 'defaultPort' (int32_t) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'defaultPort'
    if ((!((msg__)->ReadSentinel(iter__, 599318897)))) {
        FatalError("Error deserializing 'defaultPort' (int32_t) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->spec())), msg__, iter__)))) {
        FatalError("Error deserializing 'spec' (nsCString) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'spec'
    if ((!((msg__)->ReadSentinel(iter__, 1630740541)))) {
        FatalError("Error deserializing 'spec' (nsCString) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->scheme())), msg__, iter__)))) {
        FatalError("Error deserializing 'scheme' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'scheme'
    if ((!((msg__)->ReadSentinel(iter__, 3619238715)))) {
        FatalError("Error deserializing 'scheme' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->authority())), msg__, iter__)))) {
        FatalError("Error deserializing 'authority' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'authority'
    if ((!((msg__)->ReadSentinel(iter__, 1669684878)))) {
        FatalError("Error deserializing 'authority' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->username())), msg__, iter__)))) {
        FatalError("Error deserializing 'username' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'username'
    if ((!((msg__)->ReadSentinel(iter__, 689225024)))) {
        FatalError("Error deserializing 'username' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->password())), msg__, iter__)))) {
        FatalError("Error deserializing 'password' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'password'
    if ((!((msg__)->ReadSentinel(iter__, 2527534683)))) {
        FatalError("Error deserializing 'password' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->host())), msg__, iter__)))) {
        FatalError("Error deserializing 'host' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'host'
    if ((!((msg__)->ReadSentinel(iter__, 4070301394)))) {
        FatalError("Error deserializing 'host' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->path())), msg__, iter__)))) {
        FatalError("Error deserializing 'path' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'path'
    if ((!((msg__)->ReadSentinel(iter__, 913629401)))) {
        FatalError("Error deserializing 'path' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->filePath())), msg__, iter__)))) {
        FatalError("Error deserializing 'filePath' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'filePath'
    if ((!((msg__)->ReadSentinel(iter__, 4122896455)))) {
        FatalError("Error deserializing 'filePath' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->directory())), msg__, iter__)))) {
        FatalError("Error deserializing 'directory' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'directory'
    if ((!((msg__)->ReadSentinel(iter__, 1201172472)))) {
        FatalError("Error deserializing 'directory' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->baseName())), msg__, iter__)))) {
        FatalError("Error deserializing 'baseName' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'baseName'
    if ((!((msg__)->ReadSentinel(iter__, 2448877418)))) {
        FatalError("Error deserializing 'baseName' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->extension())), msg__, iter__)))) {
        FatalError("Error deserializing 'extension' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'extension'
    if ((!((msg__)->ReadSentinel(iter__, 3211853542)))) {
        FatalError("Error deserializing 'extension' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->query())), msg__, iter__)))) {
        FatalError("Error deserializing 'query' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'query'
    if ((!((msg__)->ReadSentinel(iter__, 4249802777)))) {
        FatalError("Error deserializing 'query' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->ref())), msg__, iter__)))) {
        FatalError("Error deserializing 'ref' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'ref'
    if ((!((msg__)->ReadSentinel(iter__, 2626476732)))) {
        FatalError("Error deserializing 'ref' (StandardURLSegment) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->originCharset())), msg__, iter__)))) {
        FatalError("Error deserializing 'originCharset' (nsCString) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'originCharset'
    if ((!((msg__)->ReadSentinel(iter__, 1320725495)))) {
        FatalError("Error deserializing 'originCharset' (nsCString) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->isMutable())), msg__, iter__)))) {
        FatalError("Error deserializing 'isMutable' (bool) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'isMutable'
    if ((!((msg__)->ReadSentinel(iter__, 3552466783)))) {
        FatalError("Error deserializing 'isMutable' (bool) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->supportsFileURL())), msg__, iter__)))) {
        FatalError("Error deserializing 'supportsFileURL' (bool) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'supportsFileURL'
    if ((!((msg__)->ReadSentinel(iter__, 1871785710)))) {
        FatalError("Error deserializing 'supportsFileURL' (bool) member of 'StandardURLParams'");
        return false;
    }
    if ((!(Read((&((v__)->hostEncoding())), msg__, iter__)))) {
        FatalError("Error deserializing 'hostEncoding' (uint32_t) member of 'StandardURLParams'");
        return false;
    }
    // Sentinel = 'hostEncoding'
    if ((!((msg__)->ReadSentinel(iter__, 1044841773)))) {
        FatalError("Error deserializing 'hostEncoding' (uint32_t) member of 'StandardURLParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const OptionalInputStreamParams& v__,
        Message* msg__) -> void
{
    typedef OptionalInputStreamParams type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'OptionalInputStreamParams'
    (msg__)->WriteSentinel(1355174443);

    switch ((v__).type()) {
    case type__::Tvoid_t:
        {
            Write((v__).get_void_t(), msg__);
            // Sentinel = 'Tvoid_t'
            (msg__)->WriteSentinel(3041273328);
            return;
        }
    case type__::TInputStreamParams:
        {
            Write((v__).get_InputStreamParams(), msg__);
            // Sentinel = 'TInputStreamParams'
            (msg__)->WriteSentinel(55652096);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PWebSocketChild::Read(
        OptionalInputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef OptionalInputStreamParams type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("OptionalInputStreamParams");
        return false;
    }
    // Sentinel = 'OptionalInputStreamParams'
    if ((!((msg__)->ReadSentinel(iter__, 1355174443)))) {
        mozilla::ipc::UnionTypeReadError("OptionalInputStreamParams");
        return false;
    }

    switch (type) {
    case type__::Tvoid_t:
        {
            void_t tmp = void_t();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_void_t())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((msg__)->ReadSentinel(iter__, 3041273328)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TInputStreamParams:
        {
            InputStreamParams tmp = InputStreamParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_InputStreamParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TInputStreamParams'
            if ((!((msg__)->ReadSentinel(iter__, 55652096)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PWebSocketChild::Write(
        const URIParams& v__,
        Message* msg__) -> void
{
    typedef URIParams type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'URIParams'
    (msg__)->WriteSentinel(1039516337);

    switch ((v__).type()) {
    case type__::TSimpleURIParams:
        {
            Write((v__).get_SimpleURIParams(), msg__);
            // Sentinel = 'TSimpleURIParams'
            (msg__)->WriteSentinel(4028607586);
            return;
        }
    case type__::TStandardURLParams:
        {
            Write((v__).get_StandardURLParams(), msg__);
            // Sentinel = 'TStandardURLParams'
            (msg__)->WriteSentinel(248174578);
            return;
        }
    case type__::TJARURIParams:
        {
            Write((v__).get_JARURIParams(), msg__);
            // Sentinel = 'TJARURIParams'
            (msg__)->WriteSentinel(3404434792);
            return;
        }
    case type__::TIconURIParams:
        {
            Write((v__).get_IconURIParams(), msg__);
            // Sentinel = 'TIconURIParams'
            (msg__)->WriteSentinel(1824279023);
            return;
        }
    case type__::TNullPrincipalURIParams:
        {
            Write((v__).get_NullPrincipalURIParams(), msg__);
            // Sentinel = 'TNullPrincipalURIParams'
            (msg__)->WriteSentinel(216801182);
            return;
        }
    case type__::TJSURIParams:
        {
            Write((v__).get_JSURIParams(), msg__);
            // Sentinel = 'TJSURIParams'
            (msg__)->WriteSentinel(32222119);
            return;
        }
    case type__::TSimpleNestedURIParams:
        {
            Write((v__).get_SimpleNestedURIParams(), msg__);
            // Sentinel = 'TSimpleNestedURIParams'
            (msg__)->WriteSentinel(3192238307);
            return;
        }
    case type__::THostObjectURIParams:
        {
            Write((v__).get_HostObjectURIParams(), msg__);
            // Sentinel = 'THostObjectURIParams'
            (msg__)->WriteSentinel(1307971301);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PWebSocketChild::Read(
        URIParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef URIParams type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("URIParams");
        return false;
    }
    // Sentinel = 'URIParams'
    if ((!((msg__)->ReadSentinel(iter__, 1039516337)))) {
        mozilla::ipc::UnionTypeReadError("URIParams");
        return false;
    }

    switch (type) {
    case type__::TSimpleURIParams:
        {
            SimpleURIParams tmp = SimpleURIParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_SimpleURIParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TSimpleURIParams'
            if ((!((msg__)->ReadSentinel(iter__, 4028607586)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TStandardURLParams:
        {
            StandardURLParams tmp = StandardURLParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_StandardURLParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TStandardURLParams'
            if ((!((msg__)->ReadSentinel(iter__, 248174578)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TJARURIParams:
        {
            JARURIParams tmp = JARURIParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_JARURIParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TJARURIParams'
            if ((!((msg__)->ReadSentinel(iter__, 3404434792)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TIconURIParams:
        {
            IconURIParams tmp = IconURIParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_IconURIParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TIconURIParams'
            if ((!((msg__)->ReadSentinel(iter__, 1824279023)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TNullPrincipalURIParams:
        {
            NullPrincipalURIParams tmp = NullPrincipalURIParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_NullPrincipalURIParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TNullPrincipalURIParams'
            if ((!((msg__)->ReadSentinel(iter__, 216801182)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TJSURIParams:
        {
            JSURIParams tmp = JSURIParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_JSURIParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TJSURIParams'
            if ((!((msg__)->ReadSentinel(iter__, 32222119)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TSimpleNestedURIParams:
        {
            SimpleNestedURIParams tmp = SimpleNestedURIParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_SimpleNestedURIParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TSimpleNestedURIParams'
            if ((!((msg__)->ReadSentinel(iter__, 3192238307)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::THostObjectURIParams:
        {
            HostObjectURIParams tmp = HostObjectURIParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_HostObjectURIParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'THostObjectURIParams'
            if ((!((msg__)->ReadSentinel(iter__, 1307971301)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PWebSocketChild::Write(
        const FileInputStreamParams& v__,
        Message* msg__) -> void
{
    Write((v__).fileDescriptorIndex(), msg__);
    // Sentinel = 'fileDescriptorIndex'
    (msg__)->WriteSentinel(587329112);
    Write((v__).behaviorFlags(), msg__);
    // Sentinel = 'behaviorFlags'
    (msg__)->WriteSentinel(2404401962);
    Write((v__).ioFlags(), msg__);
    // Sentinel = 'ioFlags'
    (msg__)->WriteSentinel(1483009730);
}

auto PWebSocketChild::Read(
        FileInputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->fileDescriptorIndex())), msg__, iter__)))) {
        FatalError("Error deserializing 'fileDescriptorIndex' (uint32_t) member of 'FileInputStreamParams'");
        return false;
    }
    // Sentinel = 'fileDescriptorIndex'
    if ((!((msg__)->ReadSentinel(iter__, 587329112)))) {
        FatalError("Error deserializing 'fileDescriptorIndex' (uint32_t) member of 'FileInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->behaviorFlags())), msg__, iter__)))) {
        FatalError("Error deserializing 'behaviorFlags' (int32_t) member of 'FileInputStreamParams'");
        return false;
    }
    // Sentinel = 'behaviorFlags'
    if ((!((msg__)->ReadSentinel(iter__, 2404401962)))) {
        FatalError("Error deserializing 'behaviorFlags' (int32_t) member of 'FileInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->ioFlags())), msg__, iter__)))) {
        FatalError("Error deserializing 'ioFlags' (int32_t) member of 'FileInputStreamParams'");
        return false;
    }
    // Sentinel = 'ioFlags'
    if ((!((msg__)->ReadSentinel(iter__, 1483009730)))) {
        FatalError("Error deserializing 'ioFlags' (int32_t) member of 'FileInputStreamParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const OptionalTransportProvider& v__,
        Message* msg__) -> void
{
    typedef OptionalTransportProvider type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'OptionalTransportProvider'
    (msg__)->WriteSentinel(1388363017);

    switch ((v__).type()) {
    case type__::TPTransportProviderParent:
        {
            FatalError("wrong side!");
            return;
        }
    case type__::TPTransportProviderChild:
        {
            Write((v__).get_PTransportProviderChild(), msg__, false);
            // Sentinel = 'TPTransportProviderChild'
            (msg__)->WriteSentinel(827320754);
            return;
        }
    case type__::Tvoid_t:
        {
            Write((v__).get_void_t(), msg__);
            // Sentinel = 'Tvoid_t'
            (msg__)->WriteSentinel(3041273328);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PWebSocketChild::Read(
        OptionalTransportProvider* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef OptionalTransportProvider type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("OptionalTransportProvider");
        return false;
    }
    // Sentinel = 'OptionalTransportProvider'
    if ((!((msg__)->ReadSentinel(iter__, 1388363017)))) {
        mozilla::ipc::UnionTypeReadError("OptionalTransportProvider");
        return false;
    }

    switch (type) {
    case type__::TPTransportProviderParent:
        {
            PTransportProviderChild* tmp = nullptr;
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_PTransportProviderChild())), msg__, iter__, false)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TPTransportProviderParent'
            if ((!((msg__)->ReadSentinel(iter__, 3404110961)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TPTransportProviderChild:
        {
            return false;
        }
    case type__::Tvoid_t:
        {
            void_t tmp = void_t();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_void_t())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((msg__)->ReadSentinel(iter__, 3041273328)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PWebSocketChild::Write(
        const OptionalPrincipalInfo& v__,
        Message* msg__) -> void
{
    typedef OptionalPrincipalInfo type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'OptionalPrincipalInfo'
    (msg__)->WriteSentinel(3041452007);

    switch ((v__).type()) {
    case type__::Tvoid_t:
        {
            Write((v__).get_void_t(), msg__);
            // Sentinel = 'Tvoid_t'
            (msg__)->WriteSentinel(3041273328);
            return;
        }
    case type__::TPrincipalInfo:
        {
            Write((v__).get_PrincipalInfo(), msg__);
            // Sentinel = 'TPrincipalInfo'
            (msg__)->WriteSentinel(1396743580);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PWebSocketChild::Read(
        OptionalPrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef OptionalPrincipalInfo type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("OptionalPrincipalInfo");
        return false;
    }
    // Sentinel = 'OptionalPrincipalInfo'
    if ((!((msg__)->ReadSentinel(iter__, 3041452007)))) {
        mozilla::ipc::UnionTypeReadError("OptionalPrincipalInfo");
        return false;
    }

    switch (type) {
    case type__::Tvoid_t:
        {
            void_t tmp = void_t();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_void_t())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((msg__)->ReadSentinel(iter__, 3041273328)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TPrincipalInfo:
        {
            PrincipalInfo tmp = PrincipalInfo();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_PrincipalInfo())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TPrincipalInfo'
            if ((!((msg__)->ReadSentinel(iter__, 1396743580)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PWebSocketChild::Write(
        const ExpandedPrincipalInfo& v__,
        Message* msg__) -> void
{
    Write((v__).attrs(), msg__);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(3014987797);
    Write((v__).whitelist(), msg__);
    // Sentinel = 'whitelist'
    (msg__)->WriteSentinel(3731637258);
}

auto PWebSocketChild::Read(
        ExpandedPrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->attrs())), msg__, iter__)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((msg__)->ReadSentinel(iter__, 3014987797)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    if ((!(Read((&((v__)->whitelist())), msg__, iter__)))) {
        FatalError("Error deserializing 'whitelist' (PrincipalInfo[]) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    // Sentinel = 'whitelist'
    if ((!((msg__)->ReadSentinel(iter__, 3731637258)))) {
        FatalError("Error deserializing 'whitelist' (PrincipalInfo[]) member of 'ExpandedPrincipalInfo'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const JSURIParams& v__,
        Message* msg__) -> void
{
    Write((v__).simpleParams(), msg__);
    // Sentinel = 'simpleParams'
    (msg__)->WriteSentinel(3404291700);
    Write((v__).baseURI(), msg__);
    // Sentinel = 'baseURI'
    (msg__)->WriteSentinel(1836705256);
}

auto PWebSocketChild::Read(
        JSURIParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->simpleParams())), msg__, iter__)))) {
        FatalError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'JSURIParams'");
        return false;
    }
    // Sentinel = 'simpleParams'
    if ((!((msg__)->ReadSentinel(iter__, 3404291700)))) {
        FatalError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'JSURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->baseURI())), msg__, iter__)))) {
        FatalError("Error deserializing 'baseURI' (OptionalURIParams) member of 'JSURIParams'");
        return false;
    }
    // Sentinel = 'baseURI'
    if ((!((msg__)->ReadSentinel(iter__, 1836705256)))) {
        FatalError("Error deserializing 'baseURI' (OptionalURIParams) member of 'JSURIParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const HostObjectURIParams& v__,
        Message* msg__) -> void
{
    Write((v__).simpleParams(), msg__);
    // Sentinel = 'simpleParams'
    (msg__)->WriteSentinel(3404291700);
    Write((v__).principal(), msg__);
    // Sentinel = 'principal'
    (msg__)->WriteSentinel(732240927);
}

auto PWebSocketChild::Read(
        HostObjectURIParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->simpleParams())), msg__, iter__)))) {
        FatalError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'HostObjectURIParams'");
        return false;
    }
    // Sentinel = 'simpleParams'
    if ((!((msg__)->ReadSentinel(iter__, 3404291700)))) {
        FatalError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'HostObjectURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->principal())), msg__, iter__)))) {
        FatalError("Error deserializing 'principal' (OptionalPrincipalInfo) member of 'HostObjectURIParams'");
        return false;
    }
    // Sentinel = 'principal'
    if ((!((msg__)->ReadSentinel(iter__, 732240927)))) {
        FatalError("Error deserializing 'principal' (OptionalPrincipalInfo) member of 'HostObjectURIParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const PWebSocketChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PWebSocketChild::Read(
        PWebSocketChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PWebSocket", PWebSocketMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PWebSocketChild*>((actor).value());
    return true;
}

auto PWebSocketChild::Write(
        const PTransportProviderChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PWebSocketChild::Read(
        PTransportProviderChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PTransportProvider", PTransportProviderMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PTransportProviderChild*>((actor).value());
    return true;
}

auto PWebSocketChild::Write(
        const PrincipalInfo& v__,
        Message* msg__) -> void
{
    typedef PrincipalInfo type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'PrincipalInfo'
    (msg__)->WriteSentinel(4194518819);

    switch ((v__).type()) {
    case type__::TContentPrincipalInfo:
        {
            Write((v__).get_ContentPrincipalInfo(), msg__);
            // Sentinel = 'TContentPrincipalInfo'
            (msg__)->WriteSentinel(3677342258);
            return;
        }
    case type__::TSystemPrincipalInfo:
        {
            Write((v__).get_SystemPrincipalInfo(), msg__);
            // Sentinel = 'TSystemPrincipalInfo'
            (msg__)->WriteSentinel(3590603679);
            return;
        }
    case type__::TNullPrincipalInfo:
        {
            Write((v__).get_NullPrincipalInfo(), msg__);
            // Sentinel = 'TNullPrincipalInfo'
            (msg__)->WriteSentinel(3477774965);
            return;
        }
    case type__::TExpandedPrincipalInfo:
        {
            Write((v__).get_ExpandedPrincipalInfo(), msg__);
            // Sentinel = 'TExpandedPrincipalInfo'
            (msg__)->WriteSentinel(589324917);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PWebSocketChild::Read(
        PrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef PrincipalInfo type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("PrincipalInfo");
        return false;
    }
    // Sentinel = 'PrincipalInfo'
    if ((!((msg__)->ReadSentinel(iter__, 4194518819)))) {
        mozilla::ipc::UnionTypeReadError("PrincipalInfo");
        return false;
    }

    switch (type) {
    case type__::TContentPrincipalInfo:
        {
            ContentPrincipalInfo tmp = ContentPrincipalInfo();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ContentPrincipalInfo())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TContentPrincipalInfo'
            if ((!((msg__)->ReadSentinel(iter__, 3677342258)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TSystemPrincipalInfo:
        {
            SystemPrincipalInfo tmp = SystemPrincipalInfo();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_SystemPrincipalInfo())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TSystemPrincipalInfo'
            if ((!((msg__)->ReadSentinel(iter__, 3590603679)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TNullPrincipalInfo:
        {
            NullPrincipalInfo tmp = NullPrincipalInfo();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_NullPrincipalInfo())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TNullPrincipalInfo'
            if ((!((msg__)->ReadSentinel(iter__, 3477774965)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TExpandedPrincipalInfo:
        {
            ExpandedPrincipalInfo tmp = ExpandedPrincipalInfo();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_ExpandedPrincipalInfo())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TExpandedPrincipalInfo'
            if ((!((msg__)->ReadSentinel(iter__, 589324917)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PWebSocketChild::Write(
        const TemporaryFileInputStreamParams& v__,
        Message* msg__) -> void
{
    Write((v__).fileDescriptorIndex(), msg__);
    // Sentinel = 'fileDescriptorIndex'
    (msg__)->WriteSentinel(587329112);
    Write((v__).startPos(), msg__);
    // Sentinel = 'startPos'
    (msg__)->WriteSentinel(557207962);
    Write((v__).endPos(), msg__);
    // Sentinel = 'endPos'
    (msg__)->WriteSentinel(881536245);
}

auto PWebSocketChild::Read(
        TemporaryFileInputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->fileDescriptorIndex())), msg__, iter__)))) {
        FatalError("Error deserializing 'fileDescriptorIndex' (uint32_t) member of 'TemporaryFileInputStreamParams'");
        return false;
    }
    // Sentinel = 'fileDescriptorIndex'
    if ((!((msg__)->ReadSentinel(iter__, 587329112)))) {
        FatalError("Error deserializing 'fileDescriptorIndex' (uint32_t) member of 'TemporaryFileInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->startPos())), msg__, iter__)))) {
        FatalError("Error deserializing 'startPos' (uint64_t) member of 'TemporaryFileInputStreamParams'");
        return false;
    }
    // Sentinel = 'startPos'
    if ((!((msg__)->ReadSentinel(iter__, 557207962)))) {
        FatalError("Error deserializing 'startPos' (uint64_t) member of 'TemporaryFileInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->endPos())), msg__, iter__)))) {
        FatalError("Error deserializing 'endPos' (uint64_t) member of 'TemporaryFileInputStreamParams'");
        return false;
    }
    // Sentinel = 'endPos'
    if ((!((msg__)->ReadSentinel(iter__, 881536245)))) {
        FatalError("Error deserializing 'endPos' (uint64_t) member of 'TemporaryFileInputStreamParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const MIMEInputStreamParams& v__,
        Message* msg__) -> void
{
    Write((v__).optionalStream(), msg__);
    // Sentinel = 'optionalStream'
    (msg__)->WriteSentinel(1003718562);
    Write((v__).headers(), msg__);
    // Sentinel = 'headers'
    (msg__)->WriteSentinel(4284175217);
    Write((v__).contentLength(), msg__);
    // Sentinel = 'contentLength'
    (msg__)->WriteSentinel(2619011242);
    Write((v__).startedReading(), msg__);
    // Sentinel = 'startedReading'
    (msg__)->WriteSentinel(1906875903);
    Write((v__).addContentLength(), msg__);
    // Sentinel = 'addContentLength'
    (msg__)->WriteSentinel(1944843048);
}

auto PWebSocketChild::Read(
        MIMEInputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->optionalStream())), msg__, iter__)))) {
        FatalError("Error deserializing 'optionalStream' (OptionalInputStreamParams) member of 'MIMEInputStreamParams'");
        return false;
    }
    // Sentinel = 'optionalStream'
    if ((!((msg__)->ReadSentinel(iter__, 1003718562)))) {
        FatalError("Error deserializing 'optionalStream' (OptionalInputStreamParams) member of 'MIMEInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->headers())), msg__, iter__)))) {
        FatalError("Error deserializing 'headers' (nsCString) member of 'MIMEInputStreamParams'");
        return false;
    }
    // Sentinel = 'headers'
    if ((!((msg__)->ReadSentinel(iter__, 4284175217)))) {
        FatalError("Error deserializing 'headers' (nsCString) member of 'MIMEInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->contentLength())), msg__, iter__)))) {
        FatalError("Error deserializing 'contentLength' (nsCString) member of 'MIMEInputStreamParams'");
        return false;
    }
    // Sentinel = 'contentLength'
    if ((!((msg__)->ReadSentinel(iter__, 2619011242)))) {
        FatalError("Error deserializing 'contentLength' (nsCString) member of 'MIMEInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->startedReading())), msg__, iter__)))) {
        FatalError("Error deserializing 'startedReading' (bool) member of 'MIMEInputStreamParams'");
        return false;
    }
    // Sentinel = 'startedReading'
    if ((!((msg__)->ReadSentinel(iter__, 1906875903)))) {
        FatalError("Error deserializing 'startedReading' (bool) member of 'MIMEInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->addContentLength())), msg__, iter__)))) {
        FatalError("Error deserializing 'addContentLength' (bool) member of 'MIMEInputStreamParams'");
        return false;
    }
    // Sentinel = 'addContentLength'
    if ((!((msg__)->ReadSentinel(iter__, 1944843048)))) {
        FatalError("Error deserializing 'addContentLength' (bool) member of 'MIMEInputStreamParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const JARURIParams& v__,
        Message* msg__) -> void
{
    Write((v__).jarFile(), msg__);
    // Sentinel = 'jarFile'
    (msg__)->WriteSentinel(1572070078);
    Write((v__).jarEntry(), msg__);
    // Sentinel = 'jarEntry'
    (msg__)->WriteSentinel(941016033);
    Write((v__).charset(), msg__);
    // Sentinel = 'charset'
    (msg__)->WriteSentinel(1551550891);
}

auto PWebSocketChild::Read(
        JARURIParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->jarFile())), msg__, iter__)))) {
        FatalError("Error deserializing 'jarFile' (URIParams) member of 'JARURIParams'");
        return false;
    }
    // Sentinel = 'jarFile'
    if ((!((msg__)->ReadSentinel(iter__, 1572070078)))) {
        FatalError("Error deserializing 'jarFile' (URIParams) member of 'JARURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->jarEntry())), msg__, iter__)))) {
        FatalError("Error deserializing 'jarEntry' (URIParams) member of 'JARURIParams'");
        return false;
    }
    // Sentinel = 'jarEntry'
    if ((!((msg__)->ReadSentinel(iter__, 941016033)))) {
        FatalError("Error deserializing 'jarEntry' (URIParams) member of 'JARURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->charset())), msg__, iter__)))) {
        FatalError("Error deserializing 'charset' (nsCString) member of 'JARURIParams'");
        return false;
    }
    // Sentinel = 'charset'
    if ((!((msg__)->ReadSentinel(iter__, 1551550891)))) {
        FatalError("Error deserializing 'charset' (nsCString) member of 'JARURIParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const ContentPrincipalInfo& v__,
        Message* msg__) -> void
{
    Write((v__).attrs(), msg__);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(3014987797);
    Write((v__).originNoSuffix(), msg__);
    // Sentinel = 'originNoSuffix'
    (msg__)->WriteSentinel(2833071422);
    Write((v__).spec(), msg__);
    // Sentinel = 'spec'
    (msg__)->WriteSentinel(1630740541);
}

auto PWebSocketChild::Read(
        ContentPrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->attrs())), msg__, iter__)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((msg__)->ReadSentinel(iter__, 3014987797)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'ContentPrincipalInfo'");
        return false;
    }
    if ((!(Read((&((v__)->originNoSuffix())), msg__, iter__)))) {
        FatalError("Error deserializing 'originNoSuffix' (ContentPrincipalInfoOriginNoSuffix) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'originNoSuffix'
    if ((!((msg__)->ReadSentinel(iter__, 2833071422)))) {
        FatalError("Error deserializing 'originNoSuffix' (ContentPrincipalInfoOriginNoSuffix) member of 'ContentPrincipalInfo'");
        return false;
    }
    if ((!(Read((&((v__)->spec())), msg__, iter__)))) {
        FatalError("Error deserializing 'spec' (nsCString) member of 'ContentPrincipalInfo'");
        return false;
    }
    // Sentinel = 'spec'
    if ((!((msg__)->ReadSentinel(iter__, 1630740541)))) {
        FatalError("Error deserializing 'spec' (nsCString) member of 'ContentPrincipalInfo'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const SameProcessInputStreamParams& v__,
        Message* msg__) -> void
{
    Write((v__).addRefedInputStream(), msg__);
    // Sentinel = 'addRefedInputStream'
    (msg__)->WriteSentinel(2040210458);
}

auto PWebSocketChild::Read(
        SameProcessInputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->addRefedInputStream())), msg__, iter__)))) {
        FatalError("Error deserializing 'addRefedInputStream' (intptr_t) member of 'SameProcessInputStreamParams'");
        return false;
    }
    // Sentinel = 'addRefedInputStream'
    if ((!((msg__)->ReadSentinel(iter__, 2040210458)))) {
        FatalError("Error deserializing 'addRefedInputStream' (intptr_t) member of 'SameProcessInputStreamParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const MultiplexInputStreamParams& v__,
        Message* msg__) -> void
{
    Write((v__).streams(), msg__);
    // Sentinel = 'streams'
    (msg__)->WriteSentinel(4240383220);
    Write((v__).currentStream(), msg__);
    // Sentinel = 'currentStream'
    (msg__)->WriteSentinel(682778074);
    Write((v__).status(), msg__);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(3714608576);
    Write((v__).startedReadingCurrent(), msg__);
    // Sentinel = 'startedReadingCurrent'
    (msg__)->WriteSentinel(970542033);
}

auto PWebSocketChild::Read(
        MultiplexInputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->streams())), msg__, iter__)))) {
        FatalError("Error deserializing 'streams' (InputStreamParams[]) member of 'MultiplexInputStreamParams'");
        return false;
    }
    // Sentinel = 'streams'
    if ((!((msg__)->ReadSentinel(iter__, 4240383220)))) {
        FatalError("Error deserializing 'streams' (InputStreamParams[]) member of 'MultiplexInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->currentStream())), msg__, iter__)))) {
        FatalError("Error deserializing 'currentStream' (uint32_t) member of 'MultiplexInputStreamParams'");
        return false;
    }
    // Sentinel = 'currentStream'
    if ((!((msg__)->ReadSentinel(iter__, 682778074)))) {
        FatalError("Error deserializing 'currentStream' (uint32_t) member of 'MultiplexInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->status())), msg__, iter__)))) {
        FatalError("Error deserializing 'status' (nsresult) member of 'MultiplexInputStreamParams'");
        return false;
    }
    // Sentinel = 'status'
    if ((!((msg__)->ReadSentinel(iter__, 3714608576)))) {
        FatalError("Error deserializing 'status' (nsresult) member of 'MultiplexInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->startedReadingCurrent())), msg__, iter__)))) {
        FatalError("Error deserializing 'startedReadingCurrent' (bool) member of 'MultiplexInputStreamParams'");
        return false;
    }
    // Sentinel = 'startedReadingCurrent'
    if ((!((msg__)->ReadSentinel(iter__, 970542033)))) {
        FatalError("Error deserializing 'startedReadingCurrent' (bool) member of 'MultiplexInputStreamParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const OptionalLoadInfoArgs& v__,
        Message* msg__) -> void
{
    typedef OptionalLoadInfoArgs type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'OptionalLoadInfoArgs'
    (msg__)->WriteSentinel(1063815263);

    switch ((v__).type()) {
    case type__::Tvoid_t:
        {
            Write((v__).get_void_t(), msg__);
            // Sentinel = 'Tvoid_t'
            (msg__)->WriteSentinel(3041273328);
            return;
        }
    case type__::TLoadInfoArgs:
        {
            Write((v__).get_LoadInfoArgs(), msg__);
            // Sentinel = 'TLoadInfoArgs'
            (msg__)->WriteSentinel(3550797606);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PWebSocketChild::Read(
        OptionalLoadInfoArgs* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef OptionalLoadInfoArgs type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("OptionalLoadInfoArgs");
        return false;
    }
    // Sentinel = 'OptionalLoadInfoArgs'
    if ((!((msg__)->ReadSentinel(iter__, 1063815263)))) {
        mozilla::ipc::UnionTypeReadError("OptionalLoadInfoArgs");
        return false;
    }

    switch (type) {
    case type__::Tvoid_t:
        {
            void_t tmp = void_t();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_void_t())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'Tvoid_t'
            if ((!((msg__)->ReadSentinel(iter__, 3041273328)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TLoadInfoArgs:
        {
            LoadInfoArgs tmp = LoadInfoArgs();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_LoadInfoArgs())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TLoadInfoArgs'
            if ((!((msg__)->ReadSentinel(iter__, 3550797606)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PWebSocketChild::Write(
        const SimpleURIParams& v__,
        Message* msg__) -> void
{
    Write((v__).scheme(), msg__);
    // Sentinel = 'scheme'
    (msg__)->WriteSentinel(3619238715);
    Write((v__).path(), msg__);
    // Sentinel = 'path'
    (msg__)->WriteSentinel(913629401);
    Write((v__).ref(), msg__);
    // Sentinel = 'ref'
    (msg__)->WriteSentinel(2626476732);
    Write((v__).query(), msg__);
    // Sentinel = 'query'
    (msg__)->WriteSentinel(4249802777);
    Write((v__).isMutable(), msg__);
    // Sentinel = 'isMutable'
    (msg__)->WriteSentinel(3552466783);
}

auto PWebSocketChild::Read(
        SimpleURIParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->scheme())), msg__, iter__)))) {
        FatalError("Error deserializing 'scheme' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    // Sentinel = 'scheme'
    if ((!((msg__)->ReadSentinel(iter__, 3619238715)))) {
        FatalError("Error deserializing 'scheme' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->path())), msg__, iter__)))) {
        FatalError("Error deserializing 'path' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    // Sentinel = 'path'
    if ((!((msg__)->ReadSentinel(iter__, 913629401)))) {
        FatalError("Error deserializing 'path' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->ref())), msg__, iter__)))) {
        FatalError("Error deserializing 'ref' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    // Sentinel = 'ref'
    if ((!((msg__)->ReadSentinel(iter__, 2626476732)))) {
        FatalError("Error deserializing 'ref' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->query())), msg__, iter__)))) {
        FatalError("Error deserializing 'query' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    // Sentinel = 'query'
    if ((!((msg__)->ReadSentinel(iter__, 4249802777)))) {
        FatalError("Error deserializing 'query' (nsCString) member of 'SimpleURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->isMutable())), msg__, iter__)))) {
        FatalError("Error deserializing 'isMutable' (bool) member of 'SimpleURIParams'");
        return false;
    }
    // Sentinel = 'isMutable'
    if ((!((msg__)->ReadSentinel(iter__, 3552466783)))) {
        FatalError("Error deserializing 'isMutable' (bool) member of 'SimpleURIParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const StringInputStreamParams& v__,
        Message* msg__) -> void
{
    Write((v__).data(), msg__);
    // Sentinel = 'data'
    (msg__)->WriteSentinel(843352540);
}

auto PWebSocketChild::Read(
        StringInputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->data())), msg__, iter__)))) {
        FatalError("Error deserializing 'data' (nsCString) member of 'StringInputStreamParams'");
        return false;
    }
    // Sentinel = 'data'
    if ((!((msg__)->ReadSentinel(iter__, 843352540)))) {
        FatalError("Error deserializing 'data' (nsCString) member of 'StringInputStreamParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const NullPrincipalURIParams& v__,
        Message* msg__) -> void
{
}

auto PWebSocketChild::Read(
        NullPrincipalURIParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    return true;
}

auto PWebSocketChild::Write(
        const IconURIParams& v__,
        Message* msg__) -> void
{
    Write((v__).uri(), msg__);
    // Sentinel = 'uri'
    (msg__)->WriteSentinel(1453210605);
    Write((v__).size(), msg__);
    // Sentinel = 'size'
    (msg__)->WriteSentinel(931048223);
    Write((v__).contentType(), msg__);
    // Sentinel = 'contentType'
    (msg__)->WriteSentinel(2092571716);
    Write((v__).fileName(), msg__);
    // Sentinel = 'fileName'
    (msg__)->WriteSentinel(3833449039);
    Write((v__).stockIcon(), msg__);
    // Sentinel = 'stockIcon'
    (msg__)->WriteSentinel(3601770784);
    Write((v__).iconSize(), msg__);
    // Sentinel = 'iconSize'
    (msg__)->WriteSentinel(2585310920);
    Write((v__).iconState(), msg__);
    // Sentinel = 'iconState'
    (msg__)->WriteSentinel(3444306207);
}

auto PWebSocketChild::Read(
        IconURIParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->uri())), msg__, iter__)))) {
        FatalError("Error deserializing 'uri' (OptionalURIParams) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'uri'
    if ((!((msg__)->ReadSentinel(iter__, 1453210605)))) {
        FatalError("Error deserializing 'uri' (OptionalURIParams) member of 'IconURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->size())), msg__, iter__)))) {
        FatalError("Error deserializing 'size' (uint32_t) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'size'
    if ((!((msg__)->ReadSentinel(iter__, 931048223)))) {
        FatalError("Error deserializing 'size' (uint32_t) member of 'IconURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->contentType())), msg__, iter__)))) {
        FatalError("Error deserializing 'contentType' (nsCString) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'contentType'
    if ((!((msg__)->ReadSentinel(iter__, 2092571716)))) {
        FatalError("Error deserializing 'contentType' (nsCString) member of 'IconURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->fileName())), msg__, iter__)))) {
        FatalError("Error deserializing 'fileName' (nsCString) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'fileName'
    if ((!((msg__)->ReadSentinel(iter__, 3833449039)))) {
        FatalError("Error deserializing 'fileName' (nsCString) member of 'IconURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->stockIcon())), msg__, iter__)))) {
        FatalError("Error deserializing 'stockIcon' (nsCString) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'stockIcon'
    if ((!((msg__)->ReadSentinel(iter__, 3601770784)))) {
        FatalError("Error deserializing 'stockIcon' (nsCString) member of 'IconURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->iconSize())), msg__, iter__)))) {
        FatalError("Error deserializing 'iconSize' (int32_t) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'iconSize'
    if ((!((msg__)->ReadSentinel(iter__, 2585310920)))) {
        FatalError("Error deserializing 'iconSize' (int32_t) member of 'IconURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->iconState())), msg__, iter__)))) {
        FatalError("Error deserializing 'iconState' (int32_t) member of 'IconURIParams'");
        return false;
    }
    // Sentinel = 'iconState'
    if ((!((msg__)->ReadSentinel(iter__, 3444306207)))) {
        FatalError("Error deserializing 'iconState' (int32_t) member of 'IconURIParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const SimpleNestedURIParams& v__,
        Message* msg__) -> void
{
    Write((v__).simpleParams(), msg__);
    // Sentinel = 'simpleParams'
    (msg__)->WriteSentinel(3404291700);
    Write((v__).innerURI(), msg__);
    // Sentinel = 'innerURI'
    (msg__)->WriteSentinel(2573245334);
}

auto PWebSocketChild::Read(
        SimpleNestedURIParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->simpleParams())), msg__, iter__)))) {
        FatalError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'SimpleNestedURIParams'");
        return false;
    }
    // Sentinel = 'simpleParams'
    if ((!((msg__)->ReadSentinel(iter__, 3404291700)))) {
        FatalError("Error deserializing 'simpleParams' (SimpleURIParams) member of 'SimpleNestedURIParams'");
        return false;
    }
    if ((!(Read((&((v__)->innerURI())), msg__, iter__)))) {
        FatalError("Error deserializing 'innerURI' (URIParams) member of 'SimpleNestedURIParams'");
        return false;
    }
    // Sentinel = 'innerURI'
    if ((!((msg__)->ReadSentinel(iter__, 2573245334)))) {
        FatalError("Error deserializing 'innerURI' (URIParams) member of 'SimpleNestedURIParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const InputStreamParams& v__,
        Message* msg__) -> void
{
    typedef InputStreamParams type__;
    Write(int((v__).type()), msg__);
    // Sentinel = 'InputStreamParams'
    (msg__)->WriteSentinel(4114814015);

    switch ((v__).type()) {
    case type__::TStringInputStreamParams:
        {
            Write((v__).get_StringInputStreamParams(), msg__);
            // Sentinel = 'TStringInputStreamParams'
            (msg__)->WriteSentinel(3395831651);
            return;
        }
    case type__::TFileInputStreamParams:
        {
            Write((v__).get_FileInputStreamParams(), msg__);
            // Sentinel = 'TFileInputStreamParams'
            (msg__)->WriteSentinel(2543620282);
            return;
        }
    case type__::TPartialFileInputStreamParams:
        {
            Write((v__).get_PartialFileInputStreamParams(), msg__);
            // Sentinel = 'TPartialFileInputStreamParams'
            (msg__)->WriteSentinel(2161859888);
            return;
        }
    case type__::TTemporaryFileInputStreamParams:
        {
            Write((v__).get_TemporaryFileInputStreamParams(), msg__);
            // Sentinel = 'TTemporaryFileInputStreamParams'
            (msg__)->WriteSentinel(587771548);
            return;
        }
    case type__::TBufferedInputStreamParams:
        {
            Write((v__).get_BufferedInputStreamParams(), msg__);
            // Sentinel = 'TBufferedInputStreamParams'
            (msg__)->WriteSentinel(1698289307);
            return;
        }
    case type__::TMIMEInputStreamParams:
        {
            Write((v__).get_MIMEInputStreamParams(), msg__);
            // Sentinel = 'TMIMEInputStreamParams'
            (msg__)->WriteSentinel(1948001964);
            return;
        }
    case type__::TMultiplexInputStreamParams:
        {
            Write((v__).get_MultiplexInputStreamParams(), msg__);
            // Sentinel = 'TMultiplexInputStreamParams'
            (msg__)->WriteSentinel(3317853213);
            return;
        }
    case type__::TRemoteInputStreamParams:
        {
            Write((v__).get_RemoteInputStreamParams(), msg__);
            // Sentinel = 'TRemoteInputStreamParams'
            (msg__)->WriteSentinel(3238803924);
            return;
        }
    case type__::TSameProcessInputStreamParams:
        {
            Write((v__).get_SameProcessInputStreamParams(), msg__);
            // Sentinel = 'TSameProcessInputStreamParams'
            (msg__)->WriteSentinel(3166141548);
            return;
        }
    default:
        {
            FatalError("unknown union type");
            return;
        }
    }
}

auto PWebSocketChild::Read(
        InputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    typedef InputStreamParams type__;
    int type;
    if ((!(Read((&(type)), msg__, iter__)))) {
        mozilla::ipc::UnionTypeReadError("InputStreamParams");
        return false;
    }
    // Sentinel = 'InputStreamParams'
    if ((!((msg__)->ReadSentinel(iter__, 4114814015)))) {
        mozilla::ipc::UnionTypeReadError("InputStreamParams");
        return false;
    }

    switch (type) {
    case type__::TStringInputStreamParams:
        {
            StringInputStreamParams tmp = StringInputStreamParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_StringInputStreamParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TStringInputStreamParams'
            if ((!((msg__)->ReadSentinel(iter__, 3395831651)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TFileInputStreamParams:
        {
            FileInputStreamParams tmp = FileInputStreamParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_FileInputStreamParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TFileInputStreamParams'
            if ((!((msg__)->ReadSentinel(iter__, 2543620282)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TPartialFileInputStreamParams:
        {
            PartialFileInputStreamParams tmp = PartialFileInputStreamParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_PartialFileInputStreamParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TPartialFileInputStreamParams'
            if ((!((msg__)->ReadSentinel(iter__, 2161859888)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TTemporaryFileInputStreamParams:
        {
            TemporaryFileInputStreamParams tmp = TemporaryFileInputStreamParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_TemporaryFileInputStreamParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TTemporaryFileInputStreamParams'
            if ((!((msg__)->ReadSentinel(iter__, 587771548)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TBufferedInputStreamParams:
        {
            BufferedInputStreamParams tmp = BufferedInputStreamParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_BufferedInputStreamParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TBufferedInputStreamParams'
            if ((!((msg__)->ReadSentinel(iter__, 1698289307)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TMIMEInputStreamParams:
        {
            MIMEInputStreamParams tmp = MIMEInputStreamParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_MIMEInputStreamParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TMIMEInputStreamParams'
            if ((!((msg__)->ReadSentinel(iter__, 1948001964)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TMultiplexInputStreamParams:
        {
            MultiplexInputStreamParams tmp = MultiplexInputStreamParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_MultiplexInputStreamParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TMultiplexInputStreamParams'
            if ((!((msg__)->ReadSentinel(iter__, 3317853213)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TRemoteInputStreamParams:
        {
            RemoteInputStreamParams tmp = RemoteInputStreamParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_RemoteInputStreamParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TRemoteInputStreamParams'
            if ((!((msg__)->ReadSentinel(iter__, 3238803924)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    case type__::TSameProcessInputStreamParams:
        {
            SameProcessInputStreamParams tmp = SameProcessInputStreamParams();
            (*(v__)) = tmp;
            if ((!(Read((&((v__)->get_SameProcessInputStreamParams())), msg__, iter__)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            // Sentinel = 'TSameProcessInputStreamParams'
            if ((!((msg__)->ReadSentinel(iter__, 3166141548)))) {
                FatalError("Error deserializing Union type");
                return false;
            }
            return true;
        }
    default:
        {
            FatalError("unknown union type");
            return false;
        }
    }
}

auto PWebSocketChild::Write(
        const LoadInfoArgs& v__,
        Message* msg__) -> void
{
    Write((v__).requestingPrincipalInfo(), msg__);
    // Sentinel = 'requestingPrincipalInfo'
    (msg__)->WriteSentinel(3181737698);
    Write((v__).triggeringPrincipalInfo(), msg__);
    // Sentinel = 'triggeringPrincipalInfo'
    (msg__)->WriteSentinel(4145483429);
    Write((v__).principalToInheritInfo(), msg__);
    // Sentinel = 'principalToInheritInfo'
    (msg__)->WriteSentinel(3087636212);
    Write((v__).securityFlags(), msg__);
    // Sentinel = 'securityFlags'
    (msg__)->WriteSentinel(1948430358);
    Write((v__).contentPolicyType(), msg__);
    // Sentinel = 'contentPolicyType'
    (msg__)->WriteSentinel(3089607692);
    Write((v__).tainting(), msg__);
    // Sentinel = 'tainting'
    (msg__)->WriteSentinel(2959281848);
    Write((v__).upgradeInsecureRequests(), msg__);
    // Sentinel = 'upgradeInsecureRequests'
    (msg__)->WriteSentinel(220885803);
    Write((v__).verifySignedContent(), msg__);
    // Sentinel = 'verifySignedContent'
    (msg__)->WriteSentinel(4254189773);
    Write((v__).enforceSRI(), msg__);
    // Sentinel = 'enforceSRI'
    (msg__)->WriteSentinel(3434063852);
    Write((v__).forceAllowDataURI(), msg__);
    // Sentinel = 'forceAllowDataURI'
    (msg__)->WriteSentinel(1654503267);
    Write((v__).forceInheritPrincipalDropped(), msg__);
    // Sentinel = 'forceInheritPrincipalDropped'
    (msg__)->WriteSentinel(2486717930);
    Write((v__).innerWindowID(), msg__);
    // Sentinel = 'innerWindowID'
    (msg__)->WriteSentinel(4018103366);
    Write((v__).outerWindowID(), msg__);
    // Sentinel = 'outerWindowID'
    (msg__)->WriteSentinel(2801565535);
    Write((v__).parentOuterWindowID(), msg__);
    // Sentinel = 'parentOuterWindowID'
    (msg__)->WriteSentinel(1687557921);
    Write((v__).frameOuterWindowID(), msg__);
    // Sentinel = 'frameOuterWindowID'
    (msg__)->WriteSentinel(2873618957);
    Write((v__).enforceSecurity(), msg__);
    // Sentinel = 'enforceSecurity'
    (msg__)->WriteSentinel(646099439);
    Write((v__).initialSecurityCheckDone(), msg__);
    // Sentinel = 'initialSecurityCheckDone'
    (msg__)->WriteSentinel(872070054);
    Write((v__).isInThirdPartyContext(), msg__);
    // Sentinel = 'isInThirdPartyContext'
    (msg__)->WriteSentinel(525088520);
    Write((v__).originAttributes(), msg__);
    // Sentinel = 'originAttributes'
    (msg__)->WriteSentinel(2655275965);
    Write((v__).redirectChainIncludingInternalRedirects(), msg__);
    // Sentinel = 'redirectChainIncludingInternalRedirects'
    (msg__)->WriteSentinel(967904109);
    Write((v__).redirectChain(), msg__);
    // Sentinel = 'redirectChain'
    (msg__)->WriteSentinel(2550711462);
    Write((v__).corsUnsafeHeaders(), msg__);
    // Sentinel = 'corsUnsafeHeaders'
    (msg__)->WriteSentinel(2369694136);
    Write((v__).forcePreflight(), msg__);
    // Sentinel = 'forcePreflight'
    (msg__)->WriteSentinel(2198503272);
    Write((v__).isPreflight(), msg__);
    // Sentinel = 'isPreflight'
    (msg__)->WriteSentinel(3402379662);
    Write((v__).loadTriggeredFromExternal(), msg__);
    // Sentinel = 'loadTriggeredFromExternal'
    (msg__)->WriteSentinel(273089659);
    Write((v__).isFromProcessingFrameAttributes(), msg__);
    // Sentinel = 'isFromProcessingFrameAttributes'
    (msg__)->WriteSentinel(2970116332);
}

auto PWebSocketChild::Read(
        LoadInfoArgs* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->requestingPrincipalInfo())), msg__, iter__)))) {
        FatalError("Error deserializing 'requestingPrincipalInfo' (OptionalPrincipalInfo) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'requestingPrincipalInfo'
    if ((!((msg__)->ReadSentinel(iter__, 3181737698)))) {
        FatalError("Error deserializing 'requestingPrincipalInfo' (OptionalPrincipalInfo) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->triggeringPrincipalInfo())), msg__, iter__)))) {
        FatalError("Error deserializing 'triggeringPrincipalInfo' (PrincipalInfo) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'triggeringPrincipalInfo'
    if ((!((msg__)->ReadSentinel(iter__, 4145483429)))) {
        FatalError("Error deserializing 'triggeringPrincipalInfo' (PrincipalInfo) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->principalToInheritInfo())), msg__, iter__)))) {
        FatalError("Error deserializing 'principalToInheritInfo' (OptionalPrincipalInfo) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'principalToInheritInfo'
    if ((!((msg__)->ReadSentinel(iter__, 3087636212)))) {
        FatalError("Error deserializing 'principalToInheritInfo' (OptionalPrincipalInfo) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->securityFlags())), msg__, iter__)))) {
        FatalError("Error deserializing 'securityFlags' (uint32_t) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'securityFlags'
    if ((!((msg__)->ReadSentinel(iter__, 1948430358)))) {
        FatalError("Error deserializing 'securityFlags' (uint32_t) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->contentPolicyType())), msg__, iter__)))) {
        FatalError("Error deserializing 'contentPolicyType' (uint32_t) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'contentPolicyType'
    if ((!((msg__)->ReadSentinel(iter__, 3089607692)))) {
        FatalError("Error deserializing 'contentPolicyType' (uint32_t) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->tainting())), msg__, iter__)))) {
        FatalError("Error deserializing 'tainting' (uint32_t) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'tainting'
    if ((!((msg__)->ReadSentinel(iter__, 2959281848)))) {
        FatalError("Error deserializing 'tainting' (uint32_t) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->upgradeInsecureRequests())), msg__, iter__)))) {
        FatalError("Error deserializing 'upgradeInsecureRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'upgradeInsecureRequests'
    if ((!((msg__)->ReadSentinel(iter__, 220885803)))) {
        FatalError("Error deserializing 'upgradeInsecureRequests' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->verifySignedContent())), msg__, iter__)))) {
        FatalError("Error deserializing 'verifySignedContent' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'verifySignedContent'
    if ((!((msg__)->ReadSentinel(iter__, 4254189773)))) {
        FatalError("Error deserializing 'verifySignedContent' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->enforceSRI())), msg__, iter__)))) {
        FatalError("Error deserializing 'enforceSRI' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'enforceSRI'
    if ((!((msg__)->ReadSentinel(iter__, 3434063852)))) {
        FatalError("Error deserializing 'enforceSRI' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->forceAllowDataURI())), msg__, iter__)))) {
        FatalError("Error deserializing 'forceAllowDataURI' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'forceAllowDataURI'
    if ((!((msg__)->ReadSentinel(iter__, 1654503267)))) {
        FatalError("Error deserializing 'forceAllowDataURI' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->forceInheritPrincipalDropped())), msg__, iter__)))) {
        FatalError("Error deserializing 'forceInheritPrincipalDropped' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'forceInheritPrincipalDropped'
    if ((!((msg__)->ReadSentinel(iter__, 2486717930)))) {
        FatalError("Error deserializing 'forceInheritPrincipalDropped' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->innerWindowID())), msg__, iter__)))) {
        FatalError("Error deserializing 'innerWindowID' (uint64_t) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'innerWindowID'
    if ((!((msg__)->ReadSentinel(iter__, 4018103366)))) {
        FatalError("Error deserializing 'innerWindowID' (uint64_t) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->outerWindowID())), msg__, iter__)))) {
        FatalError("Error deserializing 'outerWindowID' (uint64_t) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'outerWindowID'
    if ((!((msg__)->ReadSentinel(iter__, 2801565535)))) {
        FatalError("Error deserializing 'outerWindowID' (uint64_t) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->parentOuterWindowID())), msg__, iter__)))) {
        FatalError("Error deserializing 'parentOuterWindowID' (uint64_t) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'parentOuterWindowID'
    if ((!((msg__)->ReadSentinel(iter__, 1687557921)))) {
        FatalError("Error deserializing 'parentOuterWindowID' (uint64_t) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->frameOuterWindowID())), msg__, iter__)))) {
        FatalError("Error deserializing 'frameOuterWindowID' (uint64_t) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'frameOuterWindowID'
    if ((!((msg__)->ReadSentinel(iter__, 2873618957)))) {
        FatalError("Error deserializing 'frameOuterWindowID' (uint64_t) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->enforceSecurity())), msg__, iter__)))) {
        FatalError("Error deserializing 'enforceSecurity' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'enforceSecurity'
    if ((!((msg__)->ReadSentinel(iter__, 646099439)))) {
        FatalError("Error deserializing 'enforceSecurity' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->initialSecurityCheckDone())), msg__, iter__)))) {
        FatalError("Error deserializing 'initialSecurityCheckDone' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'initialSecurityCheckDone'
    if ((!((msg__)->ReadSentinel(iter__, 872070054)))) {
        FatalError("Error deserializing 'initialSecurityCheckDone' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->isInThirdPartyContext())), msg__, iter__)))) {
        FatalError("Error deserializing 'isInThirdPartyContext' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'isInThirdPartyContext'
    if ((!((msg__)->ReadSentinel(iter__, 525088520)))) {
        FatalError("Error deserializing 'isInThirdPartyContext' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->originAttributes())), msg__, iter__)))) {
        FatalError("Error deserializing 'originAttributes' (NeckoOriginAttributes) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'originAttributes'
    if ((!((msg__)->ReadSentinel(iter__, 2655275965)))) {
        FatalError("Error deserializing 'originAttributes' (NeckoOriginAttributes) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->redirectChainIncludingInternalRedirects())), msg__, iter__)))) {
        FatalError("Error deserializing 'redirectChainIncludingInternalRedirects' (PrincipalInfo[]) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'redirectChainIncludingInternalRedirects'
    if ((!((msg__)->ReadSentinel(iter__, 967904109)))) {
        FatalError("Error deserializing 'redirectChainIncludingInternalRedirects' (PrincipalInfo[]) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->redirectChain())), msg__, iter__)))) {
        FatalError("Error deserializing 'redirectChain' (PrincipalInfo[]) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'redirectChain'
    if ((!((msg__)->ReadSentinel(iter__, 2550711462)))) {
        FatalError("Error deserializing 'redirectChain' (PrincipalInfo[]) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->corsUnsafeHeaders())), msg__, iter__)))) {
        FatalError("Error deserializing 'corsUnsafeHeaders' (nsCString[]) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'corsUnsafeHeaders'
    if ((!((msg__)->ReadSentinel(iter__, 2369694136)))) {
        FatalError("Error deserializing 'corsUnsafeHeaders' (nsCString[]) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->forcePreflight())), msg__, iter__)))) {
        FatalError("Error deserializing 'forcePreflight' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'forcePreflight'
    if ((!((msg__)->ReadSentinel(iter__, 2198503272)))) {
        FatalError("Error deserializing 'forcePreflight' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->isPreflight())), msg__, iter__)))) {
        FatalError("Error deserializing 'isPreflight' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'isPreflight'
    if ((!((msg__)->ReadSentinel(iter__, 3402379662)))) {
        FatalError("Error deserializing 'isPreflight' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->loadTriggeredFromExternal())), msg__, iter__)))) {
        FatalError("Error deserializing 'loadTriggeredFromExternal' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'loadTriggeredFromExternal'
    if ((!((msg__)->ReadSentinel(iter__, 273089659)))) {
        FatalError("Error deserializing 'loadTriggeredFromExternal' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    if ((!(Read((&((v__)->isFromProcessingFrameAttributes())), msg__, iter__)))) {
        FatalError("Error deserializing 'isFromProcessingFrameAttributes' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    // Sentinel = 'isFromProcessingFrameAttributes'
    if ((!((msg__)->ReadSentinel(iter__, 2970116332)))) {
        FatalError("Error deserializing 'isFromProcessingFrameAttributes' (bool) member of 'LoadInfoArgs'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const NullPrincipalInfo& v__,
        Message* msg__) -> void
{
    Write((v__).attrs(), msg__);
    // Sentinel = 'attrs'
    (msg__)->WriteSentinel(3014987797);
}

auto PWebSocketChild::Read(
        NullPrincipalInfo* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->attrs())), msg__, iter__)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'NullPrincipalInfo'");
        return false;
    }
    // Sentinel = 'attrs'
    if ((!((msg__)->ReadSentinel(iter__, 3014987797)))) {
        FatalError("Error deserializing 'attrs' (PrincipalOriginAttributes) member of 'NullPrincipalInfo'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const StandardURLSegment& v__,
        Message* msg__) -> void
{
    Write((v__).position(), msg__);
    // Sentinel = 'position'
    (msg__)->WriteSentinel(50847225);
    Write((v__).length(), msg__);
    // Sentinel = 'length'
    (msg__)->WriteSentinel(1726618354);
}

auto PWebSocketChild::Read(
        StandardURLSegment* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->position())), msg__, iter__)))) {
        FatalError("Error deserializing 'position' (uint32_t) member of 'StandardURLSegment'");
        return false;
    }
    // Sentinel = 'position'
    if ((!((msg__)->ReadSentinel(iter__, 50847225)))) {
        FatalError("Error deserializing 'position' (uint32_t) member of 'StandardURLSegment'");
        return false;
    }
    if ((!(Read((&((v__)->length())), msg__, iter__)))) {
        FatalError("Error deserializing 'length' (int32_t) member of 'StandardURLSegment'");
        return false;
    }
    // Sentinel = 'length'
    if ((!((msg__)->ReadSentinel(iter__, 1726618354)))) {
        FatalError("Error deserializing 'length' (int32_t) member of 'StandardURLSegment'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const PartialFileInputStreamParams& v__,
        Message* msg__) -> void
{
    Write((v__).fileStreamParams(), msg__);
    // Sentinel = 'fileStreamParams'
    (msg__)->WriteSentinel(3715082804);
    Write((v__).begin(), msg__);
    // Sentinel = 'begin'
    (msg__)->WriteSentinel(2890902466);
    Write((v__).length(), msg__);
    // Sentinel = 'length'
    (msg__)->WriteSentinel(1726618354);
}

auto PWebSocketChild::Read(
        PartialFileInputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->fileStreamParams())), msg__, iter__)))) {
        FatalError("Error deserializing 'fileStreamParams' (FileInputStreamParams) member of 'PartialFileInputStreamParams'");
        return false;
    }
    // Sentinel = 'fileStreamParams'
    if ((!((msg__)->ReadSentinel(iter__, 3715082804)))) {
        FatalError("Error deserializing 'fileStreamParams' (FileInputStreamParams) member of 'PartialFileInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->begin())), msg__, iter__)))) {
        FatalError("Error deserializing 'begin' (uint64_t) member of 'PartialFileInputStreamParams'");
        return false;
    }
    // Sentinel = 'begin'
    if ((!((msg__)->ReadSentinel(iter__, 2890902466)))) {
        FatalError("Error deserializing 'begin' (uint64_t) member of 'PartialFileInputStreamParams'");
        return false;
    }
    if ((!(Read((&((v__)->length())), msg__, iter__)))) {
        FatalError("Error deserializing 'length' (uint64_t) member of 'PartialFileInputStreamParams'");
        return false;
    }
    // Sentinel = 'length'
    if ((!((msg__)->ReadSentinel(iter__, 1726618354)))) {
        FatalError("Error deserializing 'length' (uint64_t) member of 'PartialFileInputStreamParams'");
        return false;
    }
    return true;
}

auto PWebSocketChild::Write(
        const RemoteInputStreamParams& v__,
        Message* msg__) -> void
{
    Write((v__).id(), msg__);
    // Sentinel = 'id'
    (msg__)->WriteSentinel(2794505629);
}

auto PWebSocketChild::Read(
        RemoteInputStreamParams* v__,
        const Message* msg__,
        PickleIterator* iter__) -> bool
{
    if ((!(Read((&((v__)->id())), msg__, iter__)))) {
        FatalError("Error deserializing 'id' (nsID) member of 'RemoteInputStreamParams'");
        return false;
    }
    // Sentinel = 'id'
    if ((!((msg__)->ReadSentinel(iter__, 2794505629)))) {
        FatalError("Error deserializing 'id' (nsID) member of 'RemoteInputStreamParams'");
        return false;
    }
    return true;
}



} // namespace net
} // namespace mozilla
