//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/gmp/PGMPStorageChild.h"

#include "mozilla/gmp/PGMPChild.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace gmp {


auto PGMPStorageChild::ActorDestroy(ActorDestroyReason aWhy) -> void
{
}

MOZ_IMPLICIT PGMPStorageChild::PGMPStorageChild() :
    mozilla::ipc::IProtocol(mozilla::ipc::ChildSide),
    mState(PGMPStorage::__Dead)
{
    MOZ_COUNT_CTOR(PGMPStorageChild);
}

PGMPStorageChild::~PGMPStorageChild()
{
    MOZ_COUNT_DTOR(PGMPStorageChild);
}

auto PGMPStorageChild::Manager() const -> PGMPChild*
{
    return static_cast<PGMPChild*>(IProtocol::Manager());
}

auto PGMPStorageChild::state() -> PGMPStorage::State
{
    return mState;
}

auto PGMPStorageChild::SendOpen(const nsCString& aRecordName) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_Open(Id());

    Write(aRecordName, msg__);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(4079879416);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg_Open", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg_Open__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PGMPStorageChild::SendRead(const nsCString& aRecordName) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_Read(Id());

    Write(aRecordName, msg__);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(4079879416);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg_Read", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg_Read__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PGMPStorageChild::SendWrite(
        const nsCString& aRecordName,
        const nsTArray<uint8_t>& aBytes) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_Write(Id());

    Write(aRecordName, msg__);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(4079879416);
    Write(aBytes, msg__);
    // Sentinel = 'aBytes'
    (msg__)->WriteSentinel(4118068628);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg_Write", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg_Write__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PGMPStorageChild::SendClose(const nsCString& aRecordName) -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_Close(Id());

    Write(aRecordName, msg__);
    // Sentinel = 'aRecordName'
    (msg__)->WriteSentinel(4079879416);




    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg_Close", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg_Close__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PGMPStorageChild::SendGetRecordNames() -> bool
{
    IPC::Message* msg__ = PGMPStorage::Msg_GetRecordNames(Id());





    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg_GetRecordNames", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg_GetRecordNames__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PGMPStorageChild::Send__delete__(PGMPStorageChild* actor) -> bool
{
    if ((!(actor))) {
        return false;
    }

    IPC::Message* msg__ = PGMPStorage::Msg___delete__((actor)->Id());

    (actor)->Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);



    if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
        mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", (actor)->OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PGMPStorage", "Msg___delete__", js::ProfileEntry::Category::OTHER);
    if ((!(PGMPStorage::Transition(Trigger(Trigger::Recv, PGMPStorage::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = ((actor)->GetIPCChannel())->Send(msg__);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->Manager())->RemoveManagee(PGMPStorageMsgStart, actor);
    return sendok__;
}

auto PGMPStorageChild::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PGMPStorageChild::OnMessageReceived(const Message& msg__) -> PGMPStorageChild::Result
{
    switch ((msg__).type()) {
    case PGMPStorage::Msg_OpenComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg_OpenComplete", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsCString aRecordName;
            GMPErr aStatus;

            if ((!(Read((&(aRecordName)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 4079879416)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(Read((&(aStatus)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236002576)))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PGMPStorage::Transition(Trigger(Trigger::Send, PGMPStorage::Msg_OpenComplete__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvOpenComplete(mozilla::Move(aRecordName), mozilla::Move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_ReadComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg_ReadComplete", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsCString aRecordName;
            GMPErr aStatus;
            nsTArray<uint8_t> aBytes;

            if ((!(Read((&(aRecordName)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 4079879416)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(Read((&(aStatus)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236002576)))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            if ((!(Read((&(aBytes)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsTArray'");
                return MsgValueError;
            }
            // Sentinel = 'aBytes'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 4118068628)))) {
                FatalError("Error deserializing 'nsTArray'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PGMPStorage::Transition(Trigger(Trigger::Send, PGMPStorage::Msg_ReadComplete__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvReadComplete(mozilla::Move(aRecordName), mozilla::Move(aStatus), mozilla::Move(aBytes))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_WriteComplete__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg_WriteComplete", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsCString aRecordName;
            GMPErr aStatus;

            if ((!(Read((&(aRecordName)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordName'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 4079879416)))) {
                FatalError("Error deserializing 'nsCString'");
                return MsgValueError;
            }
            if ((!(Read((&(aStatus)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236002576)))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PGMPStorage::Transition(Trigger(Trigger::Send, PGMPStorage::Msg_WriteComplete__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvWriteComplete(mozilla::Move(aRecordName), mozilla::Move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_RecordNames__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg_RecordNames", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            nsTArray<nsCString> aRecordNames;
            GMPErr aStatus;

            if ((!(Read((&(aRecordNames)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'nsTArray'");
                return MsgValueError;
            }
            // Sentinel = 'aRecordNames'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3431920102)))) {
                FatalError("Error deserializing 'nsTArray'");
                return MsgValueError;
            }
            if ((!(Read((&(aStatus)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            // Sentinel = 'aStatus'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 236002576)))) {
                FatalError("Error deserializing 'GMPErr'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PGMPStorage::Transition(Trigger(Trigger::Send, PGMPStorage::Msg_RecordNames__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvRecordNames(mozilla::Move(aRecordNames), mozilla::Move(aStatus))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Msg_Shutdown__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PGMPStorageChild")) {
                mozilla::ipc::LogMessageForProtocol("PGMPStorageChild", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PGMPStorage", "Msg_Shutdown", js::ProfileEntry::Category::OTHER);

            if ((!(PGMPStorage::Transition(Trigger(Trigger::Send, PGMPStorage::Msg_Shutdown__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvShutdown()))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PGMPStorage::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PGMPStorageChild::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPStorageChild::Result
{
    return MsgNotKnown;
}

auto PGMPStorageChild::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PGMPStorageChild::Result
{
    return MsgNotKnown;
}

auto PGMPStorageChild::GetProtocolTypeId() -> int32_t
{
    return PGMPStorageMsgStart;
}

auto PGMPStorageChild::ProtocolName() const -> const char*
{
    return "PGMPStorageChild";
}

auto PGMPStorageChild::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PGMPStorageChild::DeallocSubtree() -> void
{
}

auto PGMPStorageChild::Write(
        const PGMPStorageChild* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PGMPStorageChild::Read(
        PGMPStorageChild** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PGMPStorage", PGMPStorageMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PGMPStorageChild*>((actor).value());
    return true;
}



} // namespace gmp
} // namespace mozilla
