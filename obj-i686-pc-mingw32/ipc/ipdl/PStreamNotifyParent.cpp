//
// Automatically generated by ipdlc.
// Edit at your own risk
//


#include "mozilla/plugins/PStreamNotifyParent.h"

#include "mozilla/plugins/PPluginInstanceParent.h"

#include "nsIFile.h"
#include "GeckoProfiler.h"

namespace mozilla {
namespace plugins {



MOZ_IMPLICIT PStreamNotifyParent::PStreamNotifyParent() :
    mozilla::ipc::IProtocol(mozilla::ipc::ParentSide),
    mState(PStreamNotify::__Dead)
{
    MOZ_COUNT_CTOR(PStreamNotifyParent);
}

PStreamNotifyParent::~PStreamNotifyParent()
{
    MOZ_COUNT_DTOR(PStreamNotifyParent);
}

auto PStreamNotifyParent::Manager() const -> PPluginInstanceParent*
{
    return static_cast<PPluginInstanceParent*>(IProtocol::Manager());
}

auto PStreamNotifyParent::state() -> PStreamNotify::State
{
    return mState;
}

auto PStreamNotifyParent::SendRedirectNotify(
        const nsCString& url,
        const int32_t& status) -> bool
{
    IPC::Message* msg__ = PStreamNotify::Msg_RedirectNotify(Id());

    Write(url, msg__);
    // Sentinel = 'url'
    (msg__)->WriteSentinel(1453210600);
    Write(status, msg__);
    // Sentinel = 'status'
    (msg__)->WriteSentinel(3714608576);




    if (mozilla::ipc::LoggingEnabledFor("PStreamNotifyParent")) {
        mozilla::ipc::LogMessageForProtocol("PStreamNotifyParent", OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PStreamNotify", "Msg_RedirectNotify", js::ProfileEntry::Category::OTHER);
    if ((!(PStreamNotify::Transition(Trigger(Trigger::Send, PStreamNotify::Msg_RedirectNotify__ID), (&(mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = (GetIPCChannel())->Send(msg__);
    return sendok__;
}

auto PStreamNotifyParent::Send__delete__(
        PStreamNotifyParent* actor,
        const NPReason& reason) -> bool
{
    if ((!(actor))) {
        return false;
    }

    IPC::Message* msg__ = PStreamNotify::Msg___delete__((actor)->Id());

    (actor)->Write(actor, msg__, false);
    // Sentinel = 'actor'
    (msg__)->WriteSentinel(875202478);
    (actor)->Write(reason, msg__);
    // Sentinel = 'reason'
    (msg__)->WriteSentinel(4151390930);



    if (mozilla::ipc::LoggingEnabledFor("PStreamNotifyParent")) {
        mozilla::ipc::LogMessageForProtocol("PStreamNotifyParent", (actor)->OtherPid(), "Sending ", (msg__)->type(), mozilla::ipc::MessageDirection::eSending);
    }
    PROFILER_LABEL("PStreamNotify", "Msg___delete__", js::ProfileEntry::Category::OTHER);
    if ((!(PStreamNotify::Transition(Trigger(Trigger::Send, PStreamNotify::Msg___delete____ID), (&((actor)->mState)))))) {
        NS_WARNING("bad state transition!");
    }

    bool sendok__ = ((actor)->GetIPCChannel())->Send(msg__);

    (actor)->DestroySubtree(Deletion);
    (actor)->DeallocSubtree();
    ((actor)->Manager())->RemoveManagee(PStreamNotifyMsgStart, actor);
    return sendok__;
}

auto PStreamNotifyParent::RemoveManagee(
        int32_t aProtocolId,
        ProtocolBase* aListener) -> void
{
    FatalError("unreached");
    return;
}

auto PStreamNotifyParent::OnMessageReceived(const Message& msg__) -> PStreamNotifyParent::Result
{
    switch ((msg__).type()) {
    case PStreamNotify::Msg_RedirectNotifyResponse__ID:
        {
            if (mozilla::ipc::LoggingEnabledFor("PStreamNotifyParent")) {
                mozilla::ipc::LogMessageForProtocol("PStreamNotifyParent", OtherPid(), "Received ", ((&(msg__)))->type(), mozilla::ipc::MessageDirection::eReceiving);
            }
            PROFILER_LABEL("PStreamNotify", "Msg_RedirectNotifyResponse", js::ProfileEntry::Category::OTHER);

            PickleIterator iter__ = PickleIterator(msg__);
            bool allow;

            if ((!(Read((&(allow)), (&(msg__)), (&(iter__)))))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            // Sentinel = 'allow'
            if ((!(((&(msg__)))->ReadSentinel((&(iter__)), 3737033206)))) {
                FatalError("Error deserializing 'bool'");
                return MsgValueError;
            }
            (msg__).EndRead(iter__);
            if ((!(PStreamNotify::Transition(Trigger(Trigger::Recv, PStreamNotify::Msg_RedirectNotifyResponse__ID), (&(mState)))))) {
                NS_WARNING("bad state transition!");
            }
            if ((!(RecvRedirectNotifyResponse(mozilla::Move(allow))))) {
                mozilla::ipc::ProtocolErrorBreakpoint("Handler returned error code!");
                return MsgProcessingError;
            }

            return MsgProcessed;
        }
    case PStreamNotify::Reply___delete____ID:
        {
            return MsgProcessed;
        }
    default:
        {
            return MsgNotKnown;
        }
    }
}

auto PStreamNotifyParent::OnMessageReceived(
        const Message& msg__,
        Message*& reply__) -> PStreamNotifyParent::Result
{
    return MsgNotKnown;
}

auto PStreamNotifyParent::OnCallReceived(
        const Message& msg__,
        Message*& reply__) -> PStreamNotifyParent::Result
{
    return MsgNotKnown;
}

auto PStreamNotifyParent::GetProtocolTypeId() -> int32_t
{
    return PStreamNotifyMsgStart;
}

auto PStreamNotifyParent::ProtocolName() const -> const char*
{
    return "PStreamNotifyParent";
}

auto PStreamNotifyParent::DestroySubtree(ActorDestroyReason why) -> void
{
    // Unregister from our manager.
    Unregister(Id());
    SetId(1);

    // Finally, destroy "us".
    ActorDestroy(why);
}

auto PStreamNotifyParent::DeallocSubtree() -> void
{
}

auto PStreamNotifyParent::Write(
        const PStreamNotifyParent* v__,
        Message* msg__,
        bool nullable__) -> void
{
    int32_t id;
    if ((!(v__))) {
        if ((!(nullable__))) {
            FatalError("NULL actor value passed to non-nullable param");
        }
        id = 0;
    }
    else {
        id = (v__)->Id();
        if ((1) == (id)) {
            FatalError("actor has been |delete|d");
        }
    }

    Write(id, msg__);
}

auto PStreamNotifyParent::Read(
        PStreamNotifyParent** v__,
        const Message* msg__,
        PickleIterator* iter__,
        bool nullable__) -> bool
{
    Maybe<mozilla::ipc::IProtocol*> actor = ReadActor(msg__, iter__, nullable__, "PStreamNotify", PStreamNotifyMsgStart);
    if ((actor).isNothing()) {
        return false;
    }

    (*(v__)) = static_cast<PStreamNotifyParent*>((actor).value());
    return true;
}



} // namespace plugins
} // namespace mozilla
