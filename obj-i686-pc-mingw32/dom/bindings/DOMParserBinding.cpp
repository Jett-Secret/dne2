/* THIS FILE IS AUTOGENERATED FROM DOMParser.webidl BY Codegen.py - DO NOT EDIT */

#include "DOMParserBinding.h"
#include "WrapperFactory.h"
#include "jsapi.h"
#include "jsfriendapi.h"
#include "mozilla/OwningNonNull.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/DOMJSClass.h"
#include "mozilla/dom/DOMParser.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/PrimitiveConversions.h"
#include "mozilla/dom/TypedArray.h"
#include "mozilla/dom/XrayExpandoClass.h"
#include "nsContentUtils.h"
#include "nsIDocument.h"
#include "nsIInputStream.h"
#include "nsIPrincipal.h"
#include "nsISupports.h"
#include "nsIURI.h"
#include "xpcjsid.h"

namespace mozilla {
namespace dom {

namespace SupportedTypeValues {
extern const EnumEntry strings[6] = {
  {"text/html", 9},
  {"text/xml", 8},
  {"application/xml", 15},
  {"application/xhtml+xml", 21},
  {"image/svg+xml", 13},
  { nullptr, 0 }
};
} // namespace SupportedTypeValues

bool
ToJSValue(JSContext* aCx, SupportedType aArgument, JS::MutableHandle<JS::Value> aValue)
{
  MOZ_ASSERT(uint32_t(aArgument) < ArrayLength(SupportedTypeValues::strings));
  JSString* resultStr =
    JS_NewStringCopyN(aCx, SupportedTypeValues::strings[uint32_t(aArgument)].value,
                      SupportedTypeValues::strings[uint32_t(aArgument)].length);
  if (!resultStr) {
    return false;
  }
  aValue.setString(resultStr);
  return true;
}


namespace DOMParserBinding {

static bool
parseFromString(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMParser* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 2)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMParser.parseFromString");
  }
  binding_detail::FakeString arg0;
  if (!ConvertJSValueToString(cx, args[0], eStringify, eStringify, arg0)) {
    return false;
  }
  SupportedType arg1;
  {
    int index;
    if (!FindEnumStringIndex<true>(cx, args[1], SupportedTypeValues::strings, "SupportedType", "Argument 2 of DOMParser.parseFromString", &index)) {
      return false;
    }
    MOZ_ASSERT(index >= 0);
    arg1 = static_cast<SupportedType>(index);
  }
  binding_detail::FastErrorResult rv;
  auto result(StrongOrRawPtr<nsIDocument>(self->ParseFromString(NonNullHelper(Constify(arg0)), arg1, rv)));
  if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
    return false;
  }
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  static_assert(!IsPointer<decltype(result)>::value,
                "NewObject implies that we need to keep the object alive with a strong reference.");
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo parseFromString_methodinfo = {
  { (JSJitGetterOp)parseFromString },
  { prototypes::id::DOMParser },
  { PrototypeTraits<prototypes::id::DOMParser>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
parseFromBuffer(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMParser* self, const JSJitMethodCallArgs& args)
{
  unsigned argcount = std::min(args.length(), 3u);
  switch (argcount) {
    case 3: {
      if (args[0].isObject()) {
        do {
          RootedTypedArray<Uint8Array> arg0(cx);
          if (!arg0.Init(&args[0].toObject())) {
            break;
          }
          uint32_t arg1;
          if (!ValueToPrimitive<uint32_t, eDefault>(cx, args[1], &arg1)) {
            return false;
          }
          SupportedType arg2;
          {
            int index;
            if (!FindEnumStringIndex<true>(cx, args[2], SupportedTypeValues::strings, "SupportedType", "Argument 3 of DOMParser.parseFromBuffer", &index)) {
              return false;
            }
            MOZ_ASSERT(index >= 0);
            arg2 = static_cast<SupportedType>(index);
          }
          binding_detail::FastErrorResult rv;
          auto result(StrongOrRawPtr<nsIDocument>(self->ParseFromBuffer(Constify(arg0), arg1, arg2, rv)));
          if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
            return false;
          }
          MOZ_ASSERT(!JS_IsExceptionPending(cx));
          static_assert(!IsPointer<decltype(result)>::value,
                        "NewObject implies that we need to keep the object alive with a strong reference.");
          if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
            MOZ_ASSERT(true || JS_IsExceptionPending(cx));
            return false;
          }
          return true;
        } while (0);
        do {
          binding_detail::AutoSequence<uint8_t> arg0;
          JS::ForOfIterator iter(cx);
          if (!iter.init(args[0], JS::ForOfIterator::AllowNonIterable)) {
            return false;
          }
          if (!iter.valueIsIterable()) {
            break;
          }
          binding_detail::AutoSequence<uint8_t> &arr = arg0;
          JS::Rooted<JS::Value> temp(cx);
          while (true) {
            bool done;
            if (!iter.next(&temp, &done)) {
              return false;
            }
            if (done) {
              break;
            }
            uint8_t* slotPtr = arr.AppendElement(mozilla::fallible);
            if (!slotPtr) {
              JS_ReportOutOfMemory(cx);
              return false;
            }
            uint8_t& slot = *slotPtr;
            if (!ValueToPrimitive<uint8_t, eDefault>(cx, temp, &slot)) {
              return false;
            }
          }
          uint32_t arg1;
          if (!ValueToPrimitive<uint32_t, eDefault>(cx, args[1], &arg1)) {
            return false;
          }
          SupportedType arg2;
          {
            int index;
            if (!FindEnumStringIndex<true>(cx, args[2], SupportedTypeValues::strings, "SupportedType", "Argument 3 of DOMParser.parseFromBuffer", &index)) {
              return false;
            }
            MOZ_ASSERT(index >= 0);
            arg2 = static_cast<SupportedType>(index);
          }
          binding_detail::FastErrorResult rv;
          auto result(StrongOrRawPtr<nsIDocument>(self->ParseFromBuffer(Constify(arg0), arg1, arg2, rv)));
          if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
            return false;
          }
          MOZ_ASSERT(!JS_IsExceptionPending(cx));
          static_assert(!IsPointer<decltype(result)>::value,
                        "NewObject implies that we need to keep the object alive with a strong reference.");
          if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
            MOZ_ASSERT(true || JS_IsExceptionPending(cx));
            return false;
          }
          return true;
        } while (0);
      }
      return ThrowErrorMessage(cx, MSG_OVERLOAD_RESOLUTION_FAILED, "1", "3", "DOMParser.parseFromBuffer");
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMParser.parseFromBuffer");
      break;
    }
  }
  MOZ_CRASH("We have an always-returning default case");
  return false;
}

static const JSJitInfo parseFromBuffer_methodinfo = {
  { (JSJitGetterOp)parseFromBuffer },
  { prototypes::id::DOMParser },
  { PrototypeTraits<prototypes::id::DOMParser>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
parseFromStream(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMParser* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 4)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMParser.parseFromStream");
  }
  nsIInputStream* arg0;
  RefPtr<nsIInputStream> arg0_holder;
  if (args[0].isObject()) {
    JS::Rooted<JSObject*> source(cx, &args[0].toObject());
    if (NS_FAILED(UnwrapArg<nsIInputStream>(source, getter_AddRefs(arg0_holder)))) {
      ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Argument 1 of DOMParser.parseFromStream", "InputStream");
      return false;
    }
    MOZ_ASSERT(arg0_holder);
    arg0 = arg0_holder;
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Argument 1 of DOMParser.parseFromStream");
    return false;
  }
  binding_detail::FakeString arg1;
  if (!ConvertJSValueToString(cx, args[1], eNull, eNull, arg1)) {
    return false;
  }
  int32_t arg2;
  if (!ValueToPrimitive<int32_t, eDefault>(cx, args[2], &arg2)) {
    return false;
  }
  SupportedType arg3;
  {
    int index;
    if (!FindEnumStringIndex<true>(cx, args[3], SupportedTypeValues::strings, "SupportedType", "Argument 4 of DOMParser.parseFromStream", &index)) {
      return false;
    }
    MOZ_ASSERT(index >= 0);
    arg3 = static_cast<SupportedType>(index);
  }
  binding_detail::FastErrorResult rv;
  auto result(StrongOrRawPtr<nsIDocument>(self->ParseFromStream(NonNullHelper(arg0), NonNullHelper(Constify(arg1)), arg2, arg3, rv)));
  if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
    return false;
  }
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  static_assert(!IsPointer<decltype(result)>::value,
                "NewObject implies that we need to keep the object alive with a strong reference.");
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo parseFromStream_methodinfo = {
  { (JSJitGetterOp)parseFromStream },
  { prototypes::id::DOMParser },
  { PrototypeTraits<prototypes::id::DOMParser>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
init(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMParser* self, const JSJitMethodCallArgs& args)
{
  nsIPrincipal* arg0;
  RefPtr<nsIPrincipal> arg0_holder;
  if (args.hasDefined(0)) {
    if (args[0].isObject()) {
      JS::Rooted<JSObject*> source(cx, &args[0].toObject());
      if (NS_FAILED(UnwrapArg<nsIPrincipal>(source, getter_AddRefs(arg0_holder)))) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Argument 1 of DOMParser.init", "Principal");
        return false;
      }
      MOZ_ASSERT(arg0_holder);
      arg0 = arg0_holder;
    } else if (args[0].isNullOrUndefined()) {
      arg0 = nullptr;
    } else {
      ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Argument 1 of DOMParser.init");
      return false;
    }
  } else {
    arg0 = nullptr;
  }
  nsIURI* arg1;
  RefPtr<nsIURI> arg1_holder;
  if (args.hasDefined(1)) {
    if (args[1].isObject()) {
      JS::Rooted<JSObject*> source(cx, &args[1].toObject());
      if (NS_FAILED(UnwrapArg<nsIURI>(source, getter_AddRefs(arg1_holder)))) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Argument 2 of DOMParser.init", "URI");
        return false;
      }
      MOZ_ASSERT(arg1_holder);
      arg1 = arg1_holder;
    } else if (args[1].isNullOrUndefined()) {
      arg1 = nullptr;
    } else {
      ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Argument 2 of DOMParser.init");
      return false;
    }
  } else {
    arg1 = nullptr;
  }
  nsIURI* arg2;
  RefPtr<nsIURI> arg2_holder;
  if (args.hasDefined(2)) {
    if (args[2].isObject()) {
      JS::Rooted<JSObject*> source(cx, &args[2].toObject());
      if (NS_FAILED(UnwrapArg<nsIURI>(source, getter_AddRefs(arg2_holder)))) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Argument 3 of DOMParser.init", "URI");
        return false;
      }
      MOZ_ASSERT(arg2_holder);
      arg2 = arg2_holder;
    } else if (args[2].isNullOrUndefined()) {
      arg2 = nullptr;
    } else {
      ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Argument 3 of DOMParser.init");
      return false;
    }
  } else {
    arg2 = nullptr;
  }
  binding_detail::FastErrorResult rv;
  self->Init(Constify(arg0), Constify(arg1), Constify(arg2), rv);
  if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
    return false;
  }
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().setUndefined();
  return true;
}

static const JSJitInfo init_methodinfo = {
  { (JSJitGetterOp)init },
  { prototypes::id::DOMParser },
  { PrototypeTraits<prototypes::id::DOMParser>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
_addProperty(JSContext* cx, JS::Handle<JSObject*> obj, JS::Handle<jsid> id, JS::Handle<JS::Value> val)
{
  mozilla::dom::DOMParser* self = UnwrapPossiblyNotInitializedDOMObject<mozilla::dom::DOMParser>(obj);
  // We don't want to preserve if we don't have a wrapper, and we
  // obviously can't preserve if we're not initialized.
  if (self && self->GetWrapperPreserveColor()) {
    PreserveWrapper(self);
  }
  return true;
}

static void
_finalize(js::FreeOp* fop, JSObject* obj)
{
  mozilla::dom::DOMParser* self = UnwrapPossiblyNotInitializedDOMObject<mozilla::dom::DOMParser>(obj);
  if (self) {
    ClearWrapper(self, self);
    AddForDeferredFinalization<mozilla::dom::DOMParser>(self);
  }
}

static void
_objectMoved(JSObject* obj, const JSObject* old)
{
  mozilla::dom::DOMParser* self = UnwrapPossiblyNotInitializedDOMObject<mozilla::dom::DOMParser>(obj);
  if (self) {
    UpdateWrapper(self, self, obj, old);
  }
}

static const JSFunctionSpec sMethods_specs[] = {
  JS_FNSPEC("parseFromString", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&parseFromString_methodinfo), 2, JSPROP_ENUMERATE, nullptr),
  JS_FS_END,
  JS_FNSPEC("QueryInterface", QueryInterface, nullptr, 1, 0, nullptr),
  JS_FS_END
};

static PrefableDisablers sMethods_disablers2 = {
  true, false, 0, &WantsQueryInterface<mozilla::dom::DOMParser>::Enabled
};

// Can't be const because the pref-enabled boolean needs to be writable
static Prefable<const JSFunctionSpec> sMethods[] = {
  { nullptr, &sMethods_specs[0] },
  { &sMethods_disablers2, &sMethods_specs[2] },
  { nullptr, nullptr }
};

static jsid sMethods_ids[4];

static const JSFunctionSpec sChromeMethods_specs[] = {
  JS_FNSPEC("parseFromBuffer", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&parseFromBuffer_methodinfo), 3, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("parseFromStream", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&parseFromStream_methodinfo), 4, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("init", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&init_methodinfo), 0, JSPROP_ENUMERATE, nullptr),
  JS_FS_END
};


// Can't be const because the pref-enabled boolean needs to be writable
static Prefable<const JSFunctionSpec> sChromeMethods[] = {
  { nullptr, &sChromeMethods_specs[0] },
  { nullptr, nullptr }
};

static jsid sChromeMethods_ids[4];


static const NativePropertiesN<1> sNativeProperties = {
  -1,
  false, 0,
  false, 0,
  true,  0 /* sMethods */,
  false, 0,
  false, 0,
  false, 0,
  false, 0,
  {
    { sMethods, sMethods_ids, sMethods_specs }
  }
};

static const NativePropertiesN<1> sChromeOnlyNativeProperties = {
  -1,
  false, 0,
  false, 0,
  true,  0 /* sChromeMethods */,
  false, 0,
  false, 0,
  false, 0,
  false, 0,
  {
    { sChromeMethods, sChromeMethods_ids, sChromeMethods_specs }
  }
};

static bool
_constructor(JSContext* cx, unsigned argc, JS::Value* vp)
{
  JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
  JS::Rooted<JSObject*> obj(cx, &args.callee());
  if (!args.isConstructing()) {
    // XXXbz wish I could get the name from the callee instead of
    // Adding more relocations
    return ThrowConstructorWithoutNew(cx, "DOMParser");
  }

  GlobalObject global(cx, obj);
  if (global.Failed()) {
    return false;
  }

  JS::Rooted<JSObject*> desiredProto(cx);
  if (!GetDesiredProto(cx, args, &desiredProto)) {
    return false;
  }

  unsigned argcount = std::min(args.length(), 3u);
  switch (argcount) {
    case 0: {
      bool objIsXray = xpc::WrapperFactory::IsXrayWrapper(obj);
      Maybe<JSAutoCompartment> ac;
      if (objIsXray) {
        obj = js::CheckedUnwrap(obj);
        if (!obj) {
          return false;
        }
        ac.emplace(cx, obj);
        if (!JS_WrapObject(cx, &desiredProto)) {
          return false;
        }
      }
      binding_detail::FastErrorResult rv;
      auto result(StrongOrRawPtr<mozilla::dom::DOMParser>(mozilla::dom::DOMParser::Constructor(global, rv)));
      if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
        return false;
      }
      MOZ_ASSERT(!JS_IsExceptionPending(cx));
      static_assert(!IsPointer<decltype(result)>::value,
                    "NewObject implies that we need to keep the object alive with a strong reference.");
      if (!GetOrCreateDOMReflector(cx, result, args.rval(), desiredProto)) {
        MOZ_ASSERT(true || JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    case 1: {
      MOZ_FALLTHROUGH;
    }
    case 2: {
      MOZ_FALLTHROUGH;
    }
    case 3: {
      bool objIsXray = xpc::WrapperFactory::IsXrayWrapper(obj);
      nsIPrincipal* arg0;
      RefPtr<nsIPrincipal> arg0_holder;
      if (args[0].isObject()) {
        JS::Rooted<JSObject*> source(cx, &args[0].toObject());
        if (NS_FAILED(UnwrapArg<nsIPrincipal>(source, getter_AddRefs(arg0_holder)))) {
          ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Argument 1 of DOMParser.constructor", "Principal");
          return false;
        }
        MOZ_ASSERT(arg0_holder);
        arg0 = arg0_holder;
      } else if (args[0].isNullOrUndefined()) {
        arg0 = nullptr;
      } else {
        ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Argument 1 of DOMParser.constructor");
        return false;
      }
      nsIURI* arg1;
      RefPtr<nsIURI> arg1_holder;
      if (args.hasDefined(1)) {
        if (args[1].isObject()) {
          JS::Rooted<JSObject*> source(cx, &args[1].toObject());
          if (NS_FAILED(UnwrapArg<nsIURI>(source, getter_AddRefs(arg1_holder)))) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Argument 2 of DOMParser.constructor", "URI");
            return false;
          }
          MOZ_ASSERT(arg1_holder);
          arg1 = arg1_holder;
        } else if (args[1].isNullOrUndefined()) {
          arg1 = nullptr;
        } else {
          ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Argument 2 of DOMParser.constructor");
          return false;
        }
      } else {
        arg1 = nullptr;
      }
      nsIURI* arg2;
      RefPtr<nsIURI> arg2_holder;
      if (args.hasDefined(2)) {
        if (args[2].isObject()) {
          JS::Rooted<JSObject*> source(cx, &args[2].toObject());
          if (NS_FAILED(UnwrapArg<nsIURI>(source, getter_AddRefs(arg2_holder)))) {
            ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Argument 3 of DOMParser.constructor", "URI");
            return false;
          }
          MOZ_ASSERT(arg2_holder);
          arg2 = arg2_holder;
        } else if (args[2].isNullOrUndefined()) {
          arg2 = nullptr;
        } else {
          ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Argument 3 of DOMParser.constructor");
          return false;
        }
      } else {
        arg2 = nullptr;
      }
      Maybe<JSAutoCompartment> ac;
      if (objIsXray) {
        obj = js::CheckedUnwrap(obj);
        if (!obj) {
          return false;
        }
        ac.emplace(cx, obj);
        if (!JS_WrapObject(cx, &desiredProto)) {
          return false;
        }
      }
      binding_detail::FastErrorResult rv;
      auto result(StrongOrRawPtr<mozilla::dom::DOMParser>(mozilla::dom::DOMParser::Constructor(global, Constify(arg0), Constify(arg1), Constify(arg2), rv)));
      if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
        return false;
      }
      MOZ_ASSERT(!JS_IsExceptionPending(cx));
      static_assert(!IsPointer<decltype(result)>::value,
                    "NewObject implies that we need to keep the object alive with a strong reference.");
      if (!GetOrCreateDOMReflector(cx, result, args.rval(), desiredProto)) {
        MOZ_ASSERT(true || JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMParser");
      break;
    }
  }
  MOZ_CRASH("We have an always-returning default case");
  return false;
}

static const js::ClassOps sInterfaceObjectClassOps = {
    nullptr,               /* addProperty */
    nullptr,               /* delProperty */
    nullptr,               /* getProperty */
    nullptr,               /* setProperty */
    nullptr,               /* enumerate */
    nullptr,               /* resolve */
    nullptr,               /* mayResolve */
    nullptr,               /* finalize */
    _constructor, /* call */
    nullptr,               /* hasInstance */
    _constructor, /* construct */
    nullptr,               /* trace */
};

static const DOMIfaceAndProtoJSClass sInterfaceObjectClass = {
  {
    "Function",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(DOM_INTERFACE_SLOTS_BASE),
    &sInterfaceObjectClassOps,
    JS_NULL_CLASS_SPEC,
    JS_NULL_CLASS_EXT,
    &sInterfaceObjectClassObjectOps
  },
  eInterface,
  true,
  prototypes::id::DOMParser,
  PrototypeTraits<prototypes::id::DOMParser>::Depth,
  sNativePropertyHooks,
  "function DOMParser() {\n    [native code]\n}",
  JS::GetRealmFunctionPrototype
};

static const DOMIfaceAndProtoJSClass sPrototypeClass = {
  {
    "DOMParserPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(DOM_INTERFACE_PROTO_SLOTS_BASE),
    JS_NULL_CLASS_OPS,
    JS_NULL_CLASS_SPEC,
    JS_NULL_CLASS_EXT,
    JS_NULL_OBJECT_OPS
  },
  eInterfacePrototype,
  false,
  prototypes::id::DOMParser,
  PrototypeTraits<prototypes::id::DOMParser>::Depth,
  sNativePropertyHooks,
  "[object DOMParserPrototype]",
  JS::GetRealmObjectPrototype
};

JSObject*
DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool aDefineOnGlobal)
{
  return GetConstructorObjectHandle(aCx, aDefineOnGlobal);
}

static const js::ClassOps sClassOps = {
  _addProperty, /* addProperty */
  nullptr,               /* delProperty */
  nullptr,               /* getProperty */
  nullptr,               /* setProperty */
  nullptr, /* enumerate */
  nullptr, /* resolve */
  nullptr, /* mayResolve */
  _finalize, /* finalize */
  nullptr, /* call */
  nullptr,               /* hasInstance */
  nullptr,               /* construct */
  nullptr, /* trace */
};

static const js::ClassExtension sClassExtension = {
  nullptr, /* weakmapKeyDelegateOp */
  _objectMoved /* objectMovedOp */
};

static const DOMJSClass sClass = {
  { "DOMParser",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_FOREGROUND_FINALIZE | JSCLASS_HAS_RESERVED_SLOTS(1),
    &sClassOps,
    JS_NULL_CLASS_SPEC,
    &sClassExtension,
    JS_NULL_OBJECT_OPS
  },
  { prototypes::id::DOMParser, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
  IsBaseOf<nsISupports, mozilla::dom::DOMParser >::value,
  sNativePropertyHooks,
  FindAssociatedGlobalForNative<mozilla::dom::DOMParser>::Get,
  GetProtoObjectHandle,
  GetCCParticipant<mozilla::dom::DOMParser>::Get()
};
static_assert(1 == DOM_INSTANCE_RESERVED_SLOTS,
              "Must have the right minimal number of reserved slots.");
static_assert(1 >= 1,
              "Must have enough reserved slots.");

const JSClass*
GetJSClass()
{
  return sClass.ToJSClass();
}

bool
Wrap(JSContext* aCx, mozilla::dom::DOMParser* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector)
{
  MOZ_ASSERT(static_cast<mozilla::dom::DOMParser*>(aObject) ==
             reinterpret_cast<mozilla::dom::DOMParser*>(aObject),
             "Multiple inheritance for mozilla::dom::DOMParser is broken.");
  MOZ_ASSERT(ToSupportsIsCorrect(aObject));
  MOZ_ASSERT(!aCache->GetWrapper(),
             "You should probably not be using Wrap() directly; use "
             "GetOrCreateDOMReflector instead");

  MOZ_ASSERT(ToSupportsIsOnPrimaryInheritanceChain(aObject, aCache),
             "nsISupports must be on our primary inheritance chain");

  JS::Rooted<JSObject*> global(aCx, FindAssociatedGlobal(aCx, aObject->GetParentObject()));
  if (!global) {
    return false;
  }
  MOZ_ASSERT(JS_IsGlobalObject(global));
  MOZ_ASSERT(!JS::ObjectIsMarkedGray(global));

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.
  aReflector.set(aCache->GetWrapper());
  if (aReflector) {
#ifdef DEBUG
    binding_detail::AssertReflectorHasGivenProto(aCx, aReflector, aGivenProto);
#endif // DEBUG
    return true;
  }

  JSAutoCompartment ac(aCx, global);
  JS::Handle<JSObject*> canonicalProto = GetProtoObjectHandle(aCx);
  if (!canonicalProto) {
    return false;
  }
  JS::Rooted<JSObject*> proto(aCx);
  if (aGivenProto) {
    proto = aGivenProto;
    // Unfortunately, while aGivenProto was in the compartment of aCx
    // coming in, we changed compartments to that of "parent" so may need
    // to wrap the proto here.
    if (js::GetContextCompartment(aCx) != js::GetObjectCompartment(proto)) {
      if (!JS_WrapObject(aCx, &proto)) {
        return false;
      }
    }
  } else {
    proto = canonicalProto;
  }

  BindingJSObjectCreator<mozilla::dom::DOMParser> creator(aCx);
  creator.CreateObject(aCx, sClass.ToJSClass(), proto, aObject, aReflector);
  if (!aReflector) {
    return false;
  }

  aCache->SetWrapper(aReflector);
  creator.InitializationSucceeded();

  MOZ_ASSERT(aCache->GetWrapperPreserveColor() &&
             aCache->GetWrapperPreserveColor() == aReflector);
  // If proto != canonicalProto, we have to preserve our wrapper;
  // otherwise we won't be able to properly recreate it later, since
  // we won't know what proto to use.  Note that we don't check
  // aGivenProto here, since it's entirely possible (and even
  // somewhat common) to have a non-null aGivenProto which is the
  // same as canonicalProto.
  if (proto != canonicalProto) {
    PreserveWrapper(aObject);
  }

  return true;
}

const NativePropertyHooks sNativePropertyHooks[] = { {
  nullptr,
  nullptr,
  nullptr,
  { sNativeProperties.Upcast(), sChromeOnlyNativeProperties.Upcast() },
  prototypes::id::DOMParser,
  constructors::id::DOMParser,
  nullptr,
  &DefaultXrayExpandoObjectClass
} };

void
CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal)
{
  JS::Rooted<JSObject*> parentProto(aCx, JS::GetRealmObjectPrototype(aCx));
  if (!parentProto) {
    return;
  }

  JS::Rooted<JSObject*> constructorProto(aCx, JS::GetRealmFunctionPrototype(aCx));
  if (!constructorProto) {
    return;
  }

  static bool sIdsInited = false;
  if (!sIdsInited && NS_IsMainThread()) {
    if (!InitIds(aCx, sChromeMethods, sChromeMethods_ids)) {
      return;
    }
    if (!InitIds(aCx, sMethods, sMethods_ids)) {
      return;
    }
    sIdsInited = true;
  }

  JS::Heap<JSObject*>* protoCache = &aProtoAndIfaceCache.EntrySlotOrCreate(prototypes::id::DOMParser);
  JS::Heap<JSObject*>* interfaceCache = &aProtoAndIfaceCache.EntrySlotOrCreate(constructors::id::DOMParser);
  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &sPrototypeClass.mBase, protoCache,
                              constructorProto, &sInterfaceObjectClass.mBase, 0, nullptr,
                              interfaceCache,
                              sNativeProperties.Upcast(),
                              nsContentUtils::ThreadsafeIsCallerChrome() ? sChromeOnlyNativeProperties.Upcast() : nullptr,
                              "DOMParser", aDefineOnGlobal,
                              nullptr,
                              false);
}

JS::Handle<JSObject*>
GetProtoObjectHandle(JSContext* aCx)
{
  /* Get the interface prototype object for this class.  This will create the
     object as needed. */
  bool aDefineOnGlobal = true;

  /* Make sure our global is sane.  Hopefully we can remove this sometime */
  JSObject* global = JS::CurrentGlobalOrNull(aCx);
  if (!(js::GetObjectClass(global)->flags & JSCLASS_DOM_GLOBAL)) {
    return nullptr;
  }

  /* Check to see whether the interface objects are already installed */
  ProtoAndIfaceCache& protoAndIfaceCache = *GetProtoAndIfaceCache(global);
  if (!protoAndIfaceCache.EntrySlotIfExists(prototypes::id::DOMParser)) {
    JS::Rooted<JSObject*> rootedGlobal(aCx, global);
    CreateInterfaceObjects(aCx, rootedGlobal, protoAndIfaceCache, aDefineOnGlobal);
  }

  /*
   * The object might _still_ be null, but that's OK.
   *
   * Calling fromMarkedLocation() is safe because protoAndIfaceCache is
   * traced by TraceProtoAndIfaceCache() and its contents are never
   * changed after they have been set.
   *
   * Calling address() avoids the read read barrier that does gray
   * unmarking, but it's not possible for the object to be gray here.
   */

  const JS::Heap<JSObject*>& entrySlot = protoAndIfaceCache.EntrySlotMustExist(prototypes::id::DOMParser);
  MOZ_ASSERT_IF(entrySlot, !JS::ObjectIsMarkedGray(entrySlot));
  return JS::Handle<JSObject*>::fromMarkedLocation(entrySlot.address());
}

JS::Handle<JSObject*>
GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal)
{
  /* Get the interface object for this class.  This will create the object as
     needed. */

  /* Make sure our global is sane.  Hopefully we can remove this sometime */
  JSObject* global = JS::CurrentGlobalOrNull(aCx);
  if (!(js::GetObjectClass(global)->flags & JSCLASS_DOM_GLOBAL)) {
    return nullptr;
  }

  /* Check to see whether the interface objects are already installed */
  ProtoAndIfaceCache& protoAndIfaceCache = *GetProtoAndIfaceCache(global);
  if (!protoAndIfaceCache.EntrySlotIfExists(constructors::id::DOMParser)) {
    JS::Rooted<JSObject*> rootedGlobal(aCx, global);
    CreateInterfaceObjects(aCx, rootedGlobal, protoAndIfaceCache, aDefineOnGlobal);
  }

  /*
   * The object might _still_ be null, but that's OK.
   *
   * Calling fromMarkedLocation() is safe because protoAndIfaceCache is
   * traced by TraceProtoAndIfaceCache() and its contents are never
   * changed after they have been set.
   *
   * Calling address() avoids the read read barrier that does gray
   * unmarking, but it's not possible for the object to be gray here.
   */

  const JS::Heap<JSObject*>& entrySlot = protoAndIfaceCache.EntrySlotMustExist(constructors::id::DOMParser);
  MOZ_ASSERT_IF(entrySlot, !JS::ObjectIsMarkedGray(entrySlot));
  return JS::Handle<JSObject*>::fromMarkedLocation(entrySlot.address());
}

JSObject*
GetConstructorObject(JSContext* aCx)
{
  return GetConstructorObjectHandle(aCx);
}

} // namespace DOMParserBinding



} // namespace dom
} // namespace mozilla
