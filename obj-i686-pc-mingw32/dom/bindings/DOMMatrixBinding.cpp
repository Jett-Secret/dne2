/* THIS FILE IS AUTOGENERATED FROM DOMMatrix.webidl BY Codegen.py - DO NOT EDIT */

#include "DOMMatrixBinding.h"
#include "DOMPointBinding.h"
#include "WrapperFactory.h"
#include "jsfriendapi.h"
#include "mozilla/OwningNonNull.h"
#include "mozilla/Preferences.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/DOMJSClass.h"
#include "mozilla/dom/DOMMatrix.h"
#include "mozilla/dom/DOMPoint.h"
#include "mozilla/dom/NonRefcountedDOMObject.h"
#include "mozilla/dom/PrimitiveConversions.h"
#include "mozilla/dom/TypedArray.h"
#include "mozilla/dom/XrayExpandoClass.h"

namespace mozilla {
namespace dom {

namespace DOMMatrixBinding {

static_assert(IsRefcounted<NativeType>::value == IsRefcounted<DOMMatrixReadOnlyBinding::NativeType>::value,
              "Can't inherit from an interface with a different ownership model.");

static bool
get_a(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->A());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_a(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetA(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo a_getterinfo = {
  { (JSJitGetterOp)get_a },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo a_setterinfo = {
  { (JSJitGetterOp)set_a },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_b(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->B());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_b(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetB(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo b_getterinfo = {
  { (JSJitGetterOp)get_b },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo b_setterinfo = {
  { (JSJitGetterOp)set_b },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_c(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->C());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_c(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetC(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo c_getterinfo = {
  { (JSJitGetterOp)get_c },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo c_setterinfo = {
  { (JSJitGetterOp)set_c },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_d(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->D());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_d(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetD(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo d_getterinfo = {
  { (JSJitGetterOp)get_d },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo d_setterinfo = {
  { (JSJitGetterOp)set_d },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_e(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->E());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_e(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetE(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo e_getterinfo = {
  { (JSJitGetterOp)get_e },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo e_setterinfo = {
  { (JSJitGetterOp)set_e },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_f(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->F());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_f(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetF(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo f_getterinfo = {
  { (JSJitGetterOp)get_f },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo f_setterinfo = {
  { (JSJitGetterOp)set_f },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m11(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M11());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m11(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM11(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m11_getterinfo = {
  { (JSJitGetterOp)get_m11 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m11_setterinfo = {
  { (JSJitGetterOp)set_m11 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m12(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M12());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m12(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM12(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m12_getterinfo = {
  { (JSJitGetterOp)get_m12 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m12_setterinfo = {
  { (JSJitGetterOp)set_m12 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m13(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M13());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m13(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM13(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m13_getterinfo = {
  { (JSJitGetterOp)get_m13 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m13_setterinfo = {
  { (JSJitGetterOp)set_m13 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m14(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M14());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m14(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM14(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m14_getterinfo = {
  { (JSJitGetterOp)get_m14 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m14_setterinfo = {
  { (JSJitGetterOp)set_m14 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m21(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M21());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m21(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM21(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m21_getterinfo = {
  { (JSJitGetterOp)get_m21 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m21_setterinfo = {
  { (JSJitGetterOp)set_m21 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m22(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M22());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m22(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM22(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m22_getterinfo = {
  { (JSJitGetterOp)get_m22 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m22_setterinfo = {
  { (JSJitGetterOp)set_m22 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m23(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M23());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m23(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM23(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m23_getterinfo = {
  { (JSJitGetterOp)get_m23 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m23_setterinfo = {
  { (JSJitGetterOp)set_m23 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m24(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M24());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m24(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM24(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m24_getterinfo = {
  { (JSJitGetterOp)get_m24 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m24_setterinfo = {
  { (JSJitGetterOp)set_m24 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m31(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M31());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m31(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM31(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m31_getterinfo = {
  { (JSJitGetterOp)get_m31 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m31_setterinfo = {
  { (JSJitGetterOp)set_m31 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m32(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M32());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m32(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM32(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m32_getterinfo = {
  { (JSJitGetterOp)get_m32 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m32_setterinfo = {
  { (JSJitGetterOp)set_m32 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m33(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M33());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m33(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM33(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m33_getterinfo = {
  { (JSJitGetterOp)get_m33 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m33_setterinfo = {
  { (JSJitGetterOp)set_m33 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m34(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M34());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m34(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM34(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m34_getterinfo = {
  { (JSJitGetterOp)get_m34 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m34_setterinfo = {
  { (JSJitGetterOp)set_m34 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m41(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M41());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m41(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM41(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m41_getterinfo = {
  { (JSJitGetterOp)get_m41 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m41_setterinfo = {
  { (JSJitGetterOp)set_m41 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m42(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M42());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m42(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM42(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m42_getterinfo = {
  { (JSJitGetterOp)get_m42 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m42_setterinfo = {
  { (JSJitGetterOp)set_m42 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m43(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M43());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m43(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM43(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m43_getterinfo = {
  { (JSJitGetterOp)get_m43 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m43_setterinfo = {
  { (JSJitGetterOp)set_m43 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m44(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitGetterCallArgs args)
{
  double result(self->M44());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static bool
set_m44(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, JSJitSetterCallArgs args)
{
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  self->SetM44(arg0);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));

  return true;
}

static const JSJitInfo m44_getterinfo = {
  { (JSJitGetterOp)get_m44 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");
static const JSJitInfo m44_setterinfo = {
  { (JSJitGetterOp)set_m44 },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Setter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_UNDEFINED,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
multiplySelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.multiplySelf");
  }
  NonNull<mozilla::dom::DOMMatrix> arg0;
  if (args[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::DOMMatrix, mozilla::dom::DOMMatrix>(args[0], arg0);
      if (NS_FAILED(rv)) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Argument 1 of DOMMatrix.multiplySelf", "DOMMatrix");
        return false;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Argument 1 of DOMMatrix.multiplySelf");
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->MultiplySelf(NonNullHelper(arg0))));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo multiplySelf_methodinfo = {
  { (JSJitGetterOp)multiplySelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
preMultiplySelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.preMultiplySelf");
  }
  NonNull<mozilla::dom::DOMMatrix> arg0;
  if (args[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::DOMMatrix, mozilla::dom::DOMMatrix>(args[0], arg0);
      if (NS_FAILED(rv)) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Argument 1 of DOMMatrix.preMultiplySelf", "DOMMatrix");
        return false;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Argument 1 of DOMMatrix.preMultiplySelf");
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->PreMultiplySelf(NonNullHelper(arg0))));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo preMultiplySelf_methodinfo = {
  { (JSJitGetterOp)preMultiplySelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
translateSelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 2)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.translateSelf");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
    return false;
  }
  double arg2;
  if (args.hasDefined(2)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = 0.0;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->TranslateSelf(arg0, arg1, arg2)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo translateSelf_methodinfo = {
  { (JSJitGetterOp)translateSelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
scaleSelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.scaleSelf");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (args.hasDefined(1)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
      return false;
    }
  } else {
    arg1 = 0.0;
  }
  double arg2;
  if (args.hasDefined(2)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = 0.0;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->ScaleSelf(arg0, arg1, arg2)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo scaleSelf_methodinfo = {
  { (JSJitGetterOp)scaleSelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
scale3dSelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.scale3dSelf");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (args.hasDefined(1)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
      return false;
    }
  } else {
    arg1 = 0.0;
  }
  double arg2;
  if (args.hasDefined(2)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = 0.0;
  }
  double arg3;
  if (args.hasDefined(3)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[3], &arg3)) {
      return false;
    }
  } else {
    arg3 = 0.0;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->Scale3dSelf(arg0, arg1, arg2, arg3)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo scale3dSelf_methodinfo = {
  { (JSJitGetterOp)scale3dSelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
scaleNonUniformSelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.scaleNonUniformSelf");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (args.hasDefined(1)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
      return false;
    }
  } else {
    arg1 = 1.0;
  }
  double arg2;
  if (args.hasDefined(2)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = 1.0;
  }
  double arg3;
  if (args.hasDefined(3)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[3], &arg3)) {
      return false;
    }
  } else {
    arg3 = 0.0;
  }
  double arg4;
  if (args.hasDefined(4)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[4], &arg4)) {
      return false;
    }
  } else {
    arg4 = 0.0;
  }
  double arg5;
  if (args.hasDefined(5)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[5], &arg5)) {
      return false;
    }
  } else {
    arg5 = 0.0;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->ScaleNonUniformSelf(arg0, arg1, arg2, arg3, arg4, arg5)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo scaleNonUniformSelf_methodinfo = {
  { (JSJitGetterOp)scaleNonUniformSelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
rotateSelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.rotateSelf");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (args.hasDefined(1)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
      return false;
    }
  } else {
    arg1 = 0.0;
  }
  double arg2;
  if (args.hasDefined(2)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = 0.0;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->RotateSelf(arg0, arg1, arg2)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo rotateSelf_methodinfo = {
  { (JSJitGetterOp)rotateSelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
rotateFromVectorSelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 2)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.rotateFromVectorSelf");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->RotateFromVectorSelf(arg0, arg1)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo rotateFromVectorSelf_methodinfo = {
  { (JSJitGetterOp)rotateFromVectorSelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
rotateAxisAngleSelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 4)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.rotateAxisAngleSelf");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
    return false;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
    return false;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, args[3], &arg3)) {
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->RotateAxisAngleSelf(arg0, arg1, arg2, arg3)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo rotateAxisAngleSelf_methodinfo = {
  { (JSJitGetterOp)rotateAxisAngleSelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
skewXSelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.skewXSelf");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->SkewXSelf(arg0)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo skewXSelf_methodinfo = {
  { (JSJitGetterOp)skewXSelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
skewYSelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.skewYSelf");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->SkewYSelf(arg0)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo skewYSelf_methodinfo = {
  { (JSJitGetterOp)skewYSelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
invertSelf(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->InvertSelf()));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo invertSelf_methodinfo = {
  { (JSJitGetterOp)invertSelf },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
setMatrixValue(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrix* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix.setMatrixValue");
  }
  binding_detail::FakeString arg0;
  if (!ConvertJSValueToString(cx, args[0], eStringify, eStringify, arg0)) {
    return false;
  }
  binding_detail::FastErrorResult rv;
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->SetMatrixValue(NonNullHelper(Constify(arg0)), rv)));
  if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
    return false;
  }
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo setMatrixValue_methodinfo = {
  { (JSJitGetterOp)setMatrixValue },
  { prototypes::id::DOMMatrix },
  { PrototypeTraits<prototypes::id::DOMMatrix>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
_addProperty(JSContext* cx, JS::Handle<JSObject*> obj, JS::Handle<jsid> id, JS::Handle<JS::Value> val)
{
  mozilla::dom::DOMMatrix* self = UnwrapPossiblyNotInitializedDOMObject<mozilla::dom::DOMMatrix>(obj);
  // We don't want to preserve if we don't have a wrapper, and we
  // obviously can't preserve if we're not initialized.
  if (self && self->GetWrapperPreserveColor()) {
    PreserveWrapper(self);
  }
  return true;
}

static void
_finalize(js::FreeOp* fop, JSObject* obj)
{
  mozilla::dom::DOMMatrix* self = UnwrapPossiblyNotInitializedDOMObject<mozilla::dom::DOMMatrix>(obj);
  if (self) {
    ClearWrapper(self, self);
    AddForDeferredFinalization<mozilla::dom::DOMMatrix>(self);
  }
}

static void
_objectMoved(JSObject* obj, const JSObject* old)
{
  mozilla::dom::DOMMatrix* self = UnwrapPossiblyNotInitializedDOMObject<mozilla::dom::DOMMatrix>(obj);
  if (self) {
    UpdateWrapper(self, self, obj, old);
  }
}

static const JSFunctionSpec sMethods_specs[] = {
  JS_FNSPEC("multiplySelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&multiplySelf_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("preMultiplySelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&preMultiplySelf_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("translateSelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&translateSelf_methodinfo), 2, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("scaleSelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&scaleSelf_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("scale3dSelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&scale3dSelf_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("scaleNonUniformSelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&scaleNonUniformSelf_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("rotateSelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&rotateSelf_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("rotateFromVectorSelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&rotateFromVectorSelf_methodinfo), 2, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("rotateAxisAngleSelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&rotateAxisAngleSelf_methodinfo), 4, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("skewXSelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&skewXSelf_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("skewYSelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&skewYSelf_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("invertSelf", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&invertSelf_methodinfo), 0, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("setMatrixValue", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&setMatrixValue_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FS_END
};


// Can't be const because the pref-enabled boolean needs to be writable
static Prefable<const JSFunctionSpec> sMethods[] = {
  { nullptr, &sMethods_specs[0] },
  { nullptr, nullptr }
};

static jsid sMethods_ids[14];

static const JSPropertySpec sAttributes_specs[] = {
  { "a", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &a_getterinfo } }, { { GenericBindingSetter, &a_setterinfo } } } } },
  { "b", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &b_getterinfo } }, { { GenericBindingSetter, &b_setterinfo } } } } },
  { "c", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &c_getterinfo } }, { { GenericBindingSetter, &c_setterinfo } } } } },
  { "d", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &d_getterinfo } }, { { GenericBindingSetter, &d_setterinfo } } } } },
  { "e", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &e_getterinfo } }, { { GenericBindingSetter, &e_setterinfo } } } } },
  { "f", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &f_getterinfo } }, { { GenericBindingSetter, &f_setterinfo } } } } },
  { "m11", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m11_getterinfo } }, { { GenericBindingSetter, &m11_setterinfo } } } } },
  { "m12", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m12_getterinfo } }, { { GenericBindingSetter, &m12_setterinfo } } } } },
  { "m13", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m13_getterinfo } }, { { GenericBindingSetter, &m13_setterinfo } } } } },
  { "m14", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m14_getterinfo } }, { { GenericBindingSetter, &m14_setterinfo } } } } },
  { "m21", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m21_getterinfo } }, { { GenericBindingSetter, &m21_setterinfo } } } } },
  { "m22", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m22_getterinfo } }, { { GenericBindingSetter, &m22_setterinfo } } } } },
  { "m23", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m23_getterinfo } }, { { GenericBindingSetter, &m23_setterinfo } } } } },
  { "m24", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m24_getterinfo } }, { { GenericBindingSetter, &m24_setterinfo } } } } },
  { "m31", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m31_getterinfo } }, { { GenericBindingSetter, &m31_setterinfo } } } } },
  { "m32", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m32_getterinfo } }, { { GenericBindingSetter, &m32_setterinfo } } } } },
  { "m33", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m33_getterinfo } }, { { GenericBindingSetter, &m33_setterinfo } } } } },
  { "m34", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m34_getterinfo } }, { { GenericBindingSetter, &m34_setterinfo } } } } },
  { "m41", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m41_getterinfo } }, { { GenericBindingSetter, &m41_setterinfo } } } } },
  { "m42", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m42_getterinfo } }, { { GenericBindingSetter, &m42_setterinfo } } } } },
  { "m43", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m43_getterinfo } }, { { GenericBindingSetter, &m43_setterinfo } } } } },
  { "m44", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m44_getterinfo } }, { { GenericBindingSetter, &m44_setterinfo } } } } },
  JS_PS_END
};


// Can't be const because the pref-enabled boolean needs to be writable
static Prefable<const JSPropertySpec> sAttributes[] = {
  { nullptr, &sAttributes_specs[0] },
  { nullptr, nullptr }
};

static jsid sAttributes_ids[23];


static const NativePropertiesN<2> sNativeProperties = {
  -1,
  false, 0,
  false, 0,
  true,  0 /* sMethods */,
  true,  1 /* sAttributes */,
  false, 0,
  false, 0,
  false, 0,
  {
    { sMethods, sMethods_ids, sMethods_specs },
    { sAttributes, sAttributes_ids, sAttributes_specs }
  }
};

static bool
_constructor(JSContext* cx, unsigned argc, JS::Value* vp)
{
  JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
  JS::Rooted<JSObject*> obj(cx, &args.callee());
  if (!args.isConstructing()) {
    // XXXbz wish I could get the name from the callee instead of
    // Adding more relocations
    return ThrowConstructorWithoutNew(cx, "DOMMatrix");
  }

  GlobalObject global(cx, obj);
  if (global.Failed()) {
    return false;
  }

  JS::Rooted<JSObject*> desiredProto(cx);
  if (!GetDesiredProto(cx, args, &desiredProto)) {
    return false;
  }

  unsigned argcount = std::min(args.length(), 1u);
  switch (argcount) {
    case 0: {
      bool objIsXray = xpc::WrapperFactory::IsXrayWrapper(obj);
      Maybe<JSAutoCompartment> ac;
      if (objIsXray) {
        obj = js::CheckedUnwrap(obj);
        if (!obj) {
          return false;
        }
        ac.emplace(cx, obj);
        if (!JS_WrapObject(cx, &desiredProto)) {
          return false;
        }
      }
      binding_detail::FastErrorResult rv;
      auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(mozilla::dom::DOMMatrix::Constructor(global, rv)));
      if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
        return false;
      }
      MOZ_ASSERT(!JS_IsExceptionPending(cx));
      static_assert(!IsPointer<decltype(result)>::value,
                    "NewObject implies that we need to keep the object alive with a strong reference.");
      if (!GetOrCreateDOMReflector(cx, result, args.rval(), desiredProto)) {
        MOZ_ASSERT(true || JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    case 1: {
      if (args[0].isObject()) {
        do {
          NonNull<mozilla::dom::DOMMatrixReadOnly> arg0;
          {
            nsresult rv = UnwrapObject<prototypes::id::DOMMatrixReadOnly, mozilla::dom::DOMMatrixReadOnly>(args[0], arg0);
            if (NS_FAILED(rv)) {
              break;
            }
          }
          bool objIsXray = xpc::WrapperFactory::IsXrayWrapper(obj);
          Maybe<JSAutoCompartment> ac;
          if (objIsXray) {
            obj = js::CheckedUnwrap(obj);
            if (!obj) {
              return false;
            }
            ac.emplace(cx, obj);
            if (!JS_WrapObject(cx, &desiredProto)) {
              return false;
            }
          }
          binding_detail::FastErrorResult rv;
          auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(mozilla::dom::DOMMatrix::Constructor(global, NonNullHelper(arg0), rv)));
          if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
            return false;
          }
          MOZ_ASSERT(!JS_IsExceptionPending(cx));
          static_assert(!IsPointer<decltype(result)>::value,
                        "NewObject implies that we need to keep the object alive with a strong reference.");
          if (!GetOrCreateDOMReflector(cx, result, args.rval(), desiredProto)) {
            MOZ_ASSERT(true || JS_IsExceptionPending(cx));
            return false;
          }
          return true;
        } while (0);
        do {
          RootedTypedArray<Float32Array> arg0(cx);
          if (!arg0.Init(&args[0].toObject())) {
            break;
          }
          bool objIsXray = xpc::WrapperFactory::IsXrayWrapper(obj);
          Maybe<JSAutoCompartment> ac;
          if (objIsXray) {
            obj = js::CheckedUnwrap(obj);
            if (!obj) {
              return false;
            }
            ac.emplace(cx, obj);
            if (!JS_WrapObject(cx, &desiredProto)) {
              return false;
            }
            if (!arg0.WrapIntoNewCompartment(cx)) {
              return false;
            }
          }
          binding_detail::FastErrorResult rv;
          auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(mozilla::dom::DOMMatrix::Constructor(global, Constify(arg0), rv)));
          if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
            return false;
          }
          MOZ_ASSERT(!JS_IsExceptionPending(cx));
          static_assert(!IsPointer<decltype(result)>::value,
                        "NewObject implies that we need to keep the object alive with a strong reference.");
          if (!GetOrCreateDOMReflector(cx, result, args.rval(), desiredProto)) {
            MOZ_ASSERT(true || JS_IsExceptionPending(cx));
            return false;
          }
          return true;
        } while (0);
        do {
          RootedTypedArray<Float64Array> arg0(cx);
          if (!arg0.Init(&args[0].toObject())) {
            break;
          }
          bool objIsXray = xpc::WrapperFactory::IsXrayWrapper(obj);
          Maybe<JSAutoCompartment> ac;
          if (objIsXray) {
            obj = js::CheckedUnwrap(obj);
            if (!obj) {
              return false;
            }
            ac.emplace(cx, obj);
            if (!JS_WrapObject(cx, &desiredProto)) {
              return false;
            }
            if (!arg0.WrapIntoNewCompartment(cx)) {
              return false;
            }
          }
          binding_detail::FastErrorResult rv;
          auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(mozilla::dom::DOMMatrix::Constructor(global, Constify(arg0), rv)));
          if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
            return false;
          }
          MOZ_ASSERT(!JS_IsExceptionPending(cx));
          static_assert(!IsPointer<decltype(result)>::value,
                        "NewObject implies that we need to keep the object alive with a strong reference.");
          if (!GetOrCreateDOMReflector(cx, result, args.rval(), desiredProto)) {
            MOZ_ASSERT(true || JS_IsExceptionPending(cx));
            return false;
          }
          return true;
        } while (0);
        do {
          binding_detail::AutoSequence<double> arg0;
          JS::ForOfIterator iter(cx);
          if (!iter.init(args[0], JS::ForOfIterator::AllowNonIterable)) {
            return false;
          }
          if (!iter.valueIsIterable()) {
            break;
          }
          binding_detail::AutoSequence<double> &arr = arg0;
          JS::Rooted<JS::Value> temp(cx);
          while (true) {
            bool done;
            if (!iter.next(&temp, &done)) {
              return false;
            }
            if (done) {
              break;
            }
            double* slotPtr = arr.AppendElement(mozilla::fallible);
            if (!slotPtr) {
              JS_ReportOutOfMemory(cx);
              return false;
            }
            double& slot = *slotPtr;
            if (!ValueToPrimitive<double, eDefault>(cx, temp, &slot)) {
              return false;
            }
          }
          bool objIsXray = xpc::WrapperFactory::IsXrayWrapper(obj);
          Maybe<JSAutoCompartment> ac;
          if (objIsXray) {
            obj = js::CheckedUnwrap(obj);
            if (!obj) {
              return false;
            }
            ac.emplace(cx, obj);
            if (!JS_WrapObject(cx, &desiredProto)) {
              return false;
            }
          }
          binding_detail::FastErrorResult rv;
          auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(mozilla::dom::DOMMatrix::Constructor(global, Constify(arg0), rv)));
          if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
            return false;
          }
          MOZ_ASSERT(!JS_IsExceptionPending(cx));
          static_assert(!IsPointer<decltype(result)>::value,
                        "NewObject implies that we need to keep the object alive with a strong reference.");
          if (!GetOrCreateDOMReflector(cx, result, args.rval(), desiredProto)) {
            MOZ_ASSERT(true || JS_IsExceptionPending(cx));
            return false;
          }
          return true;
        } while (0);
      }
      bool objIsXray = xpc::WrapperFactory::IsXrayWrapper(obj);
      binding_detail::FakeString arg0;
      if (!ConvertJSValueToString(cx, args[0], eStringify, eStringify, arg0)) {
        return false;
      }
      Maybe<JSAutoCompartment> ac;
      if (objIsXray) {
        obj = js::CheckedUnwrap(obj);
        if (!obj) {
          return false;
        }
        ac.emplace(cx, obj);
        if (!JS_WrapObject(cx, &desiredProto)) {
          return false;
        }
      }
      binding_detail::FastErrorResult rv;
      auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(mozilla::dom::DOMMatrix::Constructor(global, NonNullHelper(Constify(arg0)), rv)));
      if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
        return false;
      }
      MOZ_ASSERT(!JS_IsExceptionPending(cx));
      static_assert(!IsPointer<decltype(result)>::value,
                    "NewObject implies that we need to keep the object alive with a strong reference.");
      if (!GetOrCreateDOMReflector(cx, result, args.rval(), desiredProto)) {
        MOZ_ASSERT(true || JS_IsExceptionPending(cx));
        return false;
      }
      return true;
      break;
    }
    default: {
      return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrix");
      break;
    }
  }
  MOZ_CRASH("We have an always-returning default case");
  return false;
}

static const js::ClassOps sInterfaceObjectClassOps = {
    nullptr,               /* addProperty */
    nullptr,               /* delProperty */
    nullptr,               /* getProperty */
    nullptr,               /* setProperty */
    nullptr,               /* enumerate */
    nullptr,               /* resolve */
    nullptr,               /* mayResolve */
    nullptr,               /* finalize */
    _constructor, /* call */
    nullptr,               /* hasInstance */
    _constructor, /* construct */
    nullptr,               /* trace */
};

static const DOMIfaceAndProtoJSClass sInterfaceObjectClass = {
  {
    "Function",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(DOM_INTERFACE_SLOTS_BASE),
    &sInterfaceObjectClassOps,
    JS_NULL_CLASS_SPEC,
    JS_NULL_CLASS_EXT,
    &sInterfaceObjectClassObjectOps
  },
  eInterface,
  true,
  prototypes::id::DOMMatrix,
  PrototypeTraits<prototypes::id::DOMMatrix>::Depth,
  sNativePropertyHooks,
  "function DOMMatrix() {\n    [native code]\n}",
  DOMMatrixReadOnlyBinding::GetConstructorObject
};

static const DOMIfaceAndProtoJSClass sPrototypeClass = {
  {
    "DOMMatrixPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(DOM_INTERFACE_PROTO_SLOTS_BASE),
    JS_NULL_CLASS_OPS,
    JS_NULL_CLASS_SPEC,
    JS_NULL_CLASS_EXT,
    JS_NULL_OBJECT_OPS
  },
  eInterfacePrototype,
  false,
  prototypes::id::DOMMatrix,
  PrototypeTraits<prototypes::id::DOMMatrix>::Depth,
  sNativePropertyHooks,
  "[object DOMMatrixPrototype]",
  DOMMatrixReadOnlyBinding::GetProtoObject
};

bool
ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj)
{
  return Preferences::GetBool("layout.css.DOMMatrix.enabled");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool aDefineOnGlobal)
{
  return GetConstructorObjectHandle(aCx, aDefineOnGlobal);
}

static const js::ClassOps sClassOps = {
  _addProperty, /* addProperty */
  nullptr,               /* delProperty */
  nullptr,               /* getProperty */
  nullptr,               /* setProperty */
  nullptr, /* enumerate */
  nullptr, /* resolve */
  nullptr, /* mayResolve */
  _finalize, /* finalize */
  nullptr, /* call */
  nullptr,               /* hasInstance */
  nullptr,               /* construct */
  nullptr, /* trace */
};

static const js::ClassExtension sClassExtension = {
  nullptr, /* weakmapKeyDelegateOp */
  _objectMoved /* objectMovedOp */
};

static const DOMJSClass sClass = {
  { "DOMMatrix",
    JSCLASS_IS_DOMJSCLASS | JSCLASS_FOREGROUND_FINALIZE | JSCLASS_HAS_RESERVED_SLOTS(1),
    &sClassOps,
    JS_NULL_CLASS_SPEC,
    &sClassExtension,
    JS_NULL_OBJECT_OPS
  },
  { prototypes::id::DOMMatrixReadOnly, prototypes::id::DOMMatrix, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count, prototypes::id::_ID_Count },
  IsBaseOf<nsISupports, mozilla::dom::DOMMatrix >::value,
  sNativePropertyHooks,
  FindAssociatedGlobalForNative<mozilla::dom::DOMMatrix>::Get,
  GetProtoObjectHandle,
  GetCCParticipant<mozilla::dom::DOMMatrix>::Get()
};
static_assert(1 == DOM_INSTANCE_RESERVED_SLOTS,
              "Must have the right minimal number of reserved slots.");
static_assert(1 >= 1,
              "Must have enough reserved slots.");

const JSClass*
GetJSClass()
{
  return sClass.ToJSClass();
}

bool
Wrap(JSContext* aCx, mozilla::dom::DOMMatrix* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector)
{
  MOZ_ASSERT(static_cast<mozilla::dom::DOMMatrix*>(aObject) ==
             reinterpret_cast<mozilla::dom::DOMMatrix*>(aObject),
             "Multiple inheritance for mozilla::dom::DOMMatrix is broken.");
  MOZ_ASSERT(static_cast<mozilla::dom::DOMMatrixReadOnly*>(aObject) ==
             reinterpret_cast<mozilla::dom::DOMMatrixReadOnly*>(aObject),
             "Multiple inheritance for mozilla::dom::DOMMatrixReadOnly is broken.");
  MOZ_ASSERT(ToSupportsIsCorrect(aObject));
  MOZ_ASSERT(!aCache->GetWrapper(),
             "You should probably not be using Wrap() directly; use "
             "GetOrCreateDOMReflector instead");

  MOZ_ASSERT(ToSupportsIsOnPrimaryInheritanceChain(aObject, aCache),
             "nsISupports must be on our primary inheritance chain");

  JS::Rooted<JSObject*> global(aCx, FindAssociatedGlobal(aCx, aObject->GetParentObject()));
  if (!global) {
    return false;
  }
  MOZ_ASSERT(JS_IsGlobalObject(global));
  MOZ_ASSERT(!JS::ObjectIsMarkedGray(global));

  // That might have ended up wrapping us already, due to the wonders
  // of XBL.  Check for that, and bail out as needed.
  aReflector.set(aCache->GetWrapper());
  if (aReflector) {
#ifdef DEBUG
    binding_detail::AssertReflectorHasGivenProto(aCx, aReflector, aGivenProto);
#endif // DEBUG
    return true;
  }

  JSAutoCompartment ac(aCx, global);
  JS::Handle<JSObject*> canonicalProto = GetProtoObjectHandle(aCx);
  if (!canonicalProto) {
    return false;
  }
  JS::Rooted<JSObject*> proto(aCx);
  if (aGivenProto) {
    proto = aGivenProto;
    // Unfortunately, while aGivenProto was in the compartment of aCx
    // coming in, we changed compartments to that of "parent" so may need
    // to wrap the proto here.
    if (js::GetContextCompartment(aCx) != js::GetObjectCompartment(proto)) {
      if (!JS_WrapObject(aCx, &proto)) {
        return false;
      }
    }
  } else {
    proto = canonicalProto;
  }

  BindingJSObjectCreator<mozilla::dom::DOMMatrix> creator(aCx);
  creator.CreateObject(aCx, sClass.ToJSClass(), proto, aObject, aReflector);
  if (!aReflector) {
    return false;
  }

  aCache->SetWrapper(aReflector);
  creator.InitializationSucceeded();

  MOZ_ASSERT(aCache->GetWrapperPreserveColor() &&
             aCache->GetWrapperPreserveColor() == aReflector);
  // If proto != canonicalProto, we have to preserve our wrapper;
  // otherwise we won't be able to properly recreate it later, since
  // we won't know what proto to use.  Note that we don't check
  // aGivenProto here, since it's entirely possible (and even
  // somewhat common) to have a non-null aGivenProto which is the
  // same as canonicalProto.
  if (proto != canonicalProto) {
    PreserveWrapper(aObject);
  }

  return true;
}

const NativePropertyHooks sNativePropertyHooks[] = { {
  nullptr,
  nullptr,
  nullptr,
  { sNativeProperties.Upcast(), nullptr },
  prototypes::id::DOMMatrix,
  constructors::id::DOMMatrix,
  DOMMatrixReadOnlyBinding::sNativePropertyHooks,
  &DefaultXrayExpandoObjectClass
} };

void
CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal)
{
  JS::Handle<JSObject*> parentProto(DOMMatrixReadOnlyBinding::GetProtoObjectHandle(aCx));
  if (!parentProto) {
    return;
  }

  JS::Handle<JSObject*> constructorProto(DOMMatrixReadOnlyBinding::GetConstructorObjectHandle(aCx));
  if (!constructorProto) {
    return;
  }

  static bool sIdsInited = false;
  if (!sIdsInited && NS_IsMainThread()) {
    if (!InitIds(aCx, sMethods, sMethods_ids)) {
      return;
    }
    if (!InitIds(aCx, sAttributes, sAttributes_ids)) {
      return;
    }
    sIdsInited = true;
  }

  JS::Heap<JSObject*>* protoCache = &aProtoAndIfaceCache.EntrySlotOrCreate(prototypes::id::DOMMatrix);
  JS::Heap<JSObject*>* interfaceCache = &aProtoAndIfaceCache.EntrySlotOrCreate(constructors::id::DOMMatrix);
  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &sPrototypeClass.mBase, protoCache,
                              constructorProto, &sInterfaceObjectClass.mBase, 0, nullptr,
                              interfaceCache,
                              sNativeProperties.Upcast(),
                              nullptr,
                              "DOMMatrix", aDefineOnGlobal,
                              nullptr,
                              false);
}

JS::Handle<JSObject*>
GetProtoObjectHandle(JSContext* aCx)
{
  /* Get the interface prototype object for this class.  This will create the
     object as needed. */
  bool aDefineOnGlobal = true;

  /* Make sure our global is sane.  Hopefully we can remove this sometime */
  JSObject* global = JS::CurrentGlobalOrNull(aCx);
  if (!(js::GetObjectClass(global)->flags & JSCLASS_DOM_GLOBAL)) {
    return nullptr;
  }

  /* Check to see whether the interface objects are already installed */
  ProtoAndIfaceCache& protoAndIfaceCache = *GetProtoAndIfaceCache(global);
  if (!protoAndIfaceCache.EntrySlotIfExists(prototypes::id::DOMMatrix)) {
    JS::Rooted<JSObject*> rootedGlobal(aCx, global);
    CreateInterfaceObjects(aCx, rootedGlobal, protoAndIfaceCache, aDefineOnGlobal);
  }

  /*
   * The object might _still_ be null, but that's OK.
   *
   * Calling fromMarkedLocation() is safe because protoAndIfaceCache is
   * traced by TraceProtoAndIfaceCache() and its contents are never
   * changed after they have been set.
   *
   * Calling address() avoids the read read barrier that does gray
   * unmarking, but it's not possible for the object to be gray here.
   */

  const JS::Heap<JSObject*>& entrySlot = protoAndIfaceCache.EntrySlotMustExist(prototypes::id::DOMMatrix);
  MOZ_ASSERT_IF(entrySlot, !JS::ObjectIsMarkedGray(entrySlot));
  return JS::Handle<JSObject*>::fromMarkedLocation(entrySlot.address());
}

JSObject*
GetProtoObject(JSContext* aCx)
{
  return GetProtoObjectHandle(aCx);
}

JS::Handle<JSObject*>
GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal)
{
  /* Get the interface object for this class.  This will create the object as
     needed. */

  /* Make sure our global is sane.  Hopefully we can remove this sometime */
  JSObject* global = JS::CurrentGlobalOrNull(aCx);
  if (!(js::GetObjectClass(global)->flags & JSCLASS_DOM_GLOBAL)) {
    return nullptr;
  }

  /* Check to see whether the interface objects are already installed */
  ProtoAndIfaceCache& protoAndIfaceCache = *GetProtoAndIfaceCache(global);
  if (!protoAndIfaceCache.EntrySlotIfExists(constructors::id::DOMMatrix)) {
    JS::Rooted<JSObject*> rootedGlobal(aCx, global);
    CreateInterfaceObjects(aCx, rootedGlobal, protoAndIfaceCache, aDefineOnGlobal);
  }

  /*
   * The object might _still_ be null, but that's OK.
   *
   * Calling fromMarkedLocation() is safe because protoAndIfaceCache is
   * traced by TraceProtoAndIfaceCache() and its contents are never
   * changed after they have been set.
   *
   * Calling address() avoids the read read barrier that does gray
   * unmarking, but it's not possible for the object to be gray here.
   */

  const JS::Heap<JSObject*>& entrySlot = protoAndIfaceCache.EntrySlotMustExist(constructors::id::DOMMatrix);
  MOZ_ASSERT_IF(entrySlot, !JS::ObjectIsMarkedGray(entrySlot));
  return JS::Handle<JSObject*>::fromMarkedLocation(entrySlot.address());
}

JSObject*
GetConstructorObject(JSContext* aCx)
{
  return GetConstructorObjectHandle(aCx);
}

} // namespace DOMMatrixBinding



namespace DOMMatrixReadOnlyBinding {

static bool
get_a(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->A());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo a_getterinfo = {
  { (JSJitGetterOp)get_a },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_b(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->B());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo b_getterinfo = {
  { (JSJitGetterOp)get_b },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_c(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->C());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo c_getterinfo = {
  { (JSJitGetterOp)get_c },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_d(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->D());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo d_getterinfo = {
  { (JSJitGetterOp)get_d },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_e(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->E());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo e_getterinfo = {
  { (JSJitGetterOp)get_e },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_f(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->F());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo f_getterinfo = {
  { (JSJitGetterOp)get_f },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m11(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M11());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m11_getterinfo = {
  { (JSJitGetterOp)get_m11 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m12(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M12());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m12_getterinfo = {
  { (JSJitGetterOp)get_m12 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m13(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M13());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m13_getterinfo = {
  { (JSJitGetterOp)get_m13 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m14(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M14());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m14_getterinfo = {
  { (JSJitGetterOp)get_m14 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m21(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M21());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m21_getterinfo = {
  { (JSJitGetterOp)get_m21 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m22(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M22());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m22_getterinfo = {
  { (JSJitGetterOp)get_m22 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m23(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M23());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m23_getterinfo = {
  { (JSJitGetterOp)get_m23 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m24(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M24());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m24_getterinfo = {
  { (JSJitGetterOp)get_m24 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m31(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M31());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m31_getterinfo = {
  { (JSJitGetterOp)get_m31 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m32(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M32());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m32_getterinfo = {
  { (JSJitGetterOp)get_m32 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m33(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M33());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m33_getterinfo = {
  { (JSJitGetterOp)get_m33 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m34(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M34());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m34_getterinfo = {
  { (JSJitGetterOp)get_m34 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m41(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M41());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m41_getterinfo = {
  { (JSJitGetterOp)get_m41 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m42(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M42());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m42_getterinfo = {
  { (JSJitGetterOp)get_m42 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m43(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M43());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m43_getterinfo = {
  { (JSJitGetterOp)get_m43 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_m44(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  double result(self->M44());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().set(JS_NumberValue(double(result)));
  return true;
}

static const JSJitInfo m44_getterinfo = {
  { (JSJitGetterOp)get_m44 },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_DOUBLE,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
translate(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 2)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrixReadOnly.translate");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
    return false;
  }
  double arg2;
  if (args.hasDefined(2)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = 0.0;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->Translate(arg0, arg1, arg2)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo translate_methodinfo = {
  { (JSJitGetterOp)translate },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
scale(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrixReadOnly.scale");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (args.hasDefined(1)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
      return false;
    }
  } else {
    arg1 = 0.0;
  }
  double arg2;
  if (args.hasDefined(2)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = 0.0;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->Scale(arg0, arg1, arg2)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo scale_methodinfo = {
  { (JSJitGetterOp)scale },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
scale3d(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrixReadOnly.scale3d");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (args.hasDefined(1)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
      return false;
    }
  } else {
    arg1 = 0.0;
  }
  double arg2;
  if (args.hasDefined(2)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = 0.0;
  }
  double arg3;
  if (args.hasDefined(3)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[3], &arg3)) {
      return false;
    }
  } else {
    arg3 = 0.0;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->Scale3d(arg0, arg1, arg2, arg3)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo scale3d_methodinfo = {
  { (JSJitGetterOp)scale3d },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
scaleNonUniform(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrixReadOnly.scaleNonUniform");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (args.hasDefined(1)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
      return false;
    }
  } else {
    arg1 = 1.0;
  }
  double arg2;
  if (args.hasDefined(2)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = 1.0;
  }
  double arg3;
  if (args.hasDefined(3)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[3], &arg3)) {
      return false;
    }
  } else {
    arg3 = 0.0;
  }
  double arg4;
  if (args.hasDefined(4)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[4], &arg4)) {
      return false;
    }
  } else {
    arg4 = 0.0;
  }
  double arg5;
  if (args.hasDefined(5)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[5], &arg5)) {
      return false;
    }
  } else {
    arg5 = 0.0;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->ScaleNonUniform(arg0, arg1, arg2, arg3, arg4, arg5)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo scaleNonUniform_methodinfo = {
  { (JSJitGetterOp)scaleNonUniform },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
rotate(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrixReadOnly.rotate");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (args.hasDefined(1)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
      return false;
    }
  } else {
    arg1 = 0.0;
  }
  double arg2;
  if (args.hasDefined(2)) {
    if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
      return false;
    }
  } else {
    arg2 = 0.0;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->Rotate(arg0, arg1, arg2)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo rotate_methodinfo = {
  { (JSJitGetterOp)rotate },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
rotateFromVector(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 2)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrixReadOnly.rotateFromVector");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->RotateFromVector(arg0, arg1)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo rotateFromVector_methodinfo = {
  { (JSJitGetterOp)rotateFromVector },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
rotateAxisAngle(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 4)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrixReadOnly.rotateAxisAngle");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  double arg1;
  if (!ValueToPrimitive<double, eDefault>(cx, args[1], &arg1)) {
    return false;
  }
  double arg2;
  if (!ValueToPrimitive<double, eDefault>(cx, args[2], &arg2)) {
    return false;
  }
  double arg3;
  if (!ValueToPrimitive<double, eDefault>(cx, args[3], &arg3)) {
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->RotateAxisAngle(arg0, arg1, arg2, arg3)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo rotateAxisAngle_methodinfo = {
  { (JSJitGetterOp)rotateAxisAngle },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
skewX(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrixReadOnly.skewX");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->SkewX(arg0)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo skewX_methodinfo = {
  { (JSJitGetterOp)skewX },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
skewY(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrixReadOnly.skewY");
  }
  double arg0;
  if (!ValueToPrimitive<double, eDefault>(cx, args[0], &arg0)) {
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->SkewY(arg0)));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo skewY_methodinfo = {
  { (JSJitGetterOp)skewY },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
multiply(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  if (MOZ_UNLIKELY(args.length() < 1)) {
    return ThrowErrorMessage(cx, MSG_MISSING_ARGUMENTS, "DOMMatrixReadOnly.multiply");
  }
  NonNull<mozilla::dom::DOMMatrix> arg0;
  if (args[0].isObject()) {
    {
      nsresult rv = UnwrapObject<prototypes::id::DOMMatrix, mozilla::dom::DOMMatrix>(args[0], arg0);
      if (NS_FAILED(rv)) {
        ThrowErrorMessage(cx, MSG_DOES_NOT_IMPLEMENT_INTERFACE, "Argument 1 of DOMMatrixReadOnly.multiply", "DOMMatrix");
        return false;
      }
    }
  } else {
    ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Argument 1 of DOMMatrixReadOnly.multiply");
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->Multiply(NonNullHelper(arg0))));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo multiply_methodinfo = {
  { (JSJitGetterOp)multiply },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
flipX(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->FlipX()));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo flipX_methodinfo = {
  { (JSJitGetterOp)flipX },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
flipY(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->FlipY()));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo flipY_methodinfo = {
  { (JSJitGetterOp)flipY },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
inverse(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  auto result(StrongOrRawPtr<mozilla::dom::DOMMatrix>(self->Inverse()));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo inverse_methodinfo = {
  { (JSJitGetterOp)inverse },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_is2D(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  bool result(self->Is2D());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().setBoolean(result);
  return true;
}

static const JSJitInfo is2D_getterinfo = {
  { (JSJitGetterOp)get_is2D },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_BOOLEAN,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
get_identity(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, JSJitGetterCallArgs args)
{
  bool result(self->Identity());
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  args.rval().setBoolean(result);
  return true;
}

static const JSJitInfo identity_getterinfo = {
  { (JSJitGetterOp)get_identity },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Getter,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_BOOLEAN,  /* returnType.  Not relevant for setters. */
  true,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
transformPoint(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  binding_detail::FastDOMPointInit arg0;
  if (!arg0.Init(cx, (args.hasDefined(0)) ? args[0] : JS::NullHandleValue,  "Argument 1 of DOMMatrixReadOnly.transformPoint", false)) {
    return false;
  }
  auto result(StrongOrRawPtr<mozilla::dom::DOMPoint>(self->TransformPoint(Constify(arg0))));
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!GetOrCreateDOMReflector(cx, result, args.rval())) {
    MOZ_ASSERT(true || JS_IsExceptionPending(cx));
    return false;
  }
  return true;
}

static const JSJitInfo transformPoint_methodinfo = {
  { (JSJitGetterOp)transformPoint },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
toFloat32Array(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  binding_detail::FastErrorResult rv;
  JS::Rooted<JSObject*> result(cx);
  self->ToFloat32Array(cx, &result, rv);
  if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
    return false;
  }
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  JS::ExposeObjectToActiveJS(result);
  args.rval().setObject(*result);
  if (!MaybeWrapNonDOMObjectValue(cx, args.rval())) {
    return false;
  }
  return true;
}

static const JSJitInfo toFloat32Array_methodinfo = {
  { (JSJitGetterOp)toFloat32Array },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
toFloat64Array(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  binding_detail::FastErrorResult rv;
  JS::Rooted<JSObject*> result(cx);
  self->ToFloat64Array(cx, &result, rv);
  if (MOZ_UNLIKELY(rv.MaybeSetPendingException(cx))) {
    return false;
  }
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  JS::ExposeObjectToActiveJS(result);
  args.rval().setObject(*result);
  if (!MaybeWrapNonDOMObjectValue(cx, args.rval())) {
    return false;
  }
  return true;
}

static const JSJitInfo toFloat64Array_methodinfo = {
  { (JSJitGetterOp)toFloat64Array },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_OBJECT,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static bool
__stringifier(JSContext* cx, JS::Handle<JSObject*> obj, mozilla::dom::DOMMatrixReadOnly* self, const JSJitMethodCallArgs& args)
{
  DOMString result;
  self->Stringify(result);
  MOZ_ASSERT(!JS_IsExceptionPending(cx));
  if (!xpc::NonVoidStringToJsval(cx, result, args.rval())) {
    return false;
  }
  return true;
}

static const JSJitInfo __stringifier_methodinfo = {
  { (JSJitGetterOp)__stringifier },
  { prototypes::id::DOMMatrixReadOnly },
  { PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth },
  JSJitInfo::Method,
  JSJitInfo::AliasEverything, /* aliasSet.  Not relevant for setters. */
  JSVAL_TYPE_STRING,  /* returnType.  Not relevant for setters. */
  false,  /* isInfallible. False in setters. */
  false,  /* isMovable.  Not relevant for setters. */
  false, /* isEliminatable.  Not relevant for setters. */
  false, /* isAlwaysInSlot.  Only relevant for getters. */
  false, /* isLazilyCachedInSlot.  Only relevant for getters. */
  false,  /* isTypedMethod.  Only relevant for methods. */
  0   /* Reserved slot index, if we're stored in a slot, else 0. */
};
static_assert(0 <= JSJitInfo::maxSlotIndex, "We won't fit");
static_assert(0 < 1, "There is no slot for us");

static const JSFunctionSpec sMethods_specs[] = {
  JS_FNSPEC("translate", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&translate_methodinfo), 2, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("scale", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&scale_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("scale3d", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&scale3d_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("scaleNonUniform", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&scaleNonUniform_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("rotate", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&rotate_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("rotateFromVector", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&rotateFromVector_methodinfo), 2, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("rotateAxisAngle", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&rotateAxisAngle_methodinfo), 4, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("skewX", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&skewX_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("skewY", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&skewY_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("multiply", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&multiply_methodinfo), 1, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("flipX", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&flipX_methodinfo), 0, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("flipY", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&flipY_methodinfo), 0, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("inverse", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&inverse_methodinfo), 0, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("transformPoint", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&transformPoint_methodinfo), 0, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("toFloat32Array", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&toFloat32Array_methodinfo), 0, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("toFloat64Array", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&toFloat64Array_methodinfo), 0, JSPROP_ENUMERATE, nullptr),
  JS_FNSPEC("toString", GenericBindingMethod, reinterpret_cast<const JSJitInfo*>(&__stringifier_methodinfo), 0, JSPROP_ENUMERATE, nullptr),
  JS_FS_END
};


// Can't be const because the pref-enabled boolean needs to be writable
static Prefable<const JSFunctionSpec> sMethods[] = {
  { nullptr, &sMethods_specs[0] },
  { nullptr, nullptr }
};

static jsid sMethods_ids[18];

static const JSPropertySpec sAttributes_specs[] = {
  { "a", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &a_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "b", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &b_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "c", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &c_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "d", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &d_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "e", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &e_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "f", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &f_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m11", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m11_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m12", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m12_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m13", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m13_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m14", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m14_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m21", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m21_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m22", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m22_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m23", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m23_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m24", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m24_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m31", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m31_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m32", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m32_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m33", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m33_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m34", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m34_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m41", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m41_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m42", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m42_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m43", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m43_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "m44", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &m44_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "is2D", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &is2D_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  { "identity", JSPROP_SHARED | JSPROP_ENUMERATE, { { { { GenericBindingGetter, &identity_getterinfo } }, JSNATIVE_WRAPPER(nullptr) } } },
  JS_PS_END
};


// Can't be const because the pref-enabled boolean needs to be writable
static Prefable<const JSPropertySpec> sAttributes[] = {
  { nullptr, &sAttributes_specs[0] },
  { nullptr, nullptr }
};

static jsid sAttributes_ids[25];


static const NativePropertiesN<2> sNativeProperties = {
  -1,
  false, 0,
  false, 0,
  true,  0 /* sMethods */,
  true,  1 /* sAttributes */,
  false, 0,
  false, 0,
  false, 0,
  {
    { sMethods, sMethods_ids, sMethods_specs },
    { sAttributes, sAttributes_ids, sAttributes_specs }
  }
};

static const DOMIfaceAndProtoJSClass sInterfaceObjectClass = {
  {
    "Function",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(DOM_INTERFACE_SLOTS_BASE),
    &sBoringInterfaceObjectClassClassOps,
    JS_NULL_CLASS_SPEC,
    JS_NULL_CLASS_EXT,
    &sInterfaceObjectClassObjectOps
  },
  eInterface,
  true,
  prototypes::id::DOMMatrixReadOnly,
  PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth,
  sNativePropertyHooks,
  "function DOMMatrixReadOnly() {\n    [native code]\n}",
  JS::GetRealmFunctionPrototype
};

static const DOMIfaceAndProtoJSClass sPrototypeClass = {
  {
    "DOMMatrixReadOnlyPrototype",
    JSCLASS_IS_DOMIFACEANDPROTOJSCLASS | JSCLASS_HAS_RESERVED_SLOTS(DOM_INTERFACE_PROTO_SLOTS_BASE),
    JS_NULL_CLASS_OPS,
    JS_NULL_CLASS_SPEC,
    JS_NULL_CLASS_EXT,
    JS_NULL_OBJECT_OPS
  },
  eInterfacePrototype,
  false,
  prototypes::id::DOMMatrixReadOnly,
  PrototypeTraits<prototypes::id::DOMMatrixReadOnly>::Depth,
  sNativePropertyHooks,
  "[object DOMMatrixReadOnlyPrototype]",
  JS::GetRealmObjectPrototype
};

bool
ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj)
{
  return Preferences::GetBool("layout.css.DOMMatrix.enabled");
}

JSObject*
DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool aDefineOnGlobal)
{
  return GetConstructorObjectHandle(aCx, aDefineOnGlobal);
}

const NativePropertyHooks sNativePropertyHooks[] = { {
  nullptr,
  nullptr,
  nullptr,
  { sNativeProperties.Upcast(), nullptr },
  prototypes::id::DOMMatrixReadOnly,
  constructors::id::DOMMatrixReadOnly,
  nullptr,
  &DefaultXrayExpandoObjectClass
} };

void
CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal)
{
  JS::Rooted<JSObject*> parentProto(aCx, JS::GetRealmObjectPrototype(aCx));
  if (!parentProto) {
    return;
  }

  JS::Rooted<JSObject*> constructorProto(aCx, JS::GetRealmFunctionPrototype(aCx));
  if (!constructorProto) {
    return;
  }

  static bool sIdsInited = false;
  if (!sIdsInited && NS_IsMainThread()) {
    if (!InitIds(aCx, sMethods, sMethods_ids)) {
      return;
    }
    if (!InitIds(aCx, sAttributes, sAttributes_ids)) {
      return;
    }
    sIdsInited = true;
  }

  JS::Heap<JSObject*>* protoCache = &aProtoAndIfaceCache.EntrySlotOrCreate(prototypes::id::DOMMatrixReadOnly);
  JS::Heap<JSObject*>* interfaceCache = &aProtoAndIfaceCache.EntrySlotOrCreate(constructors::id::DOMMatrixReadOnly);
  dom::CreateInterfaceObjects(aCx, aGlobal, parentProto,
                              &sPrototypeClass.mBase, protoCache,
                              constructorProto, &sInterfaceObjectClass.mBase, 0, nullptr,
                              interfaceCache,
                              sNativeProperties.Upcast(),
                              nullptr,
                              "DOMMatrixReadOnly", aDefineOnGlobal,
                              nullptr,
                              false);
}

JS::Handle<JSObject*>
GetProtoObjectHandle(JSContext* aCx)
{
  /* Get the interface prototype object for this class.  This will create the
     object as needed. */
  bool aDefineOnGlobal = true;

  /* Make sure our global is sane.  Hopefully we can remove this sometime */
  JSObject* global = JS::CurrentGlobalOrNull(aCx);
  if (!(js::GetObjectClass(global)->flags & JSCLASS_DOM_GLOBAL)) {
    return nullptr;
  }

  /* Check to see whether the interface objects are already installed */
  ProtoAndIfaceCache& protoAndIfaceCache = *GetProtoAndIfaceCache(global);
  if (!protoAndIfaceCache.EntrySlotIfExists(prototypes::id::DOMMatrixReadOnly)) {
    JS::Rooted<JSObject*> rootedGlobal(aCx, global);
    CreateInterfaceObjects(aCx, rootedGlobal, protoAndIfaceCache, aDefineOnGlobal);
  }

  /*
   * The object might _still_ be null, but that's OK.
   *
   * Calling fromMarkedLocation() is safe because protoAndIfaceCache is
   * traced by TraceProtoAndIfaceCache() and its contents are never
   * changed after they have been set.
   *
   * Calling address() avoids the read read barrier that does gray
   * unmarking, but it's not possible for the object to be gray here.
   */

  const JS::Heap<JSObject*>& entrySlot = protoAndIfaceCache.EntrySlotMustExist(prototypes::id::DOMMatrixReadOnly);
  MOZ_ASSERT_IF(entrySlot, !JS::ObjectIsMarkedGray(entrySlot));
  return JS::Handle<JSObject*>::fromMarkedLocation(entrySlot.address());
}

JSObject*
GetProtoObject(JSContext* aCx)
{
  return GetProtoObjectHandle(aCx);
}

JS::Handle<JSObject*>
GetConstructorObjectHandle(JSContext* aCx, bool aDefineOnGlobal)
{
  /* Get the interface object for this class.  This will create the object as
     needed. */

  /* Make sure our global is sane.  Hopefully we can remove this sometime */
  JSObject* global = JS::CurrentGlobalOrNull(aCx);
  if (!(js::GetObjectClass(global)->flags & JSCLASS_DOM_GLOBAL)) {
    return nullptr;
  }

  /* Check to see whether the interface objects are already installed */
  ProtoAndIfaceCache& protoAndIfaceCache = *GetProtoAndIfaceCache(global);
  if (!protoAndIfaceCache.EntrySlotIfExists(constructors::id::DOMMatrixReadOnly)) {
    JS::Rooted<JSObject*> rootedGlobal(aCx, global);
    CreateInterfaceObjects(aCx, rootedGlobal, protoAndIfaceCache, aDefineOnGlobal);
  }

  /*
   * The object might _still_ be null, but that's OK.
   *
   * Calling fromMarkedLocation() is safe because protoAndIfaceCache is
   * traced by TraceProtoAndIfaceCache() and its contents are never
   * changed after they have been set.
   *
   * Calling address() avoids the read read barrier that does gray
   * unmarking, but it's not possible for the object to be gray here.
   */

  const JS::Heap<JSObject*>& entrySlot = protoAndIfaceCache.EntrySlotMustExist(constructors::id::DOMMatrixReadOnly);
  MOZ_ASSERT_IF(entrySlot, !JS::ObjectIsMarkedGray(entrySlot));
  return JS::Handle<JSObject*>::fromMarkedLocation(entrySlot.address());
}

JSObject*
GetConstructorObject(JSContext* aCx)
{
  return GetConstructorObjectHandle(aCx);
}

} // namespace DOMMatrixReadOnlyBinding



} // namespace dom
} // namespace mozilla
